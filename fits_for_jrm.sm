###############################################################################
# init_linear
init_linear

	echo " "
	echo "*** Model is: Linear Fit (in log-log space) *** "
	echo "    Give initial guess for parameters: "
	if($linorlogx == 1) { 
	   define var0 ? <                           Y value [@x=$(10**($x0))]: >
	}
	if($linorlogy == 1) { 
	   define var0 $(lg($var0))
	}
	define var1  ? <                                   Slope : >

	set parvec = < $var0 $var1 >

	# convert the time vector back to actual values
	#
	## set pass_x = $xs*pass_x + $x0

	## set xdum = $xstart,$(pass_x[$(dimen(pass_x)-1)]*1.05),$xstep
	## set xdum = (xdum - $x0)/$xs

	# set xdum   = $(pass_x[0]),$(pass_x[$(dimen(pass_x)-1)]+5000),500
	# set pass_x = pass_x/$x0
	# set xdum   = xdum/$x0

##---------------------------------------------------------------------------
## exit_linear
exit_linear

	if($linorlogy == 1) { 
	    define p0 (10**$(parvec[0]))
	}

	echo "-------------------------------------------------------------" 
	echo "*** Model is: CONSTANT + Straight line (for ???-??? data) ***" 
	echo " " 
	if($linorlogx == 1) { 
	   echo   - Y value    : $p0 [@x=$(10**$x0)]
	} else {
	   echo   - Y value    : $p0 [@x=$x0]
	}
	echo   - Slope      : $(parvec[1])
	echo -------------------------------------------------------------
	echo  Chi^2 = $_newchi /$($npts-$nterms) ($($_newchi/($($npts-$nterms))))
	echo -------------------------------------------------------------

	set ydum = $testfunc(xdum,_a)
	# set xdum = xdum*$x0
	set xdum = xdum*$xs + $x0

##---------------------------------------------------------------------------
## linear 2       : f(x,a)
linear 2

	set $0 =  $2[0] + $2[1]*$1

##---------------------------------------------------------------------------
## der_linear 3   : df(x,a,j)
der_linear 3

	if($3 == 0) { 
	   set $0 = 1 + 0*$1
	}

	if($3 == 1) { 
	   set $0 = $1
	}

################################################################################
#-------------------------------------------------------------------------------
# test_pl_cutoff
test_pl_cutoff 101

        if($?1) {
            if(substr('$1',0,2) == '-h' ){
               echo "-----------------------------------------------"
               echo " pl_cutoff: "
               echo " "
               echo " USAGE: "
               echo "    > pl_cutoff K=2e-10 g=3.1 efold=4.3 "
               echo "  or"
               echo "    > pl_cutoff (in this case it draws the line in black) "
               echo " "
               echo "-----------------------------------------------"
               return
            } else {
               # define silentparsing 1
	       echo $1
               mparsep $1
               define silentparsing 0
            }
        }

	echo $K
	echo $g
	echo $efold
	set lg_eee = $(lg(0.3)),$(lg(10.5)),0.01
	define lgK $(lg($K))
	#define g (2.1)
	#define efold (4.3)

	set lg_fff = $lgK - ($g-2)*lg_eee - 0.4343*(10.**lg_eee/4.3)

	connect lg_eee lg_fff

################################################################################
#-------------------------------------------------------------------------------
# init_pl_cutoff
init_pl_cutoff

	echo "*** Model is: POWER LAW + EXPONENTIAL CUTOFF (for LOG-LOG data) *** "
	echo "    Give initial guess for parameters: "
	define var0 ? < Normalization (linear value)   : >
	define var1 ? < Power Law Photon Index [Gamma] : > 
	define var2 ? < Cutoff Energy (linear value)   : >
	
	define var0 (lg($var0))
	# define var1 (lg(var1))
	# define var2 (lg(var2/$xs))
	define var2 ($var2/10.0**$x0)

	set parvec = < $var0 $var1 $var2 >
	
##-------------------------------------------------------------------------------
## pl_cutoff 2  f(x,a)
pl_cutoff 2

        set $0 =  $2[0] - ($2[1]-2)*$1 - 0.4343*10.0**$1/$2[2]

##---------------------------------------------------------------------------
## der_pl_cutoff 3   : df(x,a,j)
der_pl_cutoff 3

	if($3 == 0) { 
	   set $0 = 1.0 + 0.0*$1
	}

	if($3 == 1) { 
	   set $0 = -1.0*$1
	}

	if($3 == 2) { 
	   set $0 = 0.4343*10.0**($1)/($3*$3)
	}

##-------------------------------------------------------------------------------
## exit_pl_cutoff
exit_pl_cutoff

	# set parvec = 10.**parvec
	# set parvec[2] = parvec[2]*$xs
	set parvec[0] = 10.0**$(parvec[0])

	define var0 $(parvec[0])
	define var1 $(parvec[1])
	define var2 $(parvec[2])

	echo "-----------------------------------------------------------------------" 
	echo "*** Model is: POWER LAW + EXPONENTIAL CUTOFF (for LOG-LOG data) *** "
	echo "  "
	echo "  - Normalization (linear value)   :" $(parvec[0])
	echo "  - Power Law Photon Index [Gamma] :" $(parvec[1])
	echo "  - Cutoff Energy (linear value)   :" $(parvec[2])
	echo "-------------------------------------------------------------" 
	echo " Chi^2 =" $_newchi "/"$($npts-$nterms) ($($_newchi/($($npts-$nterms))))
	echo "-------------------------------------------------------------" 

	set ydum = $testfunc(xdum,_a)
	set xdum = xdum*$xs + $x0

################################################################################
##-------------------------------------------------------------------------------
# init_new_pl_cutoff
init_new_pl_cutoff

	echo "*** Model is: POWER LAW + EXPONENTIAL CUTOFF (for LOG-LOG data) *** "
	echo "    Give initial guess for parameters: "
	define var0 ? < Normalization (linear value)   : >
	define var1 ? < Power Law Photon Index [Gamma] : > 
	define var2 ? < Cutoff Energy (linear value)   : >
	
	define var0 (lg($var0))
	# define var1 (lg(var1))
	# define var2 (lg(var2/$xs))
	define var2 ($var2/10.0**$x0)

	set parvec = < $var0 $var1 $var2 >

	#print < parvec > 
	
##-------------------------------------------------------------------------------
## new_pl_cutoff 2  f(x,a)
new_pl_cutoff 2

        set $0 =  $2[0] - $2[1]*$1 - 0.4343*(10.0**$1)/$2[2]
	#echo " calculating function for parameters : "
	#print < $2 > 

##---------------------------------------------------------------------------
## der_new_pl_cutoff 3   : df(x,a,j)
der_new_pl_cutoff 3

	if($3 == 0) { 
	   set $0 = 1.0 + 0.0*$1
	}

	if($3 == 1) { 
	   set $0 = -1.0*$1
	}

	if($3 == 2) { 
	  #set $0 = 0.4343*(10.0**$1)/($3*$3)
	   set $0 = 0.4343*(10.0**$1)/($2[2]*$2[2])
	}

##-------------------------------------------------------------------------------
## exit_new_pl_cutoff
exit_new_pl_cutoff

	set ydum = $testfunc(xdum,parvec)
	set xdum = xdum*$xs + $x0

	set parvec[0] = 10.0**$(parvec[0])
	set parvec[2] = parvec[2]*10.0**$x0

	define var0 $(parvec[0])
	define var1 $(parvec[1])
	define var2 $(parvec[2])

	echo "-----------------------------------------------------------------------" 
	echo "*** Model is: POWER LAW + EXPONENTIAL CUTOFF (for LOG-LOG data) *** "
	echo "  "
	echo "  - Normalization (linear value)   :" $(parvec[0])
	echo "  - Power Law Photon Index [Gamma] :" $(parvec[1])
	echo "  - Cutoff Energy (linear value)   :" $(parvec[2])
	echo "-------------------------------------------------------------" 
	echo " Chi^2 =" $_newchi "/"$($npts-$nterms) ($($_newchi/($($npts-$nterms))))
	echo "-------------------------------------------------------------" 

################################################################################
##-------------------------------------------------------------------------------
# init_pl_superexp
init_pl_superexp

	echo "-----------------------------------------------------------------------------" 
	echo "*** Model is: POWER LAW + MODIFIED EXPONENTIAL CUTOFF (for LOG-LOG data) *** "
	echo "    Give initial guess for parameters: "
	define var0 ? < Normalization (linear value) : >
	define var1 ? < Power Law Photon Index       : > 
	define var2 ? < Cutoff Energy (linear value) : >
	define var3 ? < Superexp. coefficient        : >
	
	define var0 (lg($var0))
	# define var1 (lg(var1))
	# define var2 (lg(var2/$xs))
	define var2 (lg($var2) - $x0)
	#define var2 ($var2/10.0**$x0)

	set parvec = < $var0 $var1 $var2 $var3 >

	define cx_alpha (2.0)
	
##-------------------------------------------------------------------------------
## pl_superexp 2  f(x,a)
pl_superexp 2

        set $0 =  $2[0] - $2[1]*$1 - 0.4343*($cx_alpha/$2[3])*10.0**(($1 - $2[2])*$2[3])

##---------------------------------------------------------------------------
## der_pl_superexp 3   : df(x,a,j)
der_pl_superexp 3

	echo ' $3 = '$3
	if($3 == 0) { 
	   set $0 = 1.0 + 0*$1
	}

	if($3 == 1) { 
	   set $0 = -1.0*$1
	}

	if($3 == 2) { 
	   set $0 = $cx_alpha*10.0**(($1 - $2[2])*$2[3])
	}

	if($3 == 3) { 
	   set $0 = ($cx_alpha/$2[3])*10.0**(($1 - $2[2])*$2[3])*( 0.4343/$2[3] - ($1 - $2[2]) )
	}

##-------------------------------------------------------------------------------
## exit_pl_superexp
exit_pl_superexp

	set ydum = $testfunc(xdum,parvec)
	set xdum = xdum*$xs + $x0

	set parvec[0] = 10.0**$(parvec[0])
	set parvec[2] = parvec[2]*10.0**$x0

	define var0 $(parvec[0])
	define var1 $(parvec[1])
	define var2 $(parvec[2])
	define var3 $(parvec[3])

	echo "-----------------------------------------------------------------------------" 
	echo "*** Model is: POWER LAW + MODIFIED EXPONENTIAL CUTOFF (for LOG-LOG data) *** "
	echo "  "
	echo "  - Normalization (linear value) : " $(parvec[0])
	echo "  - Power Law Photon Index [p]   : " $(parvec[1])
	echo "  - Cutoff Energy (linear value) : " $(parvec[2])
	echo "  - Superexp. coefficient        : " $(parvec[3])
	echo "-------------------------------------------------------------" 
	echo " Chi^2 =" $_newchi "/"$($npts-$nterms) ($($_newchi/($($npts-$nterms))))
	echo "-------------------------------------------------------------" 

################################################################################
##-------------------------------------------------------------------------------
# init_ff_linear
init_ff_linear

	echo "-----------------------------------------------------------------------" 
	echo "*** Model is: LINEAR (e.g. Power Law for LOG-LOG data) *** "
	echo "    Give initial guess for parameters: "
	define var0 ? < Normalization   : >
	define var1 ? < Slope           : >

	echo " a = "$var0
	echo " b = "$var1
	
	# define var0 (lg($var0))
	# define var1 (lg(var1))
	# define var2 (lg(var2/$xs))

	set parvec = < $var0 $var1 >
	
##-------------------------------------------------------------------------------
## ff_linear 2  f(x,a)
ff_linear 2

        set $0 =  $2[0] + $2[1]*$1 

##---------------------------------------------------------------------------
## der_ff_linear 3   : df(x,a,j)
der_ff_linear 3

	if($3 == 0) { 
	   set $0 = 1
	}

	if($3 == 1) { 
	   set $0 = $1
	}

##-------------------------------------------------------------------------------
## exit_ff_linear
exit_ff_linear

	# set parvec = 10.**parvec
	# set parvec[2] = parvec[2]*$xs
	# set parvec[0] = 10.0**$(parvec[0])

	define var0 $(parvec[0])
	define var1 $(parvec[1])

	echo "-----------------------------------------------------------------------" 
	echo "*** Model is: LINEAR (e.g. Power Law for LOG-LOG data) *** "
	echo "  "
	echo "  - Normalization                  :" $(parvec[0])
	echo "  - Slope                          :" $(parvec[1])
	echo "-------------------------------------------------------------" 
	echo " Chi^2 =" $_newchi "/"$($npts-$nterms) ($($_newchi/($($npts-$nterms))))
	echo "-------------------------------------------------------------" 

	set ydum = $testfunc(xdum,_a)
	set xdum = xdum*$xs + $x0
	#set xdum = xdum*$xs + $fit_x0

################################################################################
##-------------------------------------------------------------------------------
# init_poly_3rd
init_poly_3rd

	echo "-----------------------------------------------------------------------" 
	echo "*** Model is: THIRD DEGREE POLYNOMIAL *** "
	echo "    Give initial guess for parameters: "
	define var0 ? < Normalization   : >
	define var1 ? < Slope           : >

	echo " a = "$var0
	echo " b = "$var1
	
	# define var0 (lg($var0))
	# define var1 (lg(var1))
	# define var2 (lg(var2/$xs))

	set parvec = < $var0 $var1 >
	
##-------------------------------------------------------------------------------
## poly_3rd 2  f(x,a)
poly_3rd 2

        set $0 =  $2[0] + $2[1]*$1 

##---------------------------------------------------------------------------
## der_poly_3rd 3   : df(x,a,j)
der_poly_3rd 3

	if($3 == 0) { 
	   set $0 = 1
	}

	if($3 == 1) { 
	   set $0 = $1
	}

##-------------------------------------------------------------------------------
## exit_poly_3rd
exit_poly_3rd

	# set parvec = 10.**parvec
	# set parvec[2] = parvec[2]*$xs
	# set parvec[0] = 10.0**$(parvec[0])

	define var0 $(parvec[0])
	define var1 $(parvec[1])

	echo "-----------------------------------------------------------------------" 
	echo "*** Model is: LINEAR (e.g. Power Law for LOG-LOG data) *** "
	echo "  "
	echo "  - Normalization                  :" $(parvec[0])
	echo "  - Slope                          :" $(parvec[1])
	echo "-------------------------------------------------------------" 
	echo " Chi^2 =" $_newchi "/"$($npts-$nterms) ($($_newchi/($($npts-$nterms))))
	echo "-------------------------------------------------------------" 

	set ydum = $testfunc(xdum,_a)
	set xdum = xdum*$xs + $x0
	#set xdum = xdum*$xs + $fit_x0

###############################################################################
##-------------------------------------------------------------------------------
# init_cons_pl
init_cons_pl

	echo "*** Model is: CONSTANT + PowerLaw (for LIN-LIN data) *** "
	echo "    Give initial guess for parameters: "
	define var0  ? <          Constant Baseline  :>
	define var1  ? <          Y value    [@x=$x0]:> 
	define var2  ? <          PowerLaw Exponent  :>

	set parvec = < $var0 $var1 $var2 >

	# convert the time vector back to actual values
	#
	## set pass_x = $xs*pass_x + $x0

	## set xdum = $xstart,$(pass_x[$(dimen(pass_x)-1)]*1.05),$xstep
	## set xdum = (xdum - $x0)/$xs

	# set xdum   = $(pass_x[0]),$(pass_x[$(dimen(pass_x)-1)]+5000),500
	# set pass_x = pass_x/$x0
	# set xdum   = xdum/$x0

##---------------------------------------------------------------------------
## exit_cons_pl
exit_cons_pl

	echo "------------------------------------------------------------- "
	echo "*** Model is: CONSTANT + PowerLaw (for LIN-LIN data) *** "
	echo "  "
	echo "  - Constant Baseline :" $(parvec[0])
	echo "  - Y value           :" $(parvec[1]) [@x=$x0]
	echo "  - PowerLaw Exponent :" $(parvec[2])
	echo "------------------------------------------------------------- "
	echo " Chi^2 =" $_newchi /$($npts-$nterms) ($($_newchi/($($npts-$nterms))))
	echo "------------------------------------------------------------- "

	set ydum = $testfunc(xdum,_a)
	set xdum = xdum*$xs + $x0

##---------------------------------------------------------------------------
## cons_pl 2       : f(x,a)
cons_pl 2

	set $0 =  $2[0] + $2[1]*$1**$2[2]

##---------------------------------------------------------------------------
## der_cons_pl 3   : df(x,a,j)
der_cons_pl 3

	if($3 == 0) { 
	   set $0 = 1 + 0*$1
	}

	if($3 == 1) { 
	   set $0 = $1**$2[2]
	}

	if($3 == 2) { 
	   set $0 = $2[1]*ln($1)*($1**$2[2])
	}

###############################################################################
#************************************************************************
#** WARNING 
#**   myload macro 'matrix' before to proceed.                         **
#**   It is needed to load the macros necessary for matrix handling    **
#**                                                                    ** 
#************************************************************************
