#---------------------------------------------------------------------------
# somma 25 : 
#          : adds two light curves, provided that they have the same time axis
somma 25

	set rate = 0*rate_$1
	set err2 = 0*rate_$1

	define n (0)

	do i=1,5 {
	   if($?$i) {
	      define n ($n+1)
	      echo * $$i
	      set rate = rate + rate_$$i
	      set err2 = err2 + err_rate_$$i**2
	}
	}

	echo * tot number : $n

	define 6 ? < Suffix of new vector : >
	set rate_$6     = rate
	# set err_rate_$6 = sqrt(err2)/$n
	set err_rate_$6 = sqrt(err2)              # non divido perche` non e` 
	set newt_$6     = newt_$1                 # la media, ma la somma

	set clean_newt_$6     = newt_$6     if(rate_$6 > 0)
	set clean_rate_$6     = rate_$6     if(rate_$6 > 0)
	set clean_err_rate_$6 = err_rate_$6 if(rate_$6 > 0)

	stats  clean_rate_$6                   mean_$6  width_$6  kurt_$6
	# stats2 clean_rate_$6 clean_err_rate_$6 mean2_$6 width2_$6 kurt2_$6
	stats2 clean_rate_$6 (1/clean_err_rate_$6**2) mean2_$6 width2_$6 kurt2_$6

	echo -----------------------------------------------------------------
	echo * Average cts/sec = $mean_$6    $mean2_$6
	echo * sigma           = $width_$6   $width2_$6
	echo * kurtosis        = $kurt_$6    $kurt2_$6

	echo -----------------------------------------------------------------
	echo * ha prodotto una serie di vettori/variabili del tipo *_$6
	echo -----------------------------------------------------------------

#---------------------------------------------------------------------------
# dividi 
#          : divides two light curves (1:2),
#            provided that they have the same time axis
dividi

	define 1 ? { Suffix of vector 1 : }
	define 2 ? { Suffix of vector 2 : }
 
	set rate       = rate_$1/rate_$2
	set err_rel_1  = err_rate_$1/rate_$1
	set err_rel_2  = err_rate_$2/rate_$2
	set err        = rate*sqrt(err_rel_1**2 + err_rel_2**2)

	define 6 ? {Suffix of new vector ?}
	set rate_$6     = rate
	set err_rate_$6 = err
	set newt_$6     = newt_$1      

	set clean_newt_$6     = newt_$6     if(rate_$6 > 0)
	set clean_rate_$6     = rate_$6     if(rate_$6 > 0)
	set clean_err_rate_$6 = err_rate_$6 if(rate_$6 > 0)

	stats  clean_rate_$6                   mean_$6  width_$6  kurt_$6
	# stats2 clean_rate_$6 clean_err_rate_$6 mean2_$6 width2_$6 kurt2_$6
	stats2 clean_rate_$6 (1/clean_err_rate_$6**2) mean2_$6 width2_$6 kurt2_$6

	echo -----------------------------------------------------------------
	echo * Average cts/sec = $mean_$6    $mean2_$6
	echo * sigma           = $width_$6   $width2_$6
	echo * kurtosis        = $kurt_$6    $kurt2_$6

	echo -----------------------------------------------------------------
	echo * ha prodotto una serie di vettori/variabili del tipo *_$6
	echo -----------------------------------------------------------------

#---------------------------------------------------------------------------
# radial 
radial

	data radial_profile.dat
	read { r 1 c 2 }

	set err_c = sqrt(c)

	set dimen(rad)  = $(dimen(r)-1)
	set dimen(prof) = $(dimen(r)-1)
	set dimen(area) = $(dimen(r)-1)
	set dimen(dens) = $(dimen(r)-1)
	set dimen(err_prof) = $(dimen(r)-1)
	set dimen(err_dens) = $(dimen(r)-1)

	do 1=0,$(dimen(prof)-1) {
	   set rad[$1]  = (r[$($1+1)] + r[$1])/2
	   set prof[$1] = c[$($1+1)] - c[$1]
	   set area[$1] = 3.1415926*(r[$($1+1)]**2 - r[$1]**2)
	   set dens[$1] = prof[$1]/area[$1]
	   set err_prof[$1] = sqrt(err_c[$($1+1)]**2 + err_c[$1]**2)
	   set err_dens[$1] = err_prof[$1]/area[$1] 
	}

#---------------------------------------------------------------------------
