#---------------------------------------------------------------------------
# fabrizio:  PURA relazione usata da Fabrizio nel paper
#            Senza esponente 'fold'
#            Calcolata sul range 8 < log(nu) < 20
fabrizio

    	echo "-----------------------------------------------"
    	echo " PURA relazione usata da Fabrizio nel paper"
    	echo " Senza esponente 'fold'"
    	echo " Calcolata sul range 8 < log(nu) < 20"
    	echo "-----------------------------------------------"

	reset_graph
	location 6000 29000 7000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5

	define a1inf ? { Alpha1 ?}
	define a2inf ? { Alpha2 ?}
	define xb ? { break ? [log Hz] }

	set lg_e = 8,20,0.1
	set lg_f = -$a1inf*lg_e + ($a1inf - $a2inf)*lg(1 + exp(2.302*(lg_e - $xb)))

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1] = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1] = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	limits 7.5 20.5 lg_f 
	expand 1.5
	ticksize 0 0 0 0 
	ctype 2 
	lweight 1.5
	box 1 2 0 3

	lweight 2 

	ctype 5 
	connect lg_e lg_f

	limits 7.5 20.5 aa
	ctype 2
	lweight 1.5
	box 1 3 0 2 
	ctype 3
	connect lg_e aa

	ctype 2
	relocate $xb -10
	ltype 2 
	draw $xb 10
	ltype 0


#---------------------------------------------------------------------------
# fabrizio2: PURA relazione usata da Fabrizio nel paper
#            Senza esponente di 'fold'
#            Calcolata sul range -2 < log(nu) < 2
fabrizio2

    	echo "-----------------------------------------------"
	echo " PURA relazione usata da Fabrizio nel paper"
	echo " Senza esponente di 'fold'"
	echo " Calcolata sul range -2 < log(nu) < 2"
    	echo "-----------------------------------------------"

	reset_graph
	location 6000 29000 7000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5

	define a1inf      ? { Alpha1 ?}
	define a2inf      ? { Alpha2 ?}
	define e_break ? { break ? [keV] }

	define xb (lg($e_break))

	set lg_e=-2,2.1,0.01
	set dum = 2.302*(lg_e - $xb)

	set lg_f = -$a1inf*lg_e + ($a1inf - $a2inf)*lg(1 + exp(dum))

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1] = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1] = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	set aprev = ($a1inf + $a2inf*exp(dum))/(1+exp(dum))

	limits lg_e lg_f 
	expand 1.5
	ticksize -1 0 0 0 
	ctype 2 
	lweight 1.5
	box 1 2 0 3

	lweight 2 

	ctype 5 
	connect lg_e lg_f

	limits lg_e 0.9 3.1
	ctype 2
	lweight 1.5
	box 1 3 0 2 
	ctype 3
	connect lg_e aa

	ltype 2 
	ctype 2
	relocate $xb -10
	draw $xb 10
	ctype 4 
	relocate -10 $(($a1inf+$a2inf)/2.)
	draw      10 $(($a1inf+$a2inf)/2.)
	ltype 0


#---------------------------------------------------------------------------
# fabrizio3: relazione usata da Fabrizio nel paper
#            CON aggiunto un esponente di 'fold'
#            Calcolata sul range -2 < log(nu) < 2
fabrizio3

    	echo "-----------------------------------------------"
	echo " PURA relazione usata da Fabrizio nel paper"
	echo " CON aggiunto un esponente di 'fold' "
	echo " Calcolata sul range -2 < log(nu) < 2"
    	echo "-----------------------------------------------"

	reset_graph
	location 6000 29000 7000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5

	define a1inf      ? { Alpha1 ?}
	define a2inf      ? { Alpha2 ?}
	define e_break ? { break ? [keV] }
	define fold    ? { Scale-length for "folding" ? }

	define xb (lg($e_break))

	set lg_e=-2,2.1,0.01
	set dum = 2.302*(lg_e - $xb)*$fold

	set lg_f = -$a1inf*lg_e + ($a1inf - $a2inf)*lg(1 + exp(dum))/$fold

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1] = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1] = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	# set aprev = ($a1inf + $a2inf*exp(dum))/(1+exp(dum))

	limits lg_e lg_f 
	expand 1.5
	ticksize -1 0 0 0 
	ctype 2 
	lweight 1.5
	box 1 2 0 3

	lweight 2 

	ctype 6 
	connect lg_e lg_f

	limits lg_e 0.9 3.1
	ctype 2
	lweight 1.5
	box 1 3 0 2 
	ctype 7
	connect lg_e aa

	ltype 2 
	ctype 2
	relocate $xb -10
	draw $xb 10
	ctype 4 
	relocate -10 $(($a1inf+$a2inf)/2.)
	draw      10 $(($a1inf+$a2inf)/2.)
	ltype 0


#---------------------------------------------------------------------------
# plot_curved_model  just calls the proper curved model routine
plot_curved_model 101

	fabrizio4 $1

#---------------------------------------------------------------------------
# fabrizio4 e1=0.1 e2=30 a1=0.6 a2=3.0 e_break=2.0 fold=1.0
#
#    Curved spectral shape from 2000 Mrk421 paper.
#    It's the same as implemented in XSPEC (with fold and @E_ref spectral indices.)
#    It is computed over the range -2 < log(nu) < 2
fabrizio4 101

        if($?1) {
            if(substr('$1',0,2) == '-h' ){
    	       echo "-----------------------------------------------"
	       echo " Curved spectral shape from 2000 Mrk421 paper. "
	       echo " It's the same as implemented in XSPEC (with fold and @E_ref spectral indices.) "
	       echo " It is computed over the range -2 < log(nu) < 2 "
    	       echo "-----------------------------------------------"
               echo " compute_curved_nfn: "
               echo " "
               echo " USAGE: "
               echo "    > fabrizio4 e1=0.1 e2=30 a1=0.6 a2=3.0 e_break=2.0 fold=1.0 "
               echo "  or"
               echo "    > fabrizio4 (in this case it prompts for all parameters)"
               echo " "
               return
            } else {
	       define silentparsing 1
               mparsep $1 
	       define silentparsing 0
            }
        } else {

	    define e1      ? {      E_ref_1 [keV] : }
	    define e2      ? {      E_ref_2 [keV] : }
	    define a1      ? {    Alpha @ E_ref_1 : }
	    define a2      ? {    Alpha @ E_ref_2 : }
	    define e_break ? {        break [keV] : }
	    define fold    ? { "folding" exponent : }

	}

	# little messy here.
	define g1 $a1
	define g2 $a2
	######

	reset_graph
	location 6000 29000 7000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5

	echo "*** Which representation : "
	#echo "  [1] Gamma  "
	#echo "  [2] Alpha"
	echo "  [3] Fnu"
	echo "  [4] nu_Fnu"
	define repre   ? {  Your choice ? }
	
	define xb (lg($e_break))
	define x1 (lg($e1))
	define x2 (lg($e2))

	define dum1 ( exp(2.302*($x1 - $xb)*$fold) )
	define dum2 ( exp(2.302*($x2 - $xb)*$fold) )

	define a1inf  ( ($g1*$dum2*(1+$dum1)-$g2*$dum1*(1+$dum2))/($dum2-$dum1) ) 
	define a2inf  ( ($g2*(1+$dum2)-$g1*(1+$dum1))/($dum2-$dum1) ) 

	define ha1inf ( ($g1*$dum2*(1+$dum1)-$g2*$dum1*(1+$dum2))/($dum2-$dum1) ) 
	define ha2inf ( ($g2*(1+$dum2)*(1+$dum1*(1-$fold)) - $g1*(1+$dum1)*(1+$dum2*(1-$fold)))/(($dum2-$dum1)*$fold) ) 

	define normdum   ( -2.302585093*$xb*$fold )
	define normdumf  ( ($a1inf  - $a2inf )*lg(1. + exp($normdum))/$fold )
	define hnormdumf ( ($ha1inf - $ha2inf)*lg(1. + exp($normdum)) )

	echo "-------------------------"
	echo "Norm(s)"
	echo " Fn  = "$normdumf
	echo " nFn = "$hnormdumf

	echo "-------------------------"
	echo "* alpha @ -ifnty = "$a1inf
	echo "* alpha @ +infty = "$a2inf
	# echo --- corretti ------------
	# echo * alpha @ -ifnty = $ha1inf
	# echo * alpha @ +infty = $ha2inf

	#
	#  recomputing back the spectral indices at the E_ref.
	#
	define t1 ( (1 - $dum1/(1+$dum1))*$a1inf + ($dum1/(1+$dum1))*$a2inf )
	define t2 ( (1 - $dum2/(1+$dum2))*$a1inf + ($dum2/(1+$dum2))*$a2inf )

	define ht1 ( (1 - $fold*$dum1/(1+$dum1))*$ha1inf + ($fold*$dum1/(1+$dum1))*$ha2inf )
	define ht2 ( (1 - $fold*$dum2/(1+$dum2))*$ha1inf + ($fold*$dum2/(1+$dum2))*$ha2inf )

	echo "-------------------------"
	echo " Asymptotic spectral indices "
	echo "* alpha @ +infty = "$( (1-$fold)*$ha1inf + $fold*$ha2inf )  
	echo "-------------------------"
	echo " Spectral indices at E_Ref (recomputed for consistency check)"
	echo " "
	echo "* alpha (@E_Ref1) = "$ht1
	echo "* alpha (@E_Ref2) = "$ht2
	echo "-------------------------"

	# defines energy array
	#
	define lg_e_step (0.001)
	set lg_e=-4.0,4.0,$lg_e_step
	set dum = 2.302585*(lg_e - $xb)*$fold

	set lg_f = -$a1inf*lg_e + ($a1inf - $a2inf)*lg(1 + exp(dum))/$fold
	set lg_f = lg_f  # - $normdumf

	set hlg_f = -$ha1inf*lg_e + ($ha1inf - $ha2inf)*lg(1 + exp(dum))
	set hlg_f = hlg_f # - $hnormdumf

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)
	set dimen(haa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1]  = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1]  = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	  set haa[$1] = (hlg_f[$1]-hlg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	# set aprev = ($a1inf + $a2inf*exp(dum))/(1+exp(dum))

	#-----------------------------------------------------------
	# plots spectrum 
	#
	## limits lg_e lg_f 

	echo "-------------------------------"
	define emin ? { E_min [keV] :}
	define emax ? { E_max [keV] :}
	echo "-------------------------------"
	define ymin ? { Ymin [log] :}
	define ymax ? { Ymax [log] :}
	echo "-------------------------------"

	define xmin (lg($emin))
	define xmax (lg($emax))

	# if ($repre == 3) { limits -1.1 1.1 -4 3 }
	# if ($repre == 4) { limits $xmin $xmax $ymin $ymax }
	limits $xmin $xmax $ymin $ymax 
	expand 1.5
	ticksize -1 0 0 0 
	ctype 2 
	lweight 2.5
	box 1 2 0 3
	xlabel E [keV]
	ylabel Flux

	lweight 2.5 

	define color ? { Color ? [#] }

	ctype 6 
	ctype $color
	if ($repre == 3) { connect lg_e lg_f }
	if ($repre == 3) { connect lg_e hlg_f }
	if ($repre == 4) { connect lg_e (lg_e+lg_f) }
	if ($repre == 4) { connect lg_e (lg_e+hlg_f) }

	# 
	# additionally plots spectral index
	#
	if($repre == 1) { limits lg_e  0.9 3.1 }
	if($repre == 2) { limits lg_e -0.1 2.1 }
	if($repre == 3) { limits lg_e -1.1 1.1 }

	realgsave

	limits $xmin $xmax 0 3.5
	ctype 2
	lweight 2.5
	box 1 3 0 2 
	lweight 1.5

	ctype 7
	connect xx  aa

	ctype 6
	connect xx  (haa-0.01)

	#--------------------
	## define xp $($xb*(($a1inf-1)/(1-$a2inf))**(1./$fold))
	define xp $($xb + lg(($a1inf-1)/(1-$a2inf))/$fold )

	echo "* E_peak = "$(10**$xp)
	ltype 2 
	ctype 2
	relocate $xp -10
	draw     $xp 10
	ptype 3 3 
	relocate $xp 1 dot
	relocate $xb -10
	draw     $xb 10
	relocate ($(($gx2-$gx1)*($xb-$fx1)/($fx2-$fx1)+$gx1+100) $($gy1 + 1500) )
	putlabel 6 E_{break}

	ctype 4 
	# relocate -10 $(($a1inf+$a2inf)/2.) draw  10 $(($a1inf+$a2inf)/2.)
	relocate -10 $g2             draw  10 $g2
	relocate -10 $g1             draw  10 $g1
	relocate $x1 -10             draw  $x1 10
	relocate $x2 -10             draw  $x2 10
	ltype 0

	realgrestore

#---------------------------------------------------------------------------
# fabrizio4_implicit: relazione usata da Fabrizio nel paper
#                     CON aggiunto un esponente di 'fold'
#                     CON cambiata la forma dell'INPUT
#                     E` come quella implementata in XSPEC
#                     Calcolata sul range -2 < log(nu) < 2
#                     Accetta parametri on-line 
#                     e plotta solo nu_F_nu con limiti prefissati
fabrizio4_implicit 07

    	echo "-----------------------------------------------"
	echo " relazione usata da Fabrizio nel paper"
	echo " CON aggiunto un esponente di 'fold'"
	echo " CON cambiata la forma dell'INPUT"
	echo " E' come quella implementata in XSPEC"
	echo " Calcolata sul range -2 < log(nu) < 2"
    	echo "-----------------------------------------------"

	reset_graph
	location 6000 29000 7000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5

	if($?1 == 0) {
	  define e1      ? { E_ref_1 [keV] ?}
	  define e2      ? { E_ref_2 [keV] ?}
	  define g1      ? { Alpha @ E_ref_1 ?}
	  define g2      ? { Alpha @ E_ref_2 ?}
	  define e_break ? { break ? [keV] }
	  define fold    ? { Scale-length for "folding" ? }
	  define $1  e1     
	  define $2  e2     
	  define $3  g1     
	  define $4  g2     
	  define $5  e_break
	  define $6  fold   
	}
	
	define e1      $1
	define e2      $2
	define g1      $3 
	define g2      $4
	define e_break $5
	define fold    $6

	define xb (lg($e_break))
	define x1 (lg($e1))
	define x2 (lg($e2))

	#--- cominciano i conti ---

	define dum1 ( exp(2.302*($x1 - $xb)*$fold) )
	define dum2 ( exp(2.302*($x2 - $xb)*$fold) )

	define a1inf ( ($g1*$dum2*(1+$dum1)-$g2*$dum1*(1+$dum2))/($dum2-$dum1) ) 
	define a2inf ( ($g2*(1+$dum2)-$g1*(1+$dum1))/($dum2-$dum1) ) 

	define normdum   ( -2.302585093*$xb*$fold )
	define normdumf  ( ($a1inf - $a2inf)*lg(1. + exp($normdum))/$fold )

	echo "-------------------------"
	echo "* alpha @ -ifnty = "$a1inf
	echo "* alpha @ +infty = "$a2inf

	#
	#  ri-calcolo "indietro" i valori alle energie di riferimento
	#
	define t1 ( (1 - $dum1/(1+$dum1))*$a1inf + ($dum1/(1+$dum1))*$a2inf )
	define t2 ( (1 - $dum2/(1+$dum2))*$a1inf + ($dum2/(1+$dum2))*$a2inf )

	echo "-------------------------"
	echo "* alpha @ +infty = "$( (1-$fold)*$ha1inf + $fold*$ha2inf )  
	echo "-------------------------"
	echo "Indici spettrali alle E_Ref"
	echo " "
	echo "* alpha (@E_Ref1) = "$ht1
	echo "* alpha (@E_Ref2) = "$ht2
	echo "-------------------------"

	set lg_e=-2,2.1,0.04
	set dum = 2.302585*(lg_e - $xb)*$fold

	set lg_f = -$a1inf*lg_e + ($a1inf - $a2inf)*lg(1 + exp(dum))/$fold
	set lg_f = lg_f - $normdumf

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1]  = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1]  = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	#
	# plots spectrum 
	#

	define emin   0.08
	define emax9  12
	define ymin  -1.1
	define ymax   1.1
	define xmin (lg($emin))
	define xmax (lg($emax))

	define ymin  -2
	define ymax   2
	define xmin  -2
	define xmax   2

	limits $xmin $xmax $ymin $ymax 
	expand 1.5
	ticksize -1 0 0 0 
	ctype 2 
	lweight 1.5
	box 1 2 0 3
	xlabel E [keV]
	ylabel Flux

	lweight 2 

	if($?7 == 0) {
	  define color ? { Color ? [#] }
	  define 7 $color 
	}
	define color $7

	ctype $color
	connect lg_e (lg_e+lg_f)

	limits $xmin $xmax 0 3 
	ctype 2
	lweight 1.5
	box 1 3 0 2 

	ctype 7
	connect xx  aa

	#--------------------
	ltype 2 
	ctype 2
	relocate $xb -10
	draw $xb 10
	relocate ($(($gx2-$gx1)*($xb-$fx1)/($fx2-$fx1)+$gx1+100) $($gy1 + 1500) )
	putlabel 6 E_{break}

	ctype 4 
	relocate -10 $(($a1inf+$a2inf)/2.) draw  10 $(($a1inf+$a2inf)/2.)
	relocate -10 $g2             draw  10 $g2
	relocate -10 $g1             draw  10 $g1
	relocate $x1 -10             draw  $x1 10
	relocate $x2 -10             draw  $x2 10
	ltype 0


#---------------------------------------------------------------------------
# matt  this is the one used for the Figure of the Paper
#       drawing also the real data points.
matt	
	location 5500 28500 6500 30000
	window 1 1 1 1

	ctype 2
	lweight 3
	expand 1.5
	ltype 0

	define e_break ? {E_break [keV] ?}
	define a1      ? {alpha_1 ?}
	define a2      ? {alpha_2 ?}
	define beta    ? {Beta ?}

	set lg_e=-2,2.1,0.01
	define lg_e_break (lg($e_break))

	set erat=10.**(lg_e - $lg_e_break)
	set lg_fac=$beta*lg(1-exp(-erat))
	set a3 = (10.**lg_fac)*$a2 + (1. - 10.**lg_fac)*$a1

	set lg_f = -a3*lg_e # + lg(2.)

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1] = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1] = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}
	set erat_bis   = 10.**(xx - $lg_e_break)
	set lg_fac_bis = $beta*lg(1-exp(-erat_bis))
	set a3_bis = (10.**lg_fac_bis)*$a2 + (1. - 10.**lg_fac_bis)*$a1

	set a4 = -($a2-$a1)*erat*exp(-erat)

	define col_bw ? { B/W or Color ? [1/2] }

	ticksize -1 0 0 0 

	limits lg_e lg_f 
	ctype 2 
	box 1 2 0 3
	xlabel Energy [keV]
	ylabel log F(E)

	connect lg_e lg_f

	limits lg_e aa
	box 1 3 0 2 
	relocate ( $($gx2 + 2500) $(($gy1+$gy2)/2) )
	angle 90
	putlabel 2 Spectral Index
	angle 0

	if( $col_bw == 2 ) {
	   ctype 3
	   connect lg_e a3
	   ctype 5
   	   connect xx aa
	} else {
	   ltype 4 
	   connect lg_e a3
	   ltype 3
	   connect xx aa
	}

	ctype 2
	ltype 1
	relocate -1 -10 
	draw     -1  10
	relocate 0 -10 
	draw     0  10
	relocate 1 -10 
	draw     1  10
	relocate $lg_e_break -10 
	draw     $lg_e_break  10
	ltype 0

	relocate ( $gx1 $($gy2 + 1000) )
	putlabel 6 \alpha_1=$a1,  \alpha_2=$a2,  E_0=$e_break keV,  \beta=$beta

	set da = aa - a3_bis
	vecminmax da da1 da2
	sort < da xx >
	vecminmax aa t1 t2
	echo -----------------------------------------------------------------
	echo Min. \alpha Deviation: $(da[0]) at E=$(10.**xx[0])
	echo Max. \alpha Deviation: $(da[$(dimen(xx)-1)]) at E=$(10.**xx[$(dimen(xx)-1)])
	echo -----------------------------------------------------------------
	echo Max. and Min. of TRUE \alpha = $t1 $t2 [$($t2-$t1)]
	echo -----------------------------------------------------------------

	ctype 2 
	expand 4.0
	ptype 4 0
	lweight 4
	relocate $(lg(10.)) 1.73 dot
	relocate $(lg(5.)) 1.64 dot
	relocate $(lg(1.)) 0.95 dot
	relocate $(lg(.5)) 0.78 dot
	lweight 2
	expand 2.0
	ctype 2 

#---------------------------------------------------------------------------
# matt2
matt2	

	location 6000 29000 7000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5

	define e_break ? {E_break [keV] ?}
	define a1      ? {alpha_1 ?}
	define a2      ? {alpha_2 ?}
	define beta    ? {Beta ?}

	set lg_e=-2,2.1,0.01
	define lg_e_break (lg($e_break))

	set erat=10.**(lg_e - $lg_e_break)
	set lg_fac=$beta*lg(1-exp(-erat))

	set a3   = (10.**lg_fac)*$a2 + (1. - 10.**lg_fac)*$a1

	set lg_e = lg_e - $lg_e_break
	set lg_f = -a3*lg_e

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1] = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1] = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	set a4 = -($a2-$a1)*erat*exp(-erat)

	ticksize -1 0 0 0 

	limits lg_e lg_f 
	ctype 2 
	box 1 2 0 3
	connect lg_e lg_f

	limits lg_e aa
	box 1 3 0 2 
	ctype 3
	connect lg_e a3
	ctype 5
	connect xx aa

	ctype 2

#---------------------------------------------------------------------------
# matt3
matt3
	location 6000 29000 7000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5

	define e_break ? {E_break [keV] ?}
	define a1     ? {alpha_1 ?}
	define a2     ? {alpha_2 ?}

	set lg_e=-2,2.1,0.01
	define lg_e_break (lg($e_break))

	set erat=10.**(lg_e - $lg_e_break)
	set fac=1./(1+erat**2.)

	set a3 = (1.-fac)*$a2 + fac*$a1
	set lg_f = -a3*lg_e + lg(2.)

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1] = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1] = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	ticksize -1 0 0 0 

	limits lg_e lg_f 
	ctype 2 
	box 1 2 0 3
	connect lg_e lg_f

	limits lg_e aa
	box 1 3 0 2 
	ctype 3
	connect lg_e a3
	ctype 5
	connect xx aa

	ctype 2
	ltype 2
	relocate 0 -10 
	draw     0  10
	ltype 0

#---------------------------------------------------------------------------
