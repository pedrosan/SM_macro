#---------------------------------------------------------------------------
# pca_dtlc_log
pca_dtlc_log


	# if($?t0ref == 0) {
	define t0ref ? {* T_0_ref = } 
	define t0ref ( sprintf('%7.1f',$t0ref) )

	echo ---------------------------------------------
	
	define suffix ?   {*      Suffix of vectors to be loaded : }
	define mulconst ? {* Constant to multiply Data for shift : }

	echo ---------------------------------------------
	define bottomrate ? {* Lower limit to count-rate : }
	if( $bottomrate <= 0 ) {
	   echo CANNOT give a NEGATIVE minimum value...
	   define bottomrate (1.e-4)
	   define bottomrate ? {* Lower limit to count-rate : }
	}
	define toprate    ? {* Upper limit to count-rate : }

	set newt_tmp       = newt_$suffix
	set newt1_tmp      = newt1_$suffix
	set newt2_tmp      = newt2_$suffix
	set newbin_tmp     = newbin_$suffix
	set rate_tmp       = rate_$suffix*$mulconst
	set lg_rate_tmp    = lg(rate_$suffix) + lg($mulconst)
	set cvrfr_tmp      = cvrfr_$suffix      

	# set err_rate_tmp   = err_rate_$suffix*$mulconst

	if( whatis(err_rate_"$!suffix"_u) == 41 ) { 
	   echo -----------------------------------------------------------------
	   echo The dataset - $suffix - has both UP and DOWN errors defined
	   echo -----------------------------------------------------------------
	   set err_rate_tmp_u   = $mulconst*err_rate_"$!suffix"_u
	   set err_rate_tmp_d   = $mulconst*err_rate_"$!suffix"_d
	   define del_ud 0
	} else {
	   echo -----------------------------------------------------------------
	   echo The dataset - $suffix - has only one error vector defined
	   echo -----------------------------------------------------------------
	   set err_rate_tmp_u   = $mulconst*err_rate_$suffix
	   set err_rate_tmp_d   = $mulconst*err_rate_$suffix
	   define del_ud 1
	}

	set err_lg_rate_tmp_u = lg(1 + err_rate_tmp_u/rate_tmp)
	set err_lg_rate_tmp_d = lg(rate_tmp) - lg(rate_tmp - err_rate_tmp_d)

	vecminmax rate_tmp dum    top_$suffix

	echo ---------------------------------------------
	echo * Start Time= $inizio
	echo * Stop Time = $fine
	echo ---------------------------------------------
	define inizio ? {* New Start Time ? }
	define fine   ? {* New Stop Time ? }
	echo ---------------------------------------------

	# define xinizio ( $inizio-0.05*($fine-$inizio) )
	# define xfine   ( $fine+0.05*($fine-$inizio) )
	define xinizio  $inizio
	define xfine    $fine
	define ymin    ( lg($bottomrate) )
	define ymax    ( lg($toprate) )

	echo ---------------------------------------------
	echo * How do you prefer to customize your LOCATION ?
	echo    [1] Long      vertical (i.e. NO   space for labels outside) 
	echo    [2] Short     vertical (i.e. WITH space for labels outside) 
	echo    [3] Short(er) vertical (i.e. WITH space for TOP labels) 
	define whatloc ? {* Your Choice ? }
	# define whatloc 1

	if($whatloc == 1) {
	   window 1 1 1 1
	   location 4500 31500 4500 31000
	}
	if($whatloc == 2) {
	   window 1 1 1 1
	   location 4500 31500 9500 31000
	} 
	if($whatloc == 3) {
	   window 1 1 1 1
	   location 4500 31500 4500 29500
	} 

	echo ---------------------------------------------
	define layout1 ? {* Give me the general Y "windowing" code ? }
	             echo   This is the number of Y-boxes: $layout1
	define layout2 ? {* Give me the "Y-window" code for this box ? }

	window 1 $layout1 1 $(substr('$layout2',0,3))

	ctype 2
	lweight 3
	expand 1.5
	# ticksize 0 0 -0.5 1 
	ticksize 0 0 -1 10 
	if( $t0ref == 0 ) { notation -4 5 -4 4 }
	limits $xinizio $xfine $ymin $ymax 

	if(substr('$layout2',0,1) == '1') {
	   box 1 2 3 0 
	   if( $t0ref == 0 ) { 
	      xlabel Time [MJD] 
	   } else {
	      xlabel Time [s from T_0 = $t0ref (TJD)]
	   }
	} else {

	   if( $layout1 > 0 || substr('$layout2',3,1) == 'l' ) {

	      box 1 2 3 0 
	      if( $t0ref == 0 ) { 
		 xlabel Time [MJD] 
	      } else {
	         xlabel Time [s from T_0 = $t0ref (TJD)]
	      }

	   } else {
	      if(substr('$layout2',0,1) == $(abs($layout1)) || substr('$layout2',2,1) == $(abs($layout1)) ) { 
	         box 0 2 0 0
	      } else {
	         box 0 2 3 0
	      }
	   }
	}
	ticksize 0 0 -5 10 
	box 3 2 3 3 
	
	echo ----------------------------
	echo * Normalize light curve to:
	echo    [0] DON'T normalize
	echo    [1] its MEAN 
	echo    [2] its MAXIMUM
	echo ----------------------------
	define what 0
	define what ? {* your choice [only 0 is implemented] ? }
	if($what > 0) { 
	   echo   Overriding your choice [$what]
	   echo   ....setting back to 0
	   define what 0
	}	

	if($what == 0) { 
	   define factor 1 
	   # ylabel count rate 
	   ylabel count rate [cts/s/PCU]
	}
	lweight 2
	define xerr "n"
	define xerr  ? {* Plot X error bars ? [y/n] }

	ptype 4 3
	# set lg_rate_tmp  = lg_rate_tmp/$factor
	# set err_rate_tmp = err_rate_tmp/$factor
	# set err_rate_tmp_u = err_rate_tmp_u/$factor
	# set err_rate_tmp_d = err_rate_tmp_d/$factor

	echo * Connect neighboring points ? 
	define congiungo ? {  Give number corresponding to LTYPE ? [-1 for NO]} 
	if($congiungo >= 0) {
	   ltype $congiungo
	   do 1=0,$(dimen(lg_rate_tmp)-2) {
	      define 2 $($1+1)
 	      relocate $(newt_tmp[$1]) $(lg_rate_tmp[$1])
	      if( rate_tmp[$1] != 0 && rate_tmp[$2] != 0 ) {
	          draw $(newt_tmp[$2]) $(lg_rate_tmp[$2]) 
	      }
	   }
	}
	ltype 0

	echo *** ----------------------
	echo *** PLOT Options :
	echo    [1] ex-"B/W"    (upper limits symbols implemented)
	echo    [2] Ptype/Ctype (upper limits symbols implemented)
	echo    [3] Ctype/Ctype
	define come ? { Your choice ? }

	set newt_tmp2          = newt_tmp          if( (rate_tmp-err_rate_tmp_d) > 0)
	set rate_tmp2          = rate_tmp          if( (rate_tmp-err_rate_tmp_d) > 0)
	set lg_rate_tmp2       = lg_rate_tmp       if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_rate_tmp2_u    = err_rate_tmp_u    if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_rate_tmp2_d    = err_rate_tmp_d    if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_lg_rate_tmp2_u = err_lg_rate_tmp_u if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_lg_rate_tmp2_d = err_lg_rate_tmp_d if( (rate_tmp-err_rate_tmp_d) > 0)
	set newbin_tmp2        = newbin_tmp        if( (rate_tmp-err_rate_tmp_d) > 0)

	set newt_tmp3          = newt_tmp          if( (rate_tmp-err_rate_tmp_d) <= 0)
	set rate_tmp3          = rate_tmp          if( (rate_tmp-err_rate_tmp_d) <= 0)
	set lg_rate_tmp3       = lg_rate_tmp       if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_rate_tmp3_u    = err_rate_tmp_u    if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_rate_tmp3_d    = err_rate_tmp_d    if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_lg_rate_tmp3_u = err_lg_rate_tmp_u if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_lg_rate_tmp3_d = err_lg_rate_tmp_d if( (rate_tmp-err_rate_tmp_d) <= 0)
	set newbin_tmp3        = newbin_tmp        if( (rate_tmp-err_rate_tmp_d) <= 0)
	define upper {{m -10 0 10 0 m 0 0 0 -2000 -200 -1700 0 -1850 200 -1700 0 -2000 }} 

	if($come == 1) {
	   define pty1 ? { Give the code for PTYPE [#1] : }
	   define cty1 ? { Give the code for CTYPE [#1] : }
	   lweight 3
	   expand 1.5 ctype 2 
	   errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_u 2
	   errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_d 4
	   if(substr('$xerr',0,1) == 'y') { 
	       error_x newt_tmp2 lg_rate_tmp2 (newbin_tmp2/2)
	       # error_x newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))  (newbin_tmp3/2)
	       error_x newt_tmp3 (lg(rate_tmp3))  (newbin_tmp3/2)
	   }
	   expand 1.2 ctype 2 ptype $upper 
	   # points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))
	   points  newt_tmp3 (lg(rate_tmp3))

	   expand 1.8 ctype $cty1 ptype $pty1 3 
	   points  newt_tmp2 lg_rate_tmp2 
	   # points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u)) 
	   points  newt_tmp3 (lg(rate_tmp3)) 
	   expand 2.1 ctype 2 ptype $pty1 0 
	   points  newt_tmp2 lg_rate_tmp2 
	   # points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))  
	   points  newt_tmp3 (lg(rate_tmp3))  
	   lweight 2
	}

	if($come == 2) {
	   define pty ? { Give the code for PTYPE [#1 #2] : }
	   define cty ? { Give the code for CTYPE [#1] : }

	   lweight 3
	   expand 1.5 ctype $cty ptype $pty
	   errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_u 2
	   errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_d 4
	   if(substr('$xerr',0,1) == 'y') { 
	       error_x newt_tmp2 lg_rate_tmp2 (newbin_tmp2/2)
	       error_x newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))  (newbin_tmp3/2)
	   }
	   expand 1.2 ptype $upper
	   points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))

	   expand 1.6 ctype $cty ptype $pty
	   points  newt_tmp2 lg_rate_tmp2 
	   points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))
	   lweight 2
	}

	if($come == 3) {
	   echo -----------------------------------------
	   define cty1 ? { Give the code for CTYPE [border] : }
	   define cty2 ? { Give the code for CTYPE [inside] : }
	   echo -----------------------------------------

	   expand 1.5 ctype $cty
	   errorbar  newt_tmp lg_rate_tmp err_lg_rate_tmp_u 2
	   errorbar  newt_tmp lg_rate_tmp err_lg_rate_tmp_d 4
	   if(substr('$xerr',0,1) == 'y') { 
	       error_x newt_tmp lg_rate_tmp (newbin_tmp/2)
	   }
	   expand 2.0 ctype $cty1 ptype 20 3 
	   points  newt_tmp lg_rate_tmp 

	   expand 1.5 ctype $cty2 ptype 20 3 
	   points  newt_tmp lg_rate_tmp 

	   lweight 1.5
	   expand 1.7 ctype $cty1 ptype 20 0 
	   points  newt_tmp lg_rate_tmp 
	}

	define plotgr "n"
	define plotgr ? {* Plot GRID ? [y/n] }
	if(substr('$plotgr',0,1) == 'y') {
	   define oldlwe $lweight
	   echo OLDLWEIGHT : $oldlwe
	   ctype 4 ltype 1 lweight 4
	     # ticksize 0 0 0.1 0.2 
	     # grid 1 1 
	   ticksize 0 0 0 0 
	   # grid 0 1 
	   grid 1 2 
	   ctype 2 ltype 0 lweight $oldlwe
	}

	define plotdays "n"
	define plotdays ? {* Plot DAYS ? [y/n] }
	if(substr('$plotdays',0,1) == 'y') {
	   define oldlwe $lweight
	   define oldexp $expand
	   define oldfx1 $fx1
	   define oldfx2 $fx2
	   define oldfy1 $fy1
	   define oldfy2 $fy2
	   echo OLDLWEIGHT : $oldlwe
	   ctype 3 ltype 2 lweight 4
	   limits $($t0ref+$fx1/86400) $($t0ref+$fx2/86400) $fy1 $fy2
	   ticksize 0.25 1 0.1 0.2 
	   grid 0 1 
	   ctype 2 ltype 0 lweight 3
	   notation -5 5 -5 5 
	   expand 1.25
	   # box 3 3 1 3 
	   notation 0 0 0 0 
	   limits $oldfx1 $oldfx2 $oldfy1 $oldfy2
	   relocate ( $(($gx1+$gx2)/2) $($gy2+2000) )
	   # putlabel 5 Time [TJD]
	   lweight $oldlwe
	   expand $oldexp
	}

	if( $del_ud == 1 ) { 
	   echo UP and DOWN errors were FAKE...deleting them
	   delete err_rate_tmp_u
	   delete err_rate_tmp_d
	}
	delete newt_tmp2
	delete rate_tmp2
	delete err_rate_tmp2
	delete err_rate_tmp2_u
	delete err_rate_tmp2_d
	delete err_lg_rate_tmp2_u
	delete err_lg_rate_tmp2_d

	notation -4 4 -4 4 

#---------------------------------------------------------------------------
