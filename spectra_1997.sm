#---------------------------------------------------------------------------
# read_pointings_97
read_pointings_97

	define data1997dir "/data/analysis/SAX/Mkn421/1997/ALL/Test/Def_XClean"
	echo $data1997dir

	define check_del ? { Delete OLD vectors ? [y/n] }
	if(substr('$check_del',0,1) == 'y') {
	   foreach 2 { a1_1 a2 eb fold a1_01 epeak norm1kev } {
	      echo ** Deleting $2
	      delete $2
	   }
	}

	set all_pointings_vec = { a b c d e f g h i l m n o p q r }
	set sub_pointings_vec = {   b c d e f g h i l m n o p q r }
	
	foreach 1 all_pointings_vec {
	data "$!data1997dir/top$!1.out"

	lines 4 4 
	read time_$1  1
	read time_mid_$1    1
	read time_start_$1  2
	read time_stop_$1   3

	lines 5 5 
	read fl_low_ab_$1   1 
	read fl_high_ab_$1  2 
	read fl_all_ab_$1   3

	lines 6 6
	read fl_low_unab_$1  1 
	read fl_high_unab_$1 2 
	read fl_all_unab_$1  3

	lines 7 12
	read a1_$1          1 
	read err_a1_d_$1    2 
	read err_a1_u_$1    3 
	read a10_$1         4 
	read err_a10_d_$1   5 
	read err_a10_u_$1   6
	read eb_$1          7 
	read err_eb_d_$1    8 
	read err_eb_u_$1    9
	read fold_$1        10 
	read err_fold_d_$1  11 
	read err_fold_u_$1  12 
	read a01_$1         13 
	read err_a01_d_$1   14 
	read err_a01_u_$1   15
	read epeak_$1       16 
	read err_epeak_d_$1 17
	read err_epeak_u_$1 18
	read norm1kev_$1    19
	read a05_$1         20
	read err_a05_d_$1   21
	read err_a05_u_$1   22
	read a5_$1          23
	read err_a5_d_$1    24
	read err_a5_u_$1    25

	}

	#----------------------------------------------
	define 1 $(all_pointings_vec[0])
	echo * Doing concatenation with $1 data

	foreach 2 { fl_low_ab fl_high_ab fl_all_ab fl_low_unab fl_high_unab fl_all_unab \
		    norm1kev time time_mid time_stop time_start } {
	  set $2       = $2_$1 
	  delete $2_$1
	}

	foreach 2 { a01 a05 a1 a5 a10 eb fold epeak } {
	  set $2       = $2_$1 
	  set err_$2_d = err_$2_d_$1 
	  set err_$2_u = err_$2_u_$1 

	  delete $2_$1
	  delete err_$2_d_$1
	  delete err_$2_u_$1
	}
	
	#----------------------------------------------
	foreach 1 sub_pointings_vec {
	echo * Doing concatenation with $1 data

	foreach 2 { fl_low_ab fl_high_ab fl_all_ab fl_low_unab fl_high_unab fl_all_unab \
		    norm1kev time time_mid time_stop time_start } {
	  set $2       = $2       CONCAT $2_$1 
	  delete $2_$1
	}

	foreach 2 { a01 a05 a1 a5 a10 eb fold epeak } {
	  set $2       = $2       CONCAT $2_$1 
	  set err_$2_d = err_$2_d CONCAT err_$2_d_$1 
	  set err_$2_u = err_$2_u CONCAT err_$2_u_$1 

	  delete $2_$1
	  delete err_$2_d_$1
	  delete err_$2_u_$1
	}
	}

	foreach 1 { a01 a05 a1 a5 a10 eb fold epeak } {
	    set err_$1_u = err_$1_u - $1
	    set err_$1_d = $1 - err_$1_d 
	}

	foreach 2 { a01 a05 a1 a5 a10 } {
	  set $2 = $2 - 1
	}

	define dorename ? { Rename vectors to 'veryold' ? } 
	if ( substr('$dorename',0,1) == 'y' ) {
	    foreach 2 { a01 a05 a1 a5 a10 eb fold epeak } {
	       set veryold_$2       = $2
	       set err_veryold_$2_d = err_$2_d
	       set err_veryold_$2_u = err_$2_u
	    }
	    foreach 2 { fl_low_ab fl_low_unab fl_all_ab fl_high_ab fl_high_unab fl_all_unab } {
	       set veryold_$2       = $2
	    }
	    foreach 2 { time time_start time_stop time_mid } {
	       set veryold_$2       = $2
	    }
	}

#---------------------------------------------------------------------------
# clean_pointings_97
clean_pointings_97

	define quali ? { Which set of array [old/veryold] : }
	#
	# removing vectors
	#
	define 1 $quali
	foreach var { a01 a05 a1 a10 a5 epeak fold eb dalpha norm1kev } {
                 delete $1_$var 
	         delete err_$1_"$!var"_u 
	         delete err_$1_"$!var"_d 
	}
	foreach var { fl_low_ab fl_high_ab fl_all_ab fl_low_unab fl_high_unab fl_all_unab } {
                 delete $1_$var 
	}
	foreach var { time time_start time_stop time_mid } {
                 delete $1_$var
	}
        foreach var { a01 a05 a1 a10 a5 epeak fold eb dalpha norm1kev } {
                 delete $1_old_$var
        }

	# special arrays
	#
	if ( '$quali' == 'sub05' ) {
	   foreach var { a01 a05 a1 a10 a5 epeak fold eb dalpha norm1kev } {
	         delete sub05_new_$var 
	   }
	}

	if ( '$quali' == 'sub075' ) {
	   foreach var { a01 a05 a1 a10 a5 epeak fold eb dalpha norm1kev } {
	         delete sub075_new_$var 
	   }
	}


#---------------------------------------------------------------------------
# plot_pointings_97
plot_pointings_97

	echo ------------------------------
	echo  [1] alpha @ 0.1 keV
	echo  [2] alpha @ 0.5 keV
	echo  [3] alpha @   1 keV
	echo  [4] alpha @   5 keV
	echo  [5] alpha @  10 keV
	echo  [6] E_break 
	echo  [7] E_peak

	# define min_time
	# define max_time
	define min_fl_low_ab      1.0  
	define max_fl_low_ab      2.4  
	define min_fl_low_unab    1.5  
	define max_fl_low_unab    2.9  
	define min_fl_high_ab     0.3
	define max_fl_high_ab     1.2
	define min_fl_high_unab   0.3
	define max_fl_high_unab   1.5
	define min_fl_all_ab      1.3 
	define max_fl_all_ab      6.0
	define min_fl_all_unab    1.5  
	define max_fl_all_unab    6.0

	define min_a01   0.1
	define max_a01   2.4
	define min_a05   1.8
	define max_a05   2.3
	define min_a1    1.9
	define max_a1    2.7
	define min_a5    2.5
	define max_a5    3.4
	define min_a10   2.5
	define max_a10   3.8
	define min_eb    0.01 
	define max_eb   20.0
	define min_epeak 0.01
	define max_epeak 1.1

	define whichpar ? { Which Parameter ? [1-7] }
	if ($whichpar == 1) { 
	      define 1 "a01" 
	      define ymin $min_$1
	      define ymax $max_$1
	      define lab_y "\alpha_{ (@0.1keV)}"
	}
	if ($whichpar == 2) { 
	      define 1 "a05" 
	      define ymin 1.3 
	      define ymax 2.3
	      define ymin $min_$1
	      define ymax $max_$1
	      define lab_y "\alpha_{ (@0.5keV)}"
	}
	if ($whichpar == 3) { 
	      define 1 "a1" 
	      define ymin 1.7 
	      define ymax 2.3
	      define ymin $min_$1
	      define ymax $max_$1
	      define lab_y "\alpha_{ (@1keV)}"
	}
	if ($whichpar == 4) { 
	      define 1 "a5" 
	      define ymin 2.4
	      define ymax 2.9
	      define ymin $min_$1
	      define ymax $max_$1
	      define lab_y "\alpha_{ (@5keV)}"
	}
	if ($whichpar == 5) { 
	      define 1 "a10" 
	      define ymin 2.4
	      define ymax 3.0
	      define ymin $min_$1
	      define ymax $max_$1
	      define lab_y "\alpha_{ (@10keV)}"
	}
	if ($whichpar == 6) { 
	      define 1 "eb"
	      define ymin 0.1 
	      define ymax 20.0
	      define ymin $min_$1
	      define ymax $max_$1
	      define lab_y "E_{break}"
	}
	if ($whichpar == 7) { 
	      define 1 "epeak"
	      define ymin 0.05
	      define ymax 1.8 
	      define ymin $min_$1
	      define ymax $max_$1
	      define lab_y "E_{peak} [keV]"
	}
	define 1 veryold_$1
	echo *** $1 ***

	echo --- FOLD PARAMETER -----------
	echo  [0] ALL (42)
	echo  [1] 0.5
	echo  [2] 1.0
	echo  [3] 2.0
	echo  [4] 3.0
	echo  [5] FREE (and errors for 3 interesting parameters)
	echo  [6] FREE (and errors for 4 interesting parameters)
	define whichfold ? { Which value of Fold parameter ? [1-6] }
	echo $whichfold

        if ($whichfold == 0) { define lab_t "ALL Fold Parameter values" }
        if ($whichfold == 1) { define lab_t "{\it f} = 0.5" }
        if ($whichfold == 2) { define lab_t "{\it f} = 1.0" }
        if ($whichfold == 3) { define lab_t "{\it f} = 2.0" }
        if ($whichfold == 4) { define lab_t "{\it f} = 3.0" }
        if ($whichfold == 5) { define lab_t "{\it f} (a)" }
        if ($whichfold == 6) { define lab_t "{\it f} (b)" }

	if ($whichfold > 0) {
	define 2 ($whichfold-1)
	echo $2

	set yvec = < $($1[$2]) > 
	set err_yvec_d = < $(err_$1_d[$2]) > 
	set err_yvec_u = < $(err_$1_u[$2]) > 
	do 3=1,$(dimen(all_pointings_vec)-1) {
	   set yvec       = yvec       CONCAT < $($1[$2+$3*6]) >
	   set err_yvec_d = err_yvec_d CONCAT < $(err_$1_d[$2+$3*6]) >
	   set err_yvec_u = err_yvec_u CONCAT < $(err_$1_u[$2+$3*6]) >
	}

	echo ------------------------------
	echo  [0] time
	echo  [1] order 
	echo  [2] 0.2- 1.0 keV ABSORBED flux 
	echo  [3]          keV UN-ABSORBED flux
	echo  [4] 2.0-10.0 keV ABSORBED flux 
	echo  [5]          keV UN-ABSORBED flux
	echo  [6] 0.1-10.0 keV ABSORBED flux 
	echo  [7]          keV UN-ABSORBED flux
	define whatx ? { What X-axis variable ? }

	if ($whatx == 0) {
	    set xvec = (time - $(time[0]) )*1.0e8
	    define xmin -20000
	    define xmax ($(xvec[$(dimen(all_pointings_vec))-1])+20000)
	    define lab_x "Time from TJD=10567 [s]"
	}
	if ($whatx == 1) {
	    set xvec = 1,$(dimen(all_pointings_vec)),1
	    define xmin 0
	    define xmax $(dimen(xvec)+1)
	    define lab_x "\# sequence number"
	}
	if ($whatx == 2) {
	    set xvec = fl_low_ab*1.e10
	    define xmin $min_fl_low_ab
	    define xmax $max_fl_low_ab
	    define lab_x "F^{obs}_{0.2-1keV} [10^{-10} erg/cm^2/s^{-1}]"
	}
	if ($whatx == 3) {
	    set xvec = fl_low_unab*1.e10
	    define xmin $min_fl_low_unab
	    define xmax $max_fl_low_unab
	    define lab_x "F^{dered}_{0.2-1keV} [10^{-10} erg/cm^2/s^{-1}]"
	}
	if ($whatx == 4) {
	    set xvec = fl_high_ab*1.e10
	    define xmin $min_fl_high_ab
	    define xmax $max_fl_high_ab
	    define lab_x "F^{obs}_{2-10keV} [10^{-10} erg/cm^2/s^{-1}]"
	}
	if ($whatx == 5) {
	    set xvec = fl_high_unab*1.e10
	    define xmin $min_fl_high_unab
	    define xmax $max_fl_high_unab
	    define lab_x "F^{dered}_{2-10keV} [10^{-10} c.g.s]"
	}
	if ($whatx == 6) {
	    set xvec = fl_high_ab*1.e10
	    define xmin $min_fl_all_ab
	    define xmax $max_fl_all_ab
	    define lab_x "F^{obs}_{0.1-10keV} [10^{-10} erg/cm^2/s^{-1}]"
	}
	if ($whatx == 7) {
	    set xvec = fl_high_unab*1.e10
	    define xmin $min_fl_all_unab
	    define xmax $max_fl_all_unab
	    define lab_x "F^{dered}_{0.1-10keV} [10^{-10} c.g.s]"
	}
	} 

	if ($whichfold == 0) {
	    set xvec = 1,$($(dimen(all_pointings_vec)*6)),1
	    define xmin  0
	    define xmax  $(dimen(xvec)+1)
	    set yvec = $1
	    set err_yvec_u = err_$1_u
	    set err_yvec_d = err_$1_d
	    define lab_x "\# sequence number"
	}

	ctype 2 
	lweight 3
	expand 1.5
	limits $xmin $xmax $ymin $ymax
	if ($whichfold == 0) { 
	     ticksize 1 6 0 0 
	} else {
	     ticksize 0.1 0.5 0 0 
	}
	if ($whatx == 0) {
	   ticksize 0 0 0 0
	}
	box 
	xlabel $lab_x 
	expand 2.5
	ylabel $lab_y 

	define col ? { Color ? }
	ctype $col

	ptype 4 3
	expand 2.0
	points   xvec yvec
	errorbar xvec yvec err_yvec_u 2
	errorbar xvec yvec err_yvec_d 4

	expand 1.5
	ctype 2
        relocate ( $gx2 $($gy2+300) )
        putlabel 7 1997
	relocate ( $gx1 $($gy2+300) )
	putlabel 9 $lab_t

#---------------------------------------------------------------------------
# highlight_97
highlight_97

	echo --- FOLD PARAMETER -----------
	echo  [0] ALL 
	echo  [1] 0.5
	echo  [2] 1.0
	echo  [3] 2.0
	echo  [4] 3.0
	echo  [5] FREE (and errors for 3 interesting parameters)
	echo  [6] FREE (and errors for 4 interesting parameters)
	define whatlight ? { What is the case to highlight ? [0-6] }

	define 2 ($whatlight-1)
	echo $2

	set xvec_hl = < $(xvec[$2]) >    
	set yvec_hl = < $(yvec[$2]) > 
	set err_yvec_hl_d = < $(err_yvec_d[$2]) > 
	set err_yvec_hl_u = < $(err_yvec_u[$2]) > 
	do 3=1,$(dimen(all_pointings_vec)-1) {
	   set yvec_hl       = yvec_hl       CONCAT < $(yvec[$2+$3*6]) >
	   set xvec_hl       = xvec_hl       CONCAT < $(xvec[$2+$3*6]) >
	   set err_yvec_hl_d = err_yvec_hl_d CONCAT < $(err_yvec_d[$2+$3*6]) >
	   set err_yvec_hl_u = err_yvec_hl_u CONCAT < $(err_yvec_u[$2+$3*6]) >
	}

	define col ? { what Color ? }
	ctype $col 
	ptype 4 0 
	lweight 4
	expand 2.5
	points   xvec_hl yvec_hl
	errorbar xvec_hl yvec_hl err_yvec_hl_u 2
	errorbar xvec_hl yvec_hl err_yvec_hl_d 4
	lweight 3

#---------------------------------------------------------------------------
# curved_model_seq_97
curved_model_seq_97

	   echo --- FOLD PARAMETER -----------
	   echo  [1] 0.5
	   echo  [2] 1.0
	   echo  [3] 2.0
	   echo  [4] 3.0
	   echo  [5] FREE (and errors for 3 interesting parameters)
	   echo  [6] FREE (and errors for 4 interesting parameters)
	   define whichfold ? { Which value of Fold parameter ? [1-6] }
	   echo  * Active value is: $whichfold

	   echo --- Which representation --------
   	   echo   [1] Fnu
	   echo   [2] nu_Fnu
	   define repre ? { Your choice ? }

	   define ymin ? { Y_min : }
	   define ymax ? { Y_max : }

	   do i=1,$(dimen(all_pointings_vec)) {
	      define igo ? { Go ? [y/n] }
	      if(substr('$igo',0,1) == 'y') {
	        echo  [$i] $(all_pointings_vec[$i-1])
	        define color ($i - 6*INT($i/6.)+2)
	        curved_model $i $whichfold $repre $color $ymin $ymax 
	      } else {
		return
	      }
	   }


#---------------------------------------------------------------------------
# curved_model_97: relazione usata da Fabrizio nel paper
#                    CON aggiunto un esponente di 'fold'
#                    CON cambiata la forma dell'INPUT
#                    E` come quella implementata in XSPEC
#                    Calcolata sul range -2 < log(nu) < 2
#                     [1]= DataSet
#                     [2]= Fold Parameter
#                     [3]= f_nu/nu_f_nu
#                     [4]= color
#                     [5]= Y_min
#                     [6]= Y_max
curved_model 06_97

        if($?1 == 0) {

    	   echo -----------------------------------------------
	   echo  relazione usata nel "curved model"
	   echo  Legge i parametri direttamente dai Log Files
	   echo  Calcolata sul range -2 < log(nu) < 2
    	   echo -----------------------------------------------

	   do i=1,$(dimen(all_pointings_vec)) {
	      echo  [$i] $(all_pointings_vec[$i-1])
	   }
	   define oldwhichdata ? { Which DataSet ? }

	   echo --- FOLD PARAMETER -----------
	   echo  [1] 0.5
	   echo  [2] 1.0
	   echo  [3] 2.0
	   echo  [4] 3.0
	   echo  [5] FREE (and errors for 3 interesting parameters)
	   echo  [6] FREE (and errors for 4 interesting parameters)
	   define oldwhichfold ? { Which value of Fold parameter ? [1-6] }
	   echo  * Active value is: $oldwhichfold

	   echo --- Which representation --------
   	   echo   [1] Fnu
	   echo   [2] nu_Fnu
	   define oldrepre ? { Your choice ? }

           define oldcolor ? { Color ? }

           define 1 $oldwhichdata 
           define 2 $oldwhichfold
           define 3 $oldrepre
           define 4 $oldcolor
        } 

	define whichdata $1
	define whichfold $2
	define repre     $3
	define color     $4

	define e1       (1.0)
	define e2      (10.0)

	if ($whichfold == 1) { define lab_t "Fold Parameter = 0.5" }
	if ($whichfold == 2) { define lab_t "Fold Parameter = 1.0" }
	if ($whichfold == 3) { define lab_t "Fold Parameter = 2.0" }
	if ($whichfold == 4) { define lab_t "Fold Parameter = 3.0" }
	if ($whichfold == 5) { define lab_t "Fold Parameter Free (a)" }
	if ($whichfold == 6) { define lab_t "Fold Parameter Free (b)" }

	define g1       $($(a1[($whichdata-1)*6+$whichfold-1])-1)
	define g2       $($(a10[($whichdata-1)*6+$whichfold-1])-1)
	define e_break  $(eb[($whichdata-1)*6+$whichfold-1])
	define fold     $(fold[($whichdata-1)*6+$whichfold-1])
	define realnorm $(norm1kev[($whichdata-1)*6+$whichfold-1])
	define temp     (lg($realnorm))

	echo  Log of RealNorm = $temp

        if($?5 == 0) {
	   define oldymin ? { Y_min : }
	   define oldymax ? { Y_max : }
           define 5 $oldymin
           define 6 $oldymax
	}
	define ymin      $5
	define ymax      $6

	echo ------------------------------
	echo  Alpha @ E_ref_1 = $g1
	echo  Alpha @ E_ref_2 = $g2
	echo  E_break         = $e_break
	echo  Fold Parameter  = $fold
	echo ------------------------------

	define xb (lg($e_break))
	define x1 (lg($e1))
	define x2 (lg($e2))

	define dum1 ( exp(2.302*($x1 - $xb)*$fold) )
	define dum2 ( exp(2.302*($x2 - $xb)*$fold) )

	define a1 ( ($g1*$dum2*(1+$dum1)-$g2*$dum1*(1+$dum2))/($dum2-$dum1) ) 
	define a2 ( ($g2*(1+$dum2)-$g1*(1+$dum1))/($dum2-$dum1) ) 

	define normdum  ( -2.302585093*$xb*$fold )
	define normdumf ( ($a1 - $a2)*lg(1. + exp($normdum))/$fold )

	echo --- Spectral Indices "at infty" ---
	echo * alpha_1 = $a1
	echo * alpha_2 = $a2
	echo -----------------------------------

	set lg_e=-2,2.1,0.02
	set dum = 2.302585*(lg_e - $xb)*$fold

	set lg_f = -$a1*lg_e + ($a1 - $a2)*lg(1 + exp(dum))/$fold
	set lg_f = lg_f - $normdumf + lg($realnorm)

	set dimen(xx)=$(dimen(lg_e)-1)
	set dimen(aa)=$(dimen(lg_e)-1)

	do 1=0,$(dimen(lg_e)-2) {
	  set xx[$1] = (lg_e[$1]+lg_e[$1+1])/2
	  set aa[$1] = (lg_f[$1]-lg_f[$1+1])/(lg_e[$1+1]-lg_e[$1])
	}

	#-----------------------------------
	 # location 6000 29000 7000 30000
	location 6000 30000 6000 30000
	window 1 1 1 1

	ctype 2
	lweight 2
	expand 1.5
	if ($repre == 1) {limits -1.1 1.3 -4 3 }
	if ($repre == 2) {limits -1.1 1.3 $ymin $ymax }

	expand 1.5
	ticksize -1 0 0 0 
	lweight 1.5
	box 1 2 0 3

	lweight 2 

	ctype $color
	if ($repre == 1) { connect lg_e lg_f }
	if ($repre == 2) {  
	   set nufnu = lg_f + lg(662.6176) - 29. + lg_e + 17.383
           connect lg_e nufnu   # (lg_e+lg_f) 
	}

#---------------------------------------------------------------------------
# dot_xsed_97  the REAL Xsed Plotting Program (tailored for Mkn-421 1997)
dot_xsed_97

	# do i=1,$(dimen(all_pointings_vec)) {
	#   echo  [$i] $(all_pointings_vec[$i-1])
	# }

	echo " Name of data file [ratio_top****.qdp]"
	define datafile ? { where **** are of the form [a-z]_[05/1/2/3/fa/fb] :} 
	lweight 3

	define datased1997dir "/neutronstar/gf/SAX/mkn421/1997/ALL/Test/Plots"
	echo $datased1997dir


	data "$!datased1997dir/eufs_top$!datafile.qdp.clean"
	read {kev 1 dkev 2 eufs 5}

	data "$!datased1997dir/ratio_top$!datafile.qdp.clean"
	read {ratio 3 err_ratio 4}

	set lkev = lg(kev)
	set lkev = lg(kev)
	set dx_d = 0*eufs
	set dx_u = 0*eufs

	set spec  = ratio*eufs
	set nufnu = lg(spec) + lg(662.6176) - 29. + lkev + 17.383
	
	set err_spec_u =  lg(1 + err_ratio/ratio)
	set err_spec_d = -lg(1 - err_ratio/ratio)

	location 6000 30000 6000 30000
	expand 1.5
	ctype 2 

	define whatx ? {Energy [1] of Frequency [2] X-Axis ?}
	if($whatx == 2) {
	    define xmin 16.1 
	    define xmax 19.7
	    define tick  0
	    define lab_x "log(\\nu)"

	    set xl  = lkev + 17.383
	    set aaa = xl 
	} else {
	    define xmin -1.1
	    define xmax  1.3
	    define tick  -1
	    define lab_x "Energy [keV]"

	    set xl  = lkev
	    set aaa = xl 
	}

	define whaty ? {F_nu [1] of nu_F_nu [2] Y-Axis ?}
	if($whaty == 1) {
	    define ymin -3.9
	    define ymax  0.1 
	    define lab_y "log(F_\\nu) [erg/cm^2/s/Hz]"

	    set yl  = lg(spec)
	    set bbb = yl
	} else {
	    define ymin -10.5
	    define ymax  -9.2
	    define lab_y "log(\\nu F_\\nu) [erg/cm^2/s]"

	    set yl  = nufnu
	    set bbb = yl
	}

	set errbbb_u = err_spec_u 
	set errbbb_d = err_spec_d 

	limits $xmin $xmax $ymin $ymax 
	ticksize $tick 0 0 0 
	expand 1.5
	box 
	ylabel $lab_y
	expand 2
	xlabel $lab_x

	echo *** ----------------------
	echo *** PLOT Options :
	echo    [1] B/W
	echo    [2] Ptype/Ctype
	echo    [3] Ctype/Ctype
	define come ? { Your choice ? }

	if($come == 1){
	   ctype 2
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1
	   expand 1.6
	   ctype 1
	   ptype 20 3 
	   points   aaa bbb
	   ctype 2 
	   expand 2.0
	   ptype 20 0 
	   points   aaa bbb
	}

	if($come == 2) {
	   define pty ? { Give the code for PTYPE [#1 #2] : }
	   define cty ? { Give the code for CTYPE [#1] : }

	   ptype $pty
	   ctype $cty
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1
	   expand 1.6
	   # ctype 1
	   # ptype 20 3 
	   points   aaa bbb
	   # ctype 2 
	   # expand 2.0
	   # ptype 20 0 
	   # points   aaa bbb
	}

	if($come == 3) {
	   echo -----------------------------------------
	   define cty1 ? { Give the code for CTYPE [border] : }
	   define cty2 ? { Give the code for CTYPE [inside] : }
	   echo -----------------------------------------

	   ctype $cty1
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1

	   expand 2.0
	   ctype $cty1
	   ptype 20 3 
	   points   aaa bbb

	   expand 1.5
	   ctype $cty2
	   ptype 20 3 
	   points   aaa bbb

	   expand 1.7
	   lweight 1.5
	   ctype $cty1
	   ptype 20 0 
	   points   aaa bbb
	}

	define plotlab ? { Label ? [y/n] }
	if(substr('$plotlab',0,1) == 'y') { 
	  echo -----------------------------------------
	  define order ? { Which position from the Bottom ? }

	  relocate ( $($gx1 + 1500) $($gy1 + 1500 + 1500*$order) ) 
	  expand 2.0
	  ctype $cty1
	  ptype 20 3 
	  dot

	  expand 1.2
	  ctype $cty2
	  ptype 20 3 
	  dot

	  expand 2.0
	  lweight 1.5
	  ctype $cty1
	  ptype 20 0 
	  dot

	  define labtxt ? { TEXT of Label : }

	  ctype $cty2
	  relocate ( $($gx1 + 2250) $($gy1 + 1450 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5

	  ctype $cty1
	  relocate ( $($gx1 + 2200) $($gy1 + 1500 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5
	}

	## ctype 2 
	## expand 1.5
   	## relocate (18000 30750)
	## putlabel 5 May 2 and May 4, LECS+MECS+PDS

	lweight 3

#---------------------------------------------------------------------------
# ratio_97
ratio_97

	echo ----------------------------------------------
	echo  The processed MODELS are:
	echo  [1] Single Power Law Nh free/frozen
	echo  [2] Broken Power Law Nh free/frozen
	echo  [3] Curved Model fold=0.5/1/2/3/free
	echo  
	define model    ? { Which Model ? [pl/bkn/curved] }

	define ndata (60)

	if ( '$model' == '1' || '$model' == 'pl') {
	    define name1 "pow"

	    define aux ? { Nh FREE [1] or FROZEN [2] ? }
	    if ( $aux == 1 || substr('$aux',0,1) == 'f' ) {
	       define name2 "pl"
	       define dof   ($ndata - 2)
	    } else {
	       define name2 "pl_nh"
	       define dof   ($ndata - 1)
	    }
	}

	if ( '$model' == '2' || '$model' == 'bkn') {
	    define name1 "pow"

	    define aux ? { Nh FREE [1] or FROZEN [2] ? }
	    if ( $aux == 1 || substr('$aux',0,1) == 'f' ) {
	       define name2 "bkn"
	       define dof   ($ndata - 4)
	    } else {
	       define name2 "bkn_nh"
	       define dof   ($ndata - 3)
	    }
	}

	if ( '$model' == '3' || '$model' == 'curved') {
	    define name1 "top"
	    define aux ? { Which value of fold parameter [0.5/1/2/3/free] ? }

	    if ( $aux == 0.5   )   { define name2 ( sprintf('%s','05'))}
	    if ( $aux == 1     )   { define name2 "1"  }
	    if ( $aux == 2     )   { define name2 "2"  }
	    if ( $aux == 3     )   { define name2 "3"  }
	    if ( substr('$aux',0,1) == 'f') { 
		define name2 "fa" 
		define dof   ($ndata - 4)
	    } else {
		define dof   ($ndata - 3)
	    }
	}

	# set all_pointings_vec = { a b c d e f g h i l m n o p q r }
	# set sub_pointings_vec = {   b c d e f g h i l m n o p q r }
	define datased1997dir "/neutronstar/gf/SAX/mkn421/1997/ALL/Test/Plots"
	echo $datased1997dir
	
	define 1 $(all_pointings_vec[0])
	define nameaux1  eufs_"$!name1"$1
	define nameaux2  "$!nameaux1"_$!name2
	define namename "$!nameaux2.qdp.clean"

	data "$!datased1997dir/$!namename"
	read { kev 1 dkev 2 }

	foreach 1 all_pointings_vec {
	   define nameaux1 ratio_"$!name1"$1
	   define nameaux2 "$!nameaux1"_$!name2
	   define namename "$!nameaux2.qdp.clean"

	   data "$!datased1997dir/$!namename"
	   read { ratio 3 err_ratio 4}

	   define nameaux1 delete
	   define nameaux2 delete
	   define namename delete

	   set ratio_$1     = ratio
	   set err_ratio_$1 = err_ratio

	   set lkev = lg(kev)
	
	}

	foreach 1 all_pointings_vec {
	   set chi_$1 = (ratio_$1 - 1)**2/err_ratio_$1/err_ratio_$1
	   define CHI_$1    (sum(chi_$1))
	   define CHIred_$1 ($CHI_$1/$dof)
	   define CHI_$1    ( sprintf('%7.2f',$CHI_$1) )
	   define CHIred_$1 ( sprintf('%6.3f',$CHIred_$1) )
	   echo [$1] Chi^2 = $CHIred_$1 ($CHI_$1/$dof)
	}

	delete ratio
	delete err_ratio

	#-----------------------------------

	echo ----------------------------------------------
	define peso ? { WEIGHTED or PLAIN averaging of the Ratios ? [1/2] }

	if ( '$peso' == '1' || '$peso' == 'w' ) { 
	    foreach 1 all_pointings_vec {
		set weight_$1 = 1/err_ratio_$1/err_ratio_$1
	    }
	} else {
	    foreach 1 all_pointings_vec {
		set weight_$1 = 1 + ratio_$1*0.0
	    }
	}

	#-----------------------------------
	set ratio     = ratio_$(all_pointings_vec[0])
	set norm      = weight_$(all_pointings_vec[0])
	set err_ratio = err_ratio_$(all_pointings_vec[0])

	foreach 1 sub_pointings_vec {
	   set ratio     = ratio + ratio_$1*weight_$1
	   set norm      = norm + weight_$1
	   set err_ratio = err_ratio + (weight_$1*err_ratio_$1)**2.
	}

	set ratio     = ratio/norm
	set err_ratio = sqrt(err_ratio)/norm

	set chi = (ratio - 1)**2/err_ratio/err_ratio
	define CHI    (sum(chi))
	define CHIred ($CHI/$dof)
	define CHI    ( sprintf('%7.2f',$CHI) )
	define CHIred ( sprintf('%6.3f',$CHIred) )
	
	echo ---------------------------------------------
	echo [TOTAL] Chi^2 = $CHIred ($CHI/$dof)
	echo ---------------------------------------------

	location 6000 30000 6000 30000
	expand 1.5
	lweight 3
	ctype 2 

	define xmin -1.1
	define xmax  1.3
	define lab_x "Energy [keV]"

	define ymin  ? { Minimum RATIO ? }
	define ymax (2-$ymin)
	define ymax  ? { Maximum RATIO ? }
	define lab_y "Data/Model Ratio"

	limits $xmin $xmax $ymin $ymax 
	ticksize -1 0 0 0 
	expand 1.5
	box 
	ylabel $lab_y
	expand 2
	xlabel $lab_x

	ltype 2
	ctype 3 
	relocate -2 1
	draw      2 1 
	ltype 0
	ctype 2
	

	echo *** ----------------------
	echo *** PLOT Options :
	echo    [1] B/W
	echo    [2] Ptype/Ctype
	echo    [3] Ctype/Ctype
	define come ? { Your choice ? }

	if($come == 1){
	   ctype 2
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4
	   expand 1.6
	   ctype 1
	   ptype 20 3 
	   points   lkev ratio
	   ctype 2 
	   expand 2.0
	   ptype 20 0 
	   points   lkev ratio
	}

	if($come == 2) {
	   define pty ? { Give the code for PTYPE [#1 #2] : }
	   define cty ? { Give the code for CTYPE [#1] : }

	   ptype $pty
	   ctype $cty
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4
	   expand 1.6
	   points   lkev ratio
	}

	if($come == 3) {
	   echo -----------------------------------------
	   define cty1 ? { Give the code for CTYPE [border] : }
	   define cty2 ? { Give the code for CTYPE [inside] : }
	   echo -----------------------------------------

	   ctype $cty1
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4

	   expand 2.0
	   ctype $cty1
	   ptype 20 3 
	   points   lkev ratio

	   expand 1.5
	   ctype $cty2
	   ptype 20 3 
	   points   lkev ratio

	   expand 1.7
	   lweight 1.5
	   ctype $cty1
	   ptype 20 0 
	   points   lkev ratio
	}

	define plotlab ? { Label ? [y/n] }
	if(substr('$plotlab',0,1) == 'y') { 
	  echo -----------------------------------------
	  define order ? { Which position from the Bottom ? }

	  relocate ( $($gx1 + 1500) $($gy1 + 1500 + 1500*$order) ) 
	  expand 2.0
	  ctype $cty1
	  ptype 20 3 
	  dot

	  expand 1.2
	  ctype $cty2
	  ptype 20 3 
	  dot

	  expand 2.0
	  lweight 1.5
	  ctype $cty1
	  ptype 20 0 
	  dot

	  define labtxt ? { TEXT of Label : }

	  ctype $cty2
	  relocate ( $($gx1 + 2250) $($gy1 + 1450 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5

	  ctype $cty1
	  relocate ( $($gx1 + 2200) $($gy1 + 1500 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5
	}

	ctype 2 
	ltype 0
	lweight 3

	define renordel ? { Rename [1] or Delete [2] Product Vectors ? }
	if ( $renordel == 1 ) {
	    define sufname ? { Which name suffix ? }
	    set ratio_$sufname     = ratio
	    set err_ratio_$sufname = err_ratio
	    set kev_$sufname       = kev
	    set lkev_$sufname      = lkev
	}

	if ( $renordel == 2 ) {
	   foreach vec { norm ratio err_ratio kev lkev dkev } {
	       delete $vec
	   }
	   foreach 1 all_pointings_vec {
	       delete ratio_$1
	       delete err_ratio_$1
	       delete weight_$1
	       delete chi_$1
	       define CHI_$1 delete
	   }

	}

#---------------------------------------------------------------------------
# dot_xsed_97_98: the REAL Xsed Plotting Program (for Mkn-421 97/98)
dot_xsed_97_98

	define anno ? { Which year 1997, or 1998 ? }

	if ( $anno == 1997 ) { 
	  set all_pointings_vec = { a b c d e f g h i l m n o p q r }
	  set sub_pointings_vec = {   b c d e f g h i l m n o p q r }
	  define datasetdir "/neutronstar/gf/SAX/mkn421/1997/ALL/Test/Plots"
	  echo $datasetdir
	}

	if ( $anno == 1998 ) { 

	  define quali ? { Which set of Fit parameters ? [top/sub05/sub075] }

          set all_pointings_vec = { low_1_2 \
				    low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

          set sub_pointings_vec = { low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

	  define datasetdir "/neutronstar/gf/SAX/mkn421/1998/Test/Plots"
	  echo $datasetdir

	}

	echo The available datasets are:

	do i=1,$(dimen(all_pointings_vec)) {
	   echo [$i] $(all_pointings_vec[$($i-1)])
	}

	define data0 ? { which one do you want to load ? [give name] }
	define data2 ? { which curved model case ? [05/1/2/3/fa/fb] :} 
	lweight 3

	if ( $anno == 1997 )                         { define data1 <top$data0> }
	if ( $anno == 1998 && '$quali' == 'top' )    { define data1 <top_$data0> }
	if ( $anno == 1998 && '$quali' == 'sub05' )  { define data1 <sub05_$data0> }
	if ( $anno == 1998 && '$quali' == 'sub075' ) { define data1 <sub075_$data0> }

	echo $data1

	define cutornot ? { Cut data in the overlapping range ? [y/n] }

	define nameaux1  eufs_"$!data1"
	define nameaux2  "$!nameaux1"_$!data2
	define namename  "$!nameaux2.qdp.clean"

	if ( substr('$cutornot',0,1) == 'y') {
	   data "$!datasetdir/$!namename"
	   lines 1 29 
	   read {kev_a 1 dkev_a 2 eufs_a 5}
	   lines 38 60
	   read {kev_b 1 dkev_b 2 eufs_b 5}
	   set kev  = kev_a  CONCAT kev_b
	   set dkev = dkev_a CONCAT dkev_b
	   set eufs = eufs_a CONCAT eufs_b
	   foreach vec { kev_a kev_b dkev_a dkev_b eufs_a eufs_b } {
	      delete $vec
	   }
	} else {
	   data "$!datasetdir/$!namename"
	   read {kev 1 dkev 2 eufs 5}
	}

	define nameaux1  ratio_"$!data1"
	define nameaux2  "$!nameaux1"_$!data2
	define namename  "$!nameaux2.qdp.clean"

	if ( substr('$cutornot',0,1) == 'y') {
	   data "$!datasetdir/$!namename"
	   lines 1 29 
	   read {ratio_a 3 err_ratio_a 4}
	   lines 38 60
	   read {ratio_b 3 err_ratio_b 4}
	   set ratio     = ratio_a     CONCAT ratio_b
	   set err_ratio = err_ratio_a CONCAT err_ratio_b
	   foreach vec { ratio_a ratio_b err_ratio_a err_ratio_b } {
	      delete $vec
	   }
	} else {
	   data "$!datasetdir/$!namename"
	   read {ratio 3 err_ratio 4}
	}

	set lkev = lg(kev)
	set lkev = lg(kev)
	set dx_d = 0*eufs
	set dx_u = 0*eufs

	set spec  = ratio*eufs
	set nufnu = lg(spec) + lg(662.6176) - 29. + lkev + 17.383

	set enufnu = lg(eufs) + lg(662.6176) - 29. + lkev + 17.383
	
	set err_spec_u =  lg(1 + err_ratio/ratio)
	set err_spec_d = -lg(1 - err_ratio/ratio)

	location 6000 30000 6000 30000
	expand 1.5
	ctype 2 

	define whatx ? {Energy [1] of Frequency [2] X-Axis ?}
	if($whatx == 2) {
	    define xmin 16.1 
	    define xmax 19.7
	    define tick  0
	    define lab_x "log(\\nu)"

	    set xl  = lkev + 17.383
	    set aaa = xl 
	} else {
	    define xmin -1.1
	    define xmax  1.3
	    define tick  -1
	    define lab_x "Energy [keV]"

	    set xl  = lkev
	    set aaa = xl 
	}

	define whaty ? {F_nu [1] of nu_F_nu [2] Y-Axis ?}
	if($whaty == 1) {
	    define ymin -3.9
	    define ymax  0.1 
	    define lab_y "log(F_\\nu) [erg/cm^2/s/Hz]"

	    set yl  = lg(spec)
	    set bbb = yl
	} else {
	    define ymin -10.5
	    define ymax  -9.2
	    define lab_y "log(\\nu F_\\nu) [erg/cm^2/s]"

	    set yl  = nufnu
	    set bbb = yl
	}

	set errbbb_u = err_spec_u 
	set errbbb_d = err_spec_d 

	limits $xmin $xmax $ymin $ymax 
	ticksize $tick 0 0 0 
	expand 1.5
	box 
	ylabel $lab_y
	expand 2
	xlabel $lab_x

	echo *** ----------------------
	echo *** PLOT Options :
	echo    [1] B/W
	echo    [2] Ptype/Ctype
	echo    [3] Ctype/Ctype
	define come ? { Your choice ? }

	if($come == 1){
	   ctype 2
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1
	   expand 1.6
	   ctype 1
	   ptype 20 3 
	   points   aaa bbb
	   ctype 2 
	   expand 2.0
	   ptype 20 0 
	   points   aaa bbb
	}

	if($come == 2) {
	   define pty ? { Give the code for PTYPE [#1 #2] : }
	   define cty ? { Give the code for CTYPE [#1] : }

	   ptype $pty
	   ctype $cty
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1
	   expand 1.6
	   # ctype 1
	   # ptype 20 3 
	   points   aaa bbb
	   # ctype 2 
	   # expand 2.0
	   # ptype 20 0 
	   # points   aaa bbb
	}

	if($come == 3) {
	   echo -----------------------------------------
	   define cty1 ? { Give the code for CTYPE [border] : }
	   define cty2 ? { Give the code for CTYPE [inside] : }
	   echo -----------------------------------------

	   ctype $cty1
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1

	   expand 2.0
	   ctype $cty1
	   ptype 20 3 
	   points   aaa bbb

	   expand 1.5
	   ctype $cty2
	   ptype 20 3 
	   points   aaa bbb

	   expand 1.7
	   lweight 1.5
	   ctype $cty1
	   ptype 20 0 
	   points   aaa bbb
	}

	define plotlab ? { Label ? [y/n] }
	if(substr('$plotlab',0,1) == 'y') { 
	  echo -----------------------------------------
	  define order ? { Which position from the Bottom ? }

	  relocate ( $($gx1 + 1500) $($gy1 + 1500 + 1500*$order) ) 
	  expand 2.0
	  ctype $cty1
	  ptype 20 3 
	  dot

	  expand 1.2
	  ctype $cty2
	  ptype 20 3 
	  dot

	  expand 2.0
	  lweight 1.5
	  ctype $cty1
	  ptype 20 0 
	  dot

	  define labtxt ? { TEXT of Label : }

	  ctype $cty2
	  relocate ( $($gx1 + 2250) $($gy1 + 1450 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5

	  ctype $cty1
	  relocate ( $($gx1 + 2200) $($gy1 + 1500 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5
	}

	## ctype 2 
	## expand 1.5
   	## relocate (18000 30750)
	## putlabel 5 May 2 and May 4, LECS+MECS+PDS

	lweight 3

#---------------------------------------------------------------------------
# dot_xsed_97_98_subtract: the REAL Xsed Plotting Program (for Mkn-421 97/98)
dot_xsed_97_98_subtract

	define anno ? { Which year 1997, or 1998 ? }

	if ( $anno == 1997 ) { 
	  set all_pointings_vec = { a b c d e f g h i l m n o p q r }
	  set sub_pointings_vec = {   b c d e f g h i l m n o p q r }
	  define datasetdir "/neutronstar/gf/SAX/mkn421/1997/ALL/Test/Plots"
	  echo $datasetdir
	}

	if ( $anno == 1998 ) { 

	  define quali ? { Which set of Fit parameters ? [top/sub05/sub075] }

          set all_pointings_vec = { low_1_2 \
				    low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

          set sub_pointings_vec = { low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

	  define datasetdir "/neutronstar/gf/SAX/mkn421/1998/Test/Plots"
	  echo $datasetdir

	}

	echo The available datasets are:

	do i=1,$(dimen(all_pointings_vec)) {
	   echo [$i] $(all_pointings_vec[$($i-1)])
	}

	define data0    ? { which one do you want to load ? [give name] }
	define dataref0 ? { Which is the REFERENCE XSED ?   [give name] }
	define factor   ? { Factor by which the REFERENCE XSED should be scaled ? }
	define data2    ? { which curved model case ? [05/1/2/3/fa/fb] :} 

	lweight 3

	if ( $anno == 1997 )                         { define data1 <top$data0> }
	if ( $anno == 1998 && '$quali' == 'top' )    { define data1 <top_$data0> }
	if ( $anno == 1998 && '$quali' == 'sub05' )  { define data1 <sub05_$data0> }
	if ( $anno == 1998 && '$quali' == 'sub075' ) { define data1 <sub075_$data0> }

	if ( $anno == 1997 )                         { define dataref1 <top$dataref0> }
	if ( $anno == 1998 && '$quali' == 'top' )    { define dataref1 <top_$dataref0> }
	if ( $anno == 1998 && '$quali' == 'sub05' )  { define dataref1 <sub05_$dataref0> }
	if ( $anno == 1998 && '$quali' == 'sub075' ) { define dataref1 <sub075_$dataref0> }

	echo $data1
	echo $dataref1

	define cutornot ? { Cut data in the overlapping range ? [y/n] }

	#---------------------------------------------
	# reading and processing TRUE-dataset
	#
	define nameaux1  eufs_"$!data1"
	define nameaux2  "$!nameaux1"_$!data2
	define namename  "$!nameaux2.qdp.clean"

	if ( substr('$cutornot',0,1) == 'y') {
	   data "$!datasetdir/$!namename"
	   lines 1 29 
	   read {src_kev_a 1 src_dkev_a 2 src_eufs_a 5}
	   lines 38 60
	   read {src_kev_b 1 src_dkev_b 2 src_eufs_b 5}
	   set src_kev  = src_kev_a  CONCAT src_kev_b
	   set src_dkev = src_dkev_a CONCAT src_dkev_b
	   set src_eufs = src_eufs_a CONCAT src_eufs_b
	   foreach vec { src_kev_a src_kev_b src_dkev_a src_dkev_b eufs_a eufs_b } {
	      delete $vec
	   }
	} else {
	   data "$!datasetdir/$!namename"
	   read {src_kev 1 src_dkev 2 src_eufs 5}
	}

	define nameaux1  ratio_"$!data1"
	define nameaux2  "$!nameaux1"_$!data2
	define namename  "$!nameaux2.qdp.clean"

	if ( substr('$cutornot',0,1) == 'y') {
	   data "$!datasetdir/$!namename"
	   lines 1 29 
	   read {src_ratio_a 3 err_src_ratio_a 4}
	   lines 38 60
	   read {src_ratio_b 3 err_src_ratio_b 4}
	   set src_ratio     = src_ratio_a     CONCAT src_ratio_b
	   set err_src_ratio = err_src_ratio_a CONCAT err_src_ratio_b
	   foreach vec { src_ratio_a src_ratio_b err_src_ratio_a err_src_ratio_b } {
	      delete $vec
	   }
	} else {
	   data "$!datasetdir/$!namename"
	   read {src_ratio 3 err_src_ratio 4}
	}

	set lkev = lg(src_kev)
	set dx_d = 0*src_eufs
	set dx_u = 0*src_eufs

	set src_spec   = src_ratio*src_eufs
	set src_nufnu  = lg(src_spec) + lg(662.6176) - 29. + lkev + 17.383
	set src_enufnu = lg(src_eufs) + lg(662.6176) - 29. + lkev + 17.383
	
	set err_src_spec_u =  lg(1 + err_src_ratio/src_ratio)
	set err_src_spec_d = -lg(1 - err_src_ratio/src_ratio)

	#---------------------------------------------
	# reading and processing REFERENCE-dataset
	#
	define nameaux1  eufs_"$!dataref1"
	define nameaux2  "$!nameaux1"_$!data2
	define namename  "$!nameaux2.qdp.clean"

	if ( substr('$cutornot',0,1) == 'y') {
	   data "$!datasetdir/$!namename"
	   lines 1 29 
	   read {ref_kev_a 1 ref_dkev_a 2 ref_eufs_a 5}
	   lines 38 60
	   read {ref_kev_b 1 ref_dkev_b 2 ref_eufs_b 5}
	   set ref_kev  = ref_kev_a  CONCAT ref_kev_b
	   set ref_dkev = ref_dkev_a CONCAT ref_dkev_b
	   set ref_eufs = ref_eufs_a CONCAT ref_eufs_b
	   foreach vec { ref_kev_a ref_kev_b ref_dkev_a ref_dkev_b ref_eufs_a ref_eufs_b } {
	      delete $vec
	   }
	} else {
	   data "$!datasetdir/$!namename"
	   read {ref_kev 1 ref_dkev 2 ref_eufs 5}
	}

	define nameaux1  ratio_"$!dataref1"
	define nameaux2  "$!nameaux1"_$!data2
	define namename  "$!nameaux2.qdp.clean"
	
	if ( substr('$cutornot',0,1) == 'y') {
	   data "$!datasetdir/$!namename"
	   lines 1 29 
	   read {ref_ratio_a 3 err_ref_ratio_a 4}
	   lines 38 60
	   read {ref_ratio_b 3 err_ref_ratio_b 4}
	   set ref_ratio     = ref_ratio_a     CONCAT ref_ratio_b
	   set err_ref_ratio = err_ref_ratio_a CONCAT err_ref_ratio_b
	   foreach vec { ref_ratio_a ref_ratio_b err_ref_ratio_a err_ref_ratio_b } {
	      delete $vec
	   }
	} else {
	   data "$!datasetdir/$!namename"
	   read {ref_ratio 3 err_ref_ratio 4}
	}

	set ref_spec   = ref_ratio*ref_eufs
	set ref_nufnu  = lg(ref_spec) + lg(662.6176) - 29. + lkev + 17.383

	set ref_enufnu = lg(ref_eufs) + lg(662.6176) - 29. + lkev + 17.383
	
	set err_ref_spec_u =  lg(1 + err_ref_ratio/ref_ratio)
	set err_ref_spec_d = -lg(1 - err_ref_ratio/ref_ratio)

	define chefare ? { Rescale to best-fit model or to real-data ? [1/2] }
	set enufnu  = lg(10.**(src_enufnu+11) - $factor*10.**(ref_enufnu+11)) - 11

	if( $chefare == 1 ) { 
	    set spec  = lg(10.**(src_spec+11)  - $factor*10.**(ref_eufs+11)) - 11
	    set nufnu = lg(10.**(src_nufnu+11) - $factor*10.**(ref_enufnu+11)) - 11
  	    set errbbb_u = err_src_spec_u 
	    set errbbb_d = err_src_spec_d 
	}

	if( $chefare == 2 ) { 
	    set spec    = lg(10.**(src_spec+11)   - $factor*10.**(ref_spec+11)) - 11
	    set nufnu   = lg(10.**(src_nufnu+11)  - $factor*10.**(ref_nufnu+11)) - 11
  	    set erraux = sqrt(err_src_ratio**2. + ($factor*err_ref_ratio)**2)

	    set errbbb_u =  lg(1 + erraux/src_ratio)
	    set errbbb_d = -lg(1 - erraux/src_ratio)

	}


	#
	# go-ahead
	#
	location 6000 30000 6000 30000
	expand 1.5
	ctype 2 

	define whatx ? {Energy [1] of Frequency [2] X-Axis ?}
	if($whatx == 2) {
	    define xmin 16.1 
	    define xmax 19.7
	    define tick  0
	    define lab_x "log(\\nu)"

	    set xl  = lkev + 17.383
	    set aaa = xl 
	} else {
	    define xmin -1.1
	    define xmax  1.3
	    define tick  -1
	    define lab_x "Energy [keV]"

	    set xl  = lkev
	    set aaa = xl 
	}

	define whaty ? {F_nu [1] of nu_F_nu [2] Y-Axis ?}
	if($whaty == 1) {
	    define ymin -3.9
	    define ymax  0.1 
	    define lab_y "log(F_\\nu) [erg/cm^2/s/Hz]"

	    set yl  = lg(spec)
	    set bbb = yl
	} else {
	    define ymin -10.5
	    define ymax  -9.2
	    define lab_y "log(\\nu F_\\nu) [erg/cm^2/s]"

	    set yl  = nufnu
	    set bbb = yl
	}

	limits $xmin $xmax $ymin $ymax 
	ticksize $tick 0 0 0 
	expand 1.5
	box 
	ylabel $lab_y
	expand 2
	xlabel $lab_x

	echo *** ----------------------
	echo *** PLOT Options :
	echo    [1] B/W
	echo    [2] Ptype/Ctype
	echo    [3] Ctype/Ctype
	define come ? { Your choice ? }

	if($come == 1){
	   ctype 2
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1
	   expand 1.6
	   ctype 1
	   ptype 20 3 
	   points   aaa bbb
	   ctype 2 
	   expand 2.0
	   ptype 20 0 
	   points   aaa bbb

	   define cty1 2
	   define cty2 2

	}

	if($come == 2) {
	   define pty ? { Give the code for PTYPE [#1 #2] : }
	   define cty ? { Give the code for CTYPE [#1] : }

	   define cty1 $cty
	   define cty2 $cty

	   ptype $pty
	   ctype $cty
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1
	   expand 1.6
	   # ctype 1
	   # ptype 20 3 
	   points   aaa bbb
	   # ctype 2 
	   # expand 2.0
	   # ptype 20 0 
	   # points   aaa bbb
	}

	if($come == 3) {
	   echo -----------------------------------------
	   define cty1 ? { Give the code for CTYPE [border] : }
	   define cty2 ? { Give the code for CTYPE [inside] : }
	   echo -----------------------------------------

	   ctype $cty1
	   expand 1.5
	   errorbar aaa bbb errbbb_u 2 
	   errorbar aaa bbb errbbb_d 4 
	   errorbar aaa bbb dx_d     3
	   errorbar aaa bbb dx_u     1

	   expand 2.0
	   ctype $cty1
	   ptype 20 3 
	   points   aaa bbb

	   expand 1.5
	   ctype $cty2
	   ptype 20 3 
	   points   aaa bbb

	   expand 1.7
	   lweight 1.5
	   ctype $cty1
	   ptype 20 0 
	   points   aaa bbb
	}

	define plotlines ? { Plot Best fit models ? [y/n] }
	if(substr('$plotlines',0,1) == 'y') {
	    ctype 4 
	    lweight 4
	    if ( $whaty == 1 ) { 
	       ltype 5 connect lkev (lg($factor) + ref_eufs)
	       ltype 2 connect lkev src_eufs
	       ltype 1 connect lkev eufs
	       ltype 0
	    }
	    if ( $whaty == 2 ) { 
	       ltype 5 connect lkev (lg($factor) + ref_enufnu)
	       ltype 2 connect lkev src_enufnu
	       ltype 1 connect lkev enufnu
	       ltype 0
	    }
	    lweight 1.5
	}

	define plotlab ? { Label ? [y/n] }
	if(substr('$plotlab',0,1) == 'y') { 
	  echo -----------------------------------------
	  define order ? { Which position from the Bottom ? }

	  relocate ( $($gx1 + 1500) $($gy1 + 1500 + 1500*$order) ) 
	  expand 2.0
	  ctype $cty1
	  ptype 20 3 
	  dot

	  expand 1.2
	  ctype $cty2
	  ptype 20 3 
	  dot

	  expand 2.0
	  lweight 1.5
	  ctype $cty1
	  ptype 20 0 
	  dot

	  define labtxt ? { TEXT of Label : }

	  ctype $cty2
	  relocate ( $($gx1 + 2250) $($gy1 + 1450 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5

	  ctype $cty1
	  relocate ( $($gx1 + 2200) $($gy1 + 1500 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5
	}

	## ctype 2 
	## expand 1.5
   	## relocate (18000 30750)
	## putlabel 5 May 2 and May 4, LECS+MECS+PDS

	lweight 3

#---------------------------------------------------------------------------
# ratio_97_98
ratio_97_98

	define anno ? { Which year 1997, or 1998 ? }

	if ( $anno == 1997 ) { 
	  set all_pointings_vec = { a b c d e f g h i l m n o p q r }
	  set sub_pointings_vec = {   b c d e f g h i l m n o p q r }
	  define datasetdir "/neutronstar/gf/SAX/mkn421/1997/ALL/Test/Plots"
	  echo $datasetdir
	}

	if ( $anno == 1998 ) { 

          set all_pointings_vec = { low_1_2 \
				    low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

          set sub_pointings_vec = { low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

	  define datasetdir "/neutronstar/gf/SAX/mkn421/1998/Test/Plots"
	  echo $datasetdir
	}

	echo ----------------------------------------------
	echo  The processed MODELS are:
	echo  [1] Single Power Law Nh free/frozen
	echo  [2] Broken Power Law Nh free/frozen
	echo  [3] Curved Model fold=0.5/1/2/3/free
	echo  
	define model    ? { Which Model ? [pl/bkn/curved] }

	define ndata (60)

	if ( '$model' == '1' || '$model' == 'pl') {
	    if ( $anno == 1997 ) { define name1 "pow" }
	    if ( $anno == 1998 ) { define name1 "pow_" }

	    define aux ? { Nh FREE [1] or FROZEN [2] ? }
	    if ( $aux == 1 || substr('$aux',0,1) == 'f' ) {
	       define name2 "pl"
	       define dof   ($ndata - 2)
	    } else {
	       define name2 "pl_nh"
	       define dof   ($ndata - 1)
	    }
	}

	if ( '$model' == '2' || '$model' == 'bkn') {
	    if ( $anno == 1997 ) { define name1 "pow" }
	    if ( $anno == 1998 ) { define name1 "pow_" }

	    define aux ? { Nh FREE [1] or FROZEN [2] ? }
	    if ( $aux == 1 || substr('$aux',0,1) == 'f' ) {
	       define name2 "bkn"
	       define dof   ($ndata - 4)
	    } else {
	       define name2 "bkn_nh"
	       define dof   ($ndata - 3)
	    }
	}

	if ( '$model' == '3' || '$model' == 'curved') {
	    define quali ? { Which set of Fit parameters ? [top/sub05/sub075] }

	    if ( $anno == 1997 ) { define name1 "top" }
            if ( $anno == 1998 && '$quali' == 'top' )    { define name1 "top_"    }
            if ( $anno == 1998 && '$quali' == 'sub05' )  { define name1 "sub05_"  }
            if ( $anno == 1998 && '$quali' == 'sub075' ) { define name1 "sub075_" }

	    define aux ? { Which value of fold parameter [0.5/1/2/3/free] ? }

	    if ( $aux == 0.5   )   { define name2 ( sprintf('%s','05'))}
	    if ( $aux == 1     )   { define name2 "1"  }
	    if ( $aux == 2     )   { define name2 "2"  }
	    if ( $aux == 3     )   { define name2 "3"  }
	    if ( substr('$aux',0,1) == 'f') { 
		define name2 "fa" 
		define dof   ($ndata - 4)
	    } else {
		define dof   ($ndata - 3)
	    }
	}

	define 1 $(all_pointings_vec[0])
	define nameaux1  eufs_"$!name1"$1
	define nameaux2  "$!nameaux1"_$!name2
	define namename "$!nameaux2.qdp.clean"

	data "$!datasetdir/$!namename"
	read { kev 1 dkev 2 }

	foreach 1 all_pointings_vec {
	   define nameaux1 ratio_"$!name1"$1
	   define nameaux2 "$!nameaux1"_$!name2
	   define namename "$!nameaux2.qdp.clean"

	   data "$!datasetdir/$!namename"
	   read { ratio 3 err_ratio 4}

	   define nameaux1 delete
	   define nameaux2 delete
	   define namename delete

	   set ratio_$1     = ratio
	   set err_ratio_$1 = err_ratio

	   set lkev = lg(kev)
	
	}

	define chitot (0)
	define doftot (0)

	foreach 1 all_pointings_vec {
	   set chi_$1 = (ratio_$1 - 1)**2/err_ratio_$1/err_ratio_$1
	   define CHI_$1    (sum(chi_$1))

	   define chitot ($chitot + $CHI_$1)
	   define doftot ($doftot + $dof)

	   define CHIred_$1 ($CHI_$1/$dof)
	   define CHI_$1    ( sprintf('%9.4f',$CHI_$1) )
	   define CHIred_$1 ( sprintf('%6.3f',$CHIred_$1) )
	   define sigla     ( sprintf('%12s','$1') ) 
	   echo [$sigla] Chi^2 = $CHIred_$1 ($CHI_$1/$dof)
	}

	delete ratio
	delete err_ratio
	define sigla delete

	#-----------------------------------

	echo ----------------------------------------------
	define peso ? { WEIGHTED or PLAIN averaging of the Ratios ? [1/2] }

	if ( '$peso' == '1' || '$peso' == 'w' ) { 
	    foreach 1 all_pointings_vec {
		set weight_$1 = 1/err_ratio_$1/err_ratio_$1
	    }
	} else {
	    foreach 1 all_pointings_vec {
		set weight_$1 = 1 + ratio_$1*0.0
	    }
	}

	#-----------------------------------
	set ratio     = ratio_$(all_pointings_vec[0])
	set norm      = weight_$(all_pointings_vec[0])
	set err_ratio = err_ratio_$(all_pointings_vec[0])

	foreach 1 sub_pointings_vec {
	   set ratio     = ratio + ratio_$1*weight_$1
	   set norm      = norm + weight_$1
	   set err_ratio = err_ratio + (weight_$1*err_ratio_$1)**2.
	}

	set ratio     = ratio/norm
	set err_ratio = sqrt(err_ratio)/norm

	set chi = (ratio - 1)**2/err_ratio/err_ratio
	define CHI    (sum(chi))
	define CHIred ($CHI/$dof)
	define CHI    ( sprintf('%9.3f',$CHI) )
	define CHIred ( sprintf('%8.4f',$CHIred) )

	define chitotr  ($chitot/$doftot)

	define fchitot  ( sprintf('%9.3f',$chitot) ) 
	define fchitotr ( sprintf('%8.4f',$chitotr) ) 

	echo ---------------------------------------------
	echo [avrg]  Chi^2 = $CHIred ($CHI/$dof)
	echo [total] Chi^2 = $fchitotr ($fchitot/$doftot)       
	echo ---------------------------------------------

	location 6000 30000 6000 30000
	expand 1.5
	lweight 3
	ctype 2 

	define xmin -1.1
	define xmax  1.3
	define lab_x "Energy [keV]"

	define ymin  ? { Minimum RATIO ? }
	define ymax (2-$ymin)
	define ymax  ? { Maximum RATIO ? }
	define lab_y "Data/Model Ratio"

	limits $xmin $xmax $ymin $ymax 
	ticksize -1 0 0 0 
	expand 1.5
	box 
	ylabel $lab_y
	expand 2
	xlabel $lab_x

	ltype 2
	ctype 3 
	relocate -2 1
	draw      2 1 
	ltype 0
	ctype 2
	

	echo *** ----------------------
	echo *** PLOT Options :
	echo    [1] B/W
	echo    [2] Ptype/Ctype
	echo    [3] Ctype/Ctype
	define come ? { Your choice ? }

	if($come == 1){
	   ctype 2
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4
	   expand 1.6
	   ctype 1
	   ptype 20 3 
	   points   lkev ratio
	   ctype 2 
	   expand 2.0
	   ptype 20 0 
	   points   lkev ratio
	   define cty1 2
	   define cty2 2
	}

	if($come == 2) {
	   define pty ? { Give the code for PTYPE [#1 #2] : }
	   define cty ? { Give the code for CTYPE [#1] : }

	   define cty1 $cty
	   define cty2 2
	   ptype $pty
	   ctype $cty
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4
	   expand 1.6
	   points   lkev ratio
	}

	if($come == 3) {
	   echo -----------------------------------------
	   define cty1 ? { Give the code for CTYPE [border] : }
	   define cty2 ? { Give the code for CTYPE [inside] : }
	   echo -----------------------------------------

	   ctype $cty1
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4

	   expand 2.0
	   ctype $cty1
	   ptype 20 3 
	   points   lkev ratio

	   expand 1.5
	   ctype $cty2
	   ptype 20 3 
	   points   lkev ratio

	   expand 1.7
	   lweight 1.5
	   ctype $cty1
	   ptype 20 0 
	   points   lkev ratio
	}

	define plotlab ? { Label ? [y/n] }
	if(substr('$plotlab',0,1) == 'y') { 
	  echo -----------------------------------------
	  define order ? { Which position from the Bottom ? }

	  relocate ( $($gx1 + 1500) $($gy1 + 1500 + 1500*$order) ) 
	  expand 2.0
	  ctype $cty1
	  ptype 20 3 
	  dot

	  expand 1.2
	  ctype $cty2
	  ptype 20 3 
	  dot

	  expand 2.0
	  lweight 1.5
	  ctype $cty1
	  ptype 20 0 
	  dot

	  define labtxt ? { TEXT of Label : }

	  ctype $cty2
	  relocate ( $($gx1 + 2250) $($gy1 + 1450 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5

	  ctype $cty1
	  relocate ( $($gx1 + 2200) $($gy1 + 1500 + 1500*$order) ) 
	  expand 1.3
	  putlabel 6 $labtxt
	  expand 1.5
	}

	ctype 2 
	ltype 0
	lweight 3

	define renordel ? { Rename [1] or Delete [2] Product Vectors ? }
	if ( $renordel == 1 ) {
	    define sufname ? { Which name suffix ? }
	    set ratio_$sufname     = ratio
	    set err_ratio_$sufname = err_ratio
	    set kev_$sufname       = kev
	    set lkev_$sufname      = lkev
	}

	if ( $renordel == 2 ) {
	   foreach vec { norm ratio err_ratio kev lkev dkev } {
	       delete $vec
	   }
	   foreach 1 all_pointings_vec {
	       delete ratio_$1
	       delete err_ratio_$1
	       delete weight_$1
	       delete chi_$1
	       define CHI_$1 delete
	       define chitot   delete
	       define fchitot  delete
	       define chitotr  delete
	       define fchitotr delete
	       define doftot   delete
	   }

	}

#---------------------------------------------------------------------------
# ratio_98_paper
ratio_98_paper

	define anno 1998
	define anno ? { Which year 1997, or 1998 ? }

	if ( $anno == 1997 ) { 
	  set all_pointings_vec = { a b c d e f g h i l m n o p q r }
	  set sub_pointings_vec = {   b c d e f g h i l m n o p q r }
	  define datasetdir "/neutronstar/gf/SAX/mkn421/1997/ALL/Test/Plots"
	  echo $datasetdir
	}

	if ( $anno == 1998 ) { 

	  define whichstr ? { Which spectra of 1998 [give sequence number] ? }
	  set whichvec = < $!whichstr >

          set all_pointings_vec = { low_1_2 \
				    low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

          set sub_pointings_vec = { low_3 \
				    top1_4 \
				    top2_5 \
				    after_6 \
				    after_7 \
				    after_8_9 \
				    after_10_12 \
				    after_13_16 \
				    april23_1 \
				    april23_2 \
				    april23_3 }

	  define j (0)
	  define namestr " "
	  define namestrsub " "
	  foreach i whichvec {
	     define namestr < $namestr $(all_pointings_vec[$i]) >
	     if( $j > 0 ) {
	         define namestrsub < $namestrsub $(all_pointings_vec[$i]) >
	     }
	     define j ($j+1)
	  }

	  define datasetdir "/neutronstar/gf/SAX/mkn421/1998/Test/Plots"
	  echo $datasetdir

	  if ( $j > 0 ) {
	     set all_pointings_vec = < $!namestr >
	     set sub_pointings_vec = < $!namestrsub >
	  }
	}

	echo ----------------------------------------------
	define fivesix ? { Five or Six boxes [5/6] ? }
	echo ----------------------------------------------
	define peso ? { WEIGHTED or PLAIN averaging of the Ratios ? [1/2] }

	define ymin  ? { Minimum RATIO ? }
	define ymax (2-$ymin)
	define ymax  ? { Maximum RATIO ? }

	echo *** ----------------------
	echo *** PLOT Options :
	echo    [1] B/W
	echo    [2] Ptype/Ctype
	echo    [3] Ctype/Ctype
	define come ? { Your choice ? }

	define xmin -1.1
	define xmax  1.3
	# define xmax  $(lg(42))
	define lab_x "Energy [keV]"

	window 1 1 1 1
	define x1loc  8000
	define x2loc 28000
	define y1loc  5000
	define y2loc 31000
	location $x1loc $x2loc $y1loc $y2loc

	define count (0)

	if( $fivesix == 5 ) { 
	   set model_vec = < curved bkn bkn pl pl >
	   set aux_vec   = <      1   1   2  1  2 > 
	   set labvec    = <      e   d   c  b  a >
	}
	if( $fivesix == 6 ) { 
	   set model_vec = < curved curved bkn bkn pl pl >
	   set aux_vec   = <      1      2   1   2  1  2 > 
	   set labvec    = <      f      e   d   c  b  a >
	}

	# foreach model < pl bkn curved > {

	#---- big loop on the windows ---------------------------
	#
	do k=0,$($fivesix-1) {

	define model $(model_vec[$k])
	define aux   $(aux_vec[$k])

	echo $model
	echo $aux

	define count $($count+1)
	window 1 -$fivesix 1 $count

	# echo ----------------------------------------------
	# echo  The processed MODELS are:
	# echo  [1] Single Power Law Nh free/frozen
	# echo  [2] Broken Power Law Nh free/frozen
	# echo  [3] Curved Model fold=0.5/1/2/3/free
	# echo  
	# define model    ? { Which Model ? [pl/bkn/curved] }

	if ( '$model' == '1' || '$model' == 'pl') {
	    if ( $anno == 1997 ) { define name1 "pow" }
	    if ( $anno == 1998 ) { define name1 "pow_" }

	    if ( $aux == 1 ) {
	       define name2 "pl"
	    } else {
	       define name2 "pl_nh"
	    }
	}

	if ( '$model' == '2' || '$model' == 'bkn') {
	    if ( $anno == 1997 ) { define name1 "pow" }
	    if ( $anno == 1998 ) { define name1 "pow_" }

	    if ( $aux == 1 ) {
	       define name2 "bkn"
	    } else {
	       define name2 "bkn_nh"
	    }
	}

	if ( '$model' == '3' || '$model' == 'curved') {
	    if ( $anno == 1997 ) { 
		 # define name1 "top"   
		 # define name2 "1" 
	      if ( $aux == 1 ) {
	         define name1 "abs_"  
		 define name2 "nh1" 
	      }
	      if ( $aux == 2 ) {
	         define name1 "top"  
		 define name2 "1" 
	      }
	    }
            if ( $anno == 1998 ) { 
	      if ( $aux == 1 ) {
	         define name1 "top_"  
		 define name2 "nh1" 
		 # define name2 "pds" 
	      }
	      if ( $aux == 2 ) {
	         define name1 "top_"  
		 define name2 "2" 
	      }
	    }
	}

	#---------------------------------------------
	# reads data
	#
	define 1 $(all_pointings_vec[0])
	define nameaux1  eufs_"$!name1"$1
	define nameaux2  "$!nameaux1"_$!name2
	define namename "$!nameaux2.qdp.clean"

	data "$!datasetdir/$!namename"
	read { kev 1 dkev 2 }

	foreach 1 all_pointings_vec {
	   define nameaux1 ratio_"$!name1"$1
	   define nameaux2 "$!nameaux1"_$!name2
	   define namename "$!nameaux2.qdp.clean"

	   data "$!datasetdir/$!namename"
	   read { ratio 3 err_ratio 4}

	   define nameaux1 delete
	   define nameaux2 delete
	   define namename delete

	   set ratio_$1     = ratio
	   set err_ratio_$1 = err_ratio

	   set lkev = lg(kev)
	}

	delete ratio
	delete err_ratio

	#-----------------------------------


	if ( '$peso' == '1' || '$peso' == 'w' ) { 
	    foreach 1 all_pointings_vec {
		set weight_$1 = 1/err_ratio_$1/err_ratio_$1
	    }
	} else {
	    foreach 1 all_pointings_vec {
		set weight_$1 = 1 + ratio_$1*0.0
	    }
	}

	#-----------------------------------
	set ratio     = ratio_$(all_pointings_vec[0])
	set norm      = weight_$(all_pointings_vec[0])
	set err_ratio = err_ratio_$(all_pointings_vec[0])

	foreach 1 sub_pointings_vec {
	   set ratio     = ratio     + ratio_$1*weight_$1
	   set norm      = norm      + weight_$1
	   set err_ratio = err_ratio + (weight_$1*err_ratio_$1)**2.
	}

	set ratio     = ratio/norm
	set err_ratio = sqrt(err_ratio)/norm

	expand 1.5
	lweight 3
	ctype 2 

	limits $xmin $xmax $ymin $ymax 
	ticksize -1 0 0 0 
	expand 1.5
	if($count == 1) { 
	   box 1 2 0 0 
	   expand 2
	   xlabel $lab_x
	} else {
	   box 0 2 0 0 
	}

	ltype 2
	ctype 3 
	relocate -2 1
	draw      2 1 
	ltype 0
	ctype 2
	
	if($come == 1){
	   ctype 2
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4
	   expand 1.6
	   ctype 1
	   ptype 20 3 
	   points   lkev ratio
	   ctype 2 
	   expand 2.0
	   ptype 20 0 
	   points   lkev ratio
	   define cty1 2
	   define cty2 2
	}

	if($come == 2) {
	   # define pty ? { Give the code for PTYPE [#1 #2] : }
	   # define cty ? { Give the code for CTYPE [#1] : }
	   define pty "4 3"
	   define cty 2

	   define cty1 $cty
	   define cty2 2
	   ptype $pty
	   ctype $cty
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4
	   expand 1.6
	   points   lkev ratio
	}

	if($come == 3) {
	   echo -----------------------------------------
	   define cty1 ? { Give the code for CTYPE [border] : }
	   define cty2 ? { Give the code for CTYPE [inside] : }
	   echo -----------------------------------------

	   ctype $cty1
	   expand 1.5
	   errorbar lkev ratio err_ratio 2 
	   errorbar lkev ratio err_ratio 4

	   expand 2.0
	   ctype $cty1
	   ptype 20 3 
	   points   lkev ratio

	   expand 1.5
	   ctype $cty2
	   ptype 20 3 
	   points   lkev ratio

	   expand 1.7
	   lweight 1.5
	   ctype $cty1
	   ptype 20 0 
	   points   lkev ratio
	}

	define tmplab $(labvec[$k])
	relocate ( $($gx2 + 1500) $(0.5*($gy1 + $gy2)) )
	expand 2.5
	putlabel 5 ($tmplab)
	# define plotlab ? { Label ? [y/n] }
	# if(substr('$plotlab',0,1) == 'y') { 
	#   echo -----------------------------------------
	#   define order ? { Which position from the Bottom ? }

	#   relocate ( $($gx1 + 1500) $($gy1 + 1500 + 1500*$order) ) 
	#   expand 2.0
	#   ctype $cty1
	#   ptype 20 3 
	#   dot

	#   expand 1.2
	#   ctype $cty2
	#   ptype 20 3 
	#   dot

	#   expand 2.0
	#   lweight 1.5
	#   ctype $cty1
	#   ptype 20 0 
	#   dot

	#   define labtxt ? { TEXT of Label : }

	#   ctype $cty2
	#   relocate ( $($gx1 + 2250) $($gy1 + 1450 + 1500*$order) ) 
	#   expand 1.3
	#   putlabel 6 $labtxt
	#   expand 1.5

	#   ctype $cty1
	#   relocate ( $($gx1 + 2200) $($gy1 + 1500 + 1500*$order) ) 
	#   expand 1.3
	#   putlabel 6 $labtxt
	#   expand 1.5
 	# }

	ctype 2 
	ltype 0
	lweight 3

	define renordel 2
	# define renordel ? { Rename [1] or Delete [2] Product Vectors ? }
	if ( $renordel == 1 ) {
	    define sufname ? { Which name suffix ? }
	    set ratio_$sufname     = ratio
	    set err_ratio_$sufname = err_ratio
	    set kev_$sufname       = kev
	    set lkev_$sufname      = lkev
	}

	if ( $renordel == 2 ) {
	   foreach vec { norm ratio err_ratio kev lkev dkev } {
	       delete $vec
	   }
	   foreach 1 all_pointings_vec {
	       delete ratio_$1
	       delete err_ratio_$1
	       delete weight_$1
	       delete chi_$1
	       define CHI_$1 delete
	       define chitot   delete
	       define fchitot  delete
	       define chitotr  delete
	       define fchitotr delete
	       define doftot   delete
	   }

	}

	}
	#___ end of big loop on windows ________________________

	relocate ( $($x1loc-3500) $(($y1loc+$y2loc)/2) )
	angle 90
	expand 2.0
	putlabel 5 Data/Model Ratio
	angle 0

	window 1 1 1 1

#---------------------------------------------------------------------------
