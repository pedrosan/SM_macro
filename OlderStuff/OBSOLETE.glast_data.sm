#===============================================================================
# read_fermi_bright
read_fermi_bright

	data "/home/gfossati/Science/Fermi/bright_source_list/fermi_bright_source_list.dat"
	read < ts 3 >
	read < fa 4 efa 5 tsa 6 >
	read < fb 7 efb 8 tsb 9 >
	read < lat_classn_all 12 >

	set flag_ul_a = 0*ts
	set flag_ul_b = 0*ts
	do 9=1,dimen(ts)-1 {
	   if( efa[$9] == 1 ) { 
	       set flag_ul_a[$9] = 1 
	       set efa[$9] = 2*fa[$9]
	   }
	   if( efb[$9] == 1 ) { 
	       set flag_ul_b[$9] = 1 
	       set efb[$9] = 2*fb[$9]
	   }
	}
	set snra = fa/efa
	set snrb = fb/efb

	foreach 9 < ts fa efa tsa fb efb tsb flag_ul_a flag_ul_b snra snrb > {
	   set $9 = $9  if( lat_classn_all >= 0 )
	}
	set lat_classn = lat_classn_all  if( lat_classn_all >= 0 )
	set lat_ratio = fa/fb
	set e_lat_ratio = lat_ratio*sqrt((1.0/snra)**2.0 + (1.0/snrb)**2.0)
	set snr_ratio = lat_ratio/e_lat_ratio

	# compute_lat_flux_ratio_model
	compute_lat_flux_ratio_model_bkn
	set ratio_1 = ratio_bkn
	compute_lat_flux_ratio_model_bkn
	set ratio_2 = ratio_bkn

	if( ratio_1[$(dimen(ratio_1)-1)]  >= ratio_2[$(dimen(ratio_1)-1)] ) {
	   set ratio_high = ratio_1
	   set ratio_low  = ratio_2
	} else {
	   set ratio_high = ratio_2
	   set ratio_low  = ratio_1
	}
	delete ratio_1 
	delete ratio_2 

	set dimen(lat_gamma_low)  = dimen(ts)
	set dimen(lat_gamma_high) = dimen(ts)

	#-----------------------------------------------------------
	# finds Gamma corresponding to each source flux ratio
	#-----------------------------------------------------------
	do 9=0,dimen(ts)-1 { 
	   set test1 = ratio_low - $(lat_ratio[$9])
	   set test1 = abs(test1)
	   set test2 = Gamma
	   sort < test1 test2 >
	   set lat_gamma_high[$9] = $(test2[0])
	}
	do 9=0,dimen(ts)-1 { 
	   set test1 = ratio_high - $(lat_ratio[$9])
	   set test1 = abs(test1)
	   set test2 = Gamma
	   sort < test1 test2 >
	   set lat_gamma_low[$9] = $(test2[0])
	}
	#-----------------------------------------------------------

#-------------------------------------------------------------------------------
# plot_lat_Gamma_histo_guess
plot_lat_Gamma_histo_guess

	define which_histo ? < Which Gamma values [low|high] : >
        define hxstep      ? < Step for histogram [e.g. 0.2] : >

	if( substr('$which_histo',0,1) == 'l' ) {
	   set lat_gamma = lat_gamma_low
	} else {
	   set lat_gamma = lat_gamma_high
	}

        set hx = 0.0-2*$hxstep,4.0,$hxstep
        set hx = hx - 0.5*$hxstep

	set y_0 = lat_gamma  if( lat_classn == 0 )
	set y_1 = lat_gamma  if( lat_classn == 1 )
	set y_2 = lat_gamma  if( lat_classn == 2 )
	set y_3 = lat_gamma  if( lat_classn == 3 )

	set hy_0 = histogram(y_0:hx)
	set hy_1 = histogram(y_1:hx)
	set hy_2 = histogram(y_2:hx)
	set hy_3 = histogram(y_3:hx)

	set hy_test = hy_0 CONCAT hy_1 CONCAT hy_2 CONCAT hy_3
	vecminmax hy_test dummy hytop

	reset_graph

	limits 0.9 3.1 -1 $(1.1*$hytop)
	ticksize 0 0 0 0 
	box
	xlabel \Gamma
	ylabel N

	define hdx (0.01)
	ctype 4 
	lweight 3
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_0
	ltype 0       histogram (hx - 1.0*$hdx) hy_0    
	ctype 5 
	lweight 5
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_1
	ltype 0       histogram (hx + 0.0*$hdx) hy_1
	ctype 3 
	lweight 5
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_2
	ltype 0       histogram (hx + 1.0*$hdx) hy_2
	ctype 6 
	lweight 3
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_3
	ltype 0       histogram (hx + 1.5*$hdx) hy_3

	lweight 3 
	define labsep (1000)
	relocate ( $($gx1+500) $($gy2 - 1.0*$labsep) ) ctype 5 putlabel 6 BLL
	relocate ( $($gx1+500) $($gy2 - 2.0*$labsep) ) ctype 3 putlabel 6 FSRQ
	relocate ( $($gx1+500) $($gy2 - 3.0*$labsep) ) ctype 4 putlabel 6 RG
	relocate ( $($gx1+500) $($gy2 - 4.0*$labsep) ) ctype 6 putlabel 6 unk.

#-------------------------------------------------------------------------------
# compute_lat_flux_ratio_model
compute_lat_flux_ratio_model

	echo " Computing flux ratio for simple power law "
	echo "  + assuming spectral break occurs at band separation, i.e. @1 GeV"

	#--- preset values ---#
	define xa1 (0.1)
	define xa2 (1.0)
	define xb1 (1.0)
	define xb2 (100.0)
	define flag_lim (1)
	#
	define xa1 (0.3)
	define xa2 (1.0)
	define xb1 (1.0)
	define xb2 (300.0)
	define flag_lim (2)

	echo "------------------------------------------------------------"
	echo " Energy bands boundaries : "$xa1"-"$xa2" , "$xb1"-"$xb2
	echo "------------------------------------------------------------"

	set Gamma = 1.001,3.002,0.01

	define dGamma ? < delta_Gamma between low and high branches : >

	set Gamma_low  = Gamma
	set Gamma_high = Gamma_low + $dGamma

	set f_low  = 1.0/(Gamma_low - 1)*$xa1**(1.0 - Gamma_low)*(1.0 - ($xa1/$xa2)**(Gamma_low - 1.0))
	set f_high = 1.0/(Gamma_high - 1)*$xb1**(1.0 - Gamma_high)*(1.0 - ($xb1/$xb2)**(Gamma_high - 1.0))

	set ratio = f_low/f_high
	# set ratio = ($xa1/$xb1)**(1.0 - Gamma)*(1.0 - ($xa1/$xa2)**(Gamma - 1.0))/(1.0 - ($xb1/$xb2)**(Gamma - 1.0))

	define ratio_G1 $(ln($xa2/$xa1)/ln($xb2/$xb1))
	
# compute_lat_flux_ratio_model_bkn
compute_lat_flux_ratio_model_bkn

	echo " Computing flux ratio for bkn power law "
	echo "  + Takes variable energy for spectral break "

	#--- preset values ---#
	define xa1 (0.1)
	define xa2 (1.0)
	define xb1 (1.0)
	define xb2 (100.0)
	define flag_lim (1)
	#
	define xa1 (0.3)
	define xa2 (1.0)
	define xb1 (1.0)
	define xb2 (300.0)
	define flag_lim (2)

	echo "------------------------------------------------------------"
	echo " Energy bands boundaries : "$xa1"-"$xa2" , "$xb1"-"$xb2
	echo "------------------------------------------------------------"

	set Gamma = 1.001,3.002,0.01

	define xb     ? <                Break energy [GeV 0.1-100] : >
	define dGamma ? < delta_Gamma between low and high branches : >

	set Gamma_low  = Gamma
	set Gamma_high = Gamma_low + $dGamma

	define xa1r $($xa1/$xb)
	define xa2r $($xa2/$xb)
	define xb1r $($xb1/$xb)
	define xb2r $($xb2/$xb)

	#---------------------------------------
	# F_low
	#---------------------------------------
	if( $xa2r <= 1 ) { 
	   set f_low  = 1.0/(Gamma_low - 1)*$xa1r**(1.0 - Gamma_low)*(1.0 - ($xa2r/$xa1r)**(1.0 - Gamma_low))
	}
	if( $xa1r <= 1 && $xa2r > 1 ) { 
	   set f_low  = 1.0/(Gamma_low - 1)*($xa1r**(1.0 - Gamma_low) - 1.0) + 1.0/(Gamma_high - 1)*(1.0 - $xa2r**(1.0 - Gamma_high))
	}
	if( $xa1r >  1 ) { 
	   set f_low  = 1.0/(Gamma_high - 1)*$xa1r**(1.0 - Gamma_high)*(1.0 - ($xa2r/$xa1r)**(1.0 - Gamma_high))
	}

	#---------------------------------------
	# F_high
	#---------------------------------------
	if( $xb2r <= 1 ) { 
	   set f_high  = 1.0/(Gamma_low - 1)*$xb1r**(1.0 - Gamma_low)*(1.0 - ($xb2r/$xb1r)**(1.0 - Gamma_low))
	}
	if( $xb1r <= 1 && $xb2r > 1 ) { 
	   set f_high  = 1.0/(Gamma_low - 1)*($xb1r**(1.0 - Gamma_low) - 1.0) + 1.0/(Gamma_high - 1)*(1.0 - $xb2r**(1.0 - Gamma_high))
	}
	if( $xb1r >  1 ) { 
	   set f_high  = 1.0/(Gamma_high - 1)*$xb1r**(1.0 - Gamma_high)*(1.0 - ($xb2r/$xb1r)**(1.0 - Gamma_high))
	}

	# set f_high = 1.0/(Gamma_high - 1)*$xb1**(1.0 - Gamma_high)*(1.0 - ($xb1/$xb2)**(Gamma_high - 1.0))

	set ratio_bkn = f_low/f_high
	# set ratio = ($xa1/$xb1)**(1.0 - Gamma)*(1.0 - ($xa1/$xa2)**(Gamma - 1.0))/(1.0 - ($xb1/$xb2)**(Gamma - 1.0))

	define ratio_G1 $(ln($xa2r/$xa1r)/ln($xb2r/$xb1r))
	
# plot_lat_flux_ratio_model
plot_lat_flux_ratio_model

	reset_graph

        compute_lat_flux_ratio_model
        compute_lat_flux_ratio_model_bkn

	ticksize 0 0 0 0 
	limits 0.9 3.1 ratio
	if( $flag_lim == 1 ) { limits 0.9 3.1 -5 105 }
	if( $flag_lim == 2 ) { limits 0.9 3.1 -1  17 }
	box
	xlabel \Gamma
	ylabel F_{[$xa1-$xa2 GeV]}/F_{[$xb1-$xb2 GeV]}
	# ylabel F_{[0.1-1 GeV]}/F_{[1-100 GeV]}

	ctype 3 
	connect Gamma ratio
	ctype 5 
	connect Gamma ratio_bkn
	ctype 2

#===============================================================================
# read_fermi_agn
read_fermi_agn

	data "/home/gfossati/Science/Fermi/bright_source_list/agn_tab3_sorted.dat"
	read < flag_conf 3 sqrtTS 8 flag_variab 18.s >
	read < Gamma 9 err_Gamma 10 f100 11 err_f100 12  fpeak 13 err_fpeak 14 f25 15 err_f25 16 flag_f25 17 >
	set alpha_g = Gamma - 1

	set lg_l_gamma_fudge = 4.0*(abs(1.0 - alpha_g))

	foreach 9 < f100 err_f100 f25 err_f25 fpeak > {
	   set $9 = $9/1.0e8
	}

	data "/home/gfossati/Science/Fermi/bright_source_list/agn_more_data.dat"
	read < redshift 4 fr84 9 magR 11 extR 12 >
	set flag_fr84 = redshift*0 + 1
	set flag_magR = redshift*0 + 1
	do 9=0,dimen(fr84)-1 {
	   if( fr84[$9] < 0.0 ) { 
	      set flag_fr84[$9] = 0 
	      set fr84[$9]      = 1e-20
	   }
	   if( magR[$9] <= 0.0 ) { 
	      set flag_magR[$9] = 0 
	      set magR[$9]      = 40
	   } else {
	      set magR[$9]      = magR[$9] - extR[$9]
	   }
	}
	set lg_fr84  = lg(fr84) - 26 
	set lg_nfr84 = lg(fr84) - 26 + lg(8.4e9)

	set lg_f_magR  = lg(3010.0) -0.4*magR - 23.0
	set lg_nf_magR = lg_f_magR + 14.632

	set a_RO = (lg_fr84 - lg_f_magR)/(14.632 - lg(8.4e9))

	data "/home/gfossati/Science/Fermi/bright_source_list/agn_associations_sorted.dat"
	read < flag_confb 3 redshift 4 classs 5.s classn 6 >

	set flag_z = redshift*0 + 1
	do 9=0,dimen(f100)-1 {
	   if( redshift[$9] > 10 )  { set flag_z[$9]  = 0 } 
	   if( alpha_g[$9] == 1.0 ) { set alpha_g[$9] = 1.0001 } 
	}

	data "/home/gfossati/Science/Fermi/bright_source_list/agn_from_bright_source_list.dat"
	read < sqrtTSb 3 fa 4 err_fa 5 tsa 6 fb 7 err_fb 8 tsb 9 classn_b 12 >

	set fab = fa + fb
	set ftest = flag_f25 ? fab : fb

	set flag_ul_a = 0*flag_conf
	set flag_ul_b = 0*flag_conf
	do 9=1,dimen(flag_conf)-1 {
	   if( err_fa[$9] == 1 ) { 
	       set flag_ul_a[$9] = 1 
	       # set err_fa[$9] = 2*fa[$9]
	   }
	   if( err_fb[$9] == 1 ) { 
	       set flag_ul_b[$9] = 1 
	       # set err_fb[$9] = 2*fb[$9]
	   }
	}

	set snra = fa/err_fa
	set snrb = fb/err_fb

	set lat_ratio = fa/fb
	set err_lat_ratio = lat_ratio*sqrt((1.0/snra)**2.0 + (1.0/snrb)**2.0)
	set snr_ratio = lat_ratio/err_lat_ratio

	lumdist_zvec redshift

	set flux = 1.602e-12*(1e8*f100)*alpha_g/(alpha_g - 1)*(1 - 10.0**(2*(1-alpha_g)))
	set err_flux = flux*err_f100/f100   # Cheat
	do 9=0,dimen(f100)-1 {
	   if( alpha_g[$9] == 1 ) { set flux[$9] = 7.38e-4*f100[$9] }
	}

	set flux_alt = 4.806e-12*(1e8*f100)*alpha_g/(alpha_g - 1)*(1 - 33.0**(1-alpha_g))/3.**alpha_g*(1+redshift)**(alpha_g-1)
	set err_flux_alt = flux_alt*err_f100/f100   # cheating, forcing same fractional error
	set lg_flux_alt = lg(flux_alt)

	set lg_l_gamma     = lg(4*3.1415) + 2*d_l_vec + lg(flux)
	set lg_l_gamma_alt = lg(4*3.1415) + 2*d_l_vec + lg(flux_alt)
	set l_gamma     = 10.0**lg_l_gamma
	set l_gamma_alt = 10.0**lg_l_gamma_alt
	set err_l_gamma = l_gamma*err_f100/f100
	set err_l_gamma_alt = l_gamma_alt*err_f100/f100

	set lg_l_r_84 = lg(4*3.1415) + 2*d_l_vec + lg_fr84 + lg(8.4e9)
	set lg_l_magR = lg(4*3.1415) + 2*d_l_vec + lg_nf_magR 

	set f100l = f100*(0.1/0.1)**alpha_g*(1 - (0.1/1)**alpha_g)
	set f100h = f100*(0.1/1.0)**alpha_g*(1 - (1.0/100.0)**alpha_g)
	
	set gdom = lg_flux_alt - lg_nfr84

#-------------------------------------------------------------------------------
# plot_ag_vs_lg
plot_ag_vs_lg

	reset_graph

	ticksize -1 0 0.1 0.5
	limits 43.2 49.8 0.1 2.1
	box
	expand 2
	xlabel L_{\gamma}  [erg/s]
	ylabel \alpha_\gamma
	expand 1.5

	foreach 9 < lg_l_gamma_alt alpha_g err_Gamma err_l_gamma_alt > {
	  foreach 8 < 0 1 2 3 > { 
	  set tmp$8_$9 local
	  set tmp$8_$9 = $9   if( classn == $8 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_lg_l_gamma_alt tmp2_alpha_g   
	error_y  tmp2_lg_l_gamma_alt tmp2_alpha_g tmp2_err_Gamma
	logerr_x tmp2_lg_l_gamma_alt tmp2_alpha_g tmp2_err_l_gamma_alt

	ctype 5 
	points   tmp1_lg_l_gamma_alt tmp1_alpha_g 
	error_y  tmp1_lg_l_gamma_alt tmp1_alpha_g tmp1_err_Gamma 
	logerr_x tmp1_lg_l_gamma_alt tmp1_alpha_g tmp1_err_l_gamma_alt

	ctype 4 
	points   tmp0_lg_l_gamma_alt tmp0_alpha_g 
	error_y  tmp0_lg_l_gamma_alt tmp0_alpha_g tmp0_err_Gamma 
	logerr_x tmp0_lg_l_gamma_alt tmp0_alpha_g tmp0_err_l_gamma_alt

	ctype 6
	points   tmp3_lg_l_gamma_alt tmp3_alpha_g 
	error_y  tmp3_lg_l_gamma_alt tmp3_alpha_g tmp3_err_Gamma 
	logerr_x tmp3_lg_l_gamma_alt tmp3_alpha_g tmp3_err_l_gamma_alt
	ctype 2 

	#--------------------
	set test_ag = 0.2,2.0,0.01
	set test_ag = test_ag + 0.001
	set lg_flim_3mo = -8.15 + 0.666*test_ag
	# set flim_3mo = 10.0**lg_flim_3mo

	# set xlim2 = -9.85 + 1.666*(abs(ylim - 1.1))**$exp - 0.666*lg($T)
	# T=0.1, exp=0.58 match well the envelope of the real data points
	# purely empirical!
	set lg_flim_3mo = -9.85 + 1.666*(abs(test_ag+1 - 1.1))**0.58 - 0.666*lg(0.1)
	set flim_3mo = 10.0**lg_flim_3mo

	set flim1     = 1.602e-12*(1e8*flim_3mo)*test_ag/(test_ag - 1)*(1 - 10.0**(2*(1-test_ag)))
	set flim1_alt = 4.806e-12*(1e8*flim_3mo)*test_ag/(test_ag - 1)*(1 - 33.0**(1-test_ag))/3.**test_ag

	foreach test_z < 0.1 0.3 1.0 1.5 2.0 3.0 > {
	   # lumdist $test_z
	   systemcall cosmo_calculator.py $test_z | egrep -v Age >! /tmp/lumdist
	   ## systemcall ls -o /tmp/lumdist
	   data "/tmp/lumdist"
	   define lumdist read 1 3 
	   echo " D_L["$test_z"] = "$lumdist
	   set flim2           = flim1
	   set flim2_alt       = flim1_alt*(1+$test_z)**(test_ag-1)
	   set lg_llim_3mo     = lg(4.*3.1415) + 2*$lumdist + lg(flim2)
	   set lg_llim_3mo_alt = lg(4.*3.1415) + 2*$lumdist + lg(flim2_alt)
	   ctype 4 
	   # ltype 1 connect lg_llim_3mo     test_ag
	   ltype 2 connect lg_llim_3mo_alt test_ag
	}
	ctype 2 
	ltype 0
	
#-------------------------------------------------------------------------------
# plot_lr_vs_lg
plot_lr_vs_lg

	reset_graph

	#ticksize -1 0 -1 0 
	ticksize 0.25 1 0.25 1 
	limits 43.2 49.8 40.2 46.5
	box
	expand 2
	xlabel L_\gamma [erg/s]
	ylabel L_{radio} [erg/s]
	expand 1.5

	foreach 9 < lg_l_gamma_alt err_l_gamma_alt lg_l_r_84 > {
	  foreach 8 < 0 1 2 3 > { 
	  set tmp$8_$9 local
	  set tmp$8_$9 = $9   if( classn == $8 && flag_z == 1 && flag_fr84 == 1)
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_lg_l_gamma_alt tmp2_lg_l_r_84    
	# error_y  tmp2_lg_l_gamma_alt tmp2_lg_l_r_84  tmp2_err_Gamma
	logerr_x tmp2_lg_l_gamma_alt tmp2_lg_l_r_84  tmp2_err_l_gamma_alt

	ctype 5 
	points   tmp1_lg_l_gamma_alt tmp1_lg_l_r_84  
	# error_y  tmp1_lg_l_gamma_alt tmp1_lg_l_r_84  tmp1_err_Gamma 
	logerr_x tmp1_lg_l_gamma_alt tmp1_lg_l_r_84  tmp1_err_l_gamma_alt

	ctype 4 
	points   tmp0_lg_l_gamma_alt tmp0_lg_l_r_84  
	# error_y  tmp0_lg_l_gamma_alt tmp0_lg_l_r_84  tmp0_err_Gamma 
	logerr_x tmp0_lg_l_gamma_alt tmp0_lg_l_r_84  tmp0_err_l_gamma_alt

	ctype 6
	points   tmp3_lg_l_gamma_alt tmp3_lg_l_r_84  
	# error_y  tmp3_lg_l_gamma_alt tmp3_lg_l_r_84  tmp3_err_Gamma 
	logerr_x tmp3_lg_l_gamma_alt tmp3_lg_l_r_84  tmp3_err_l_gamma_alt
	ctype 2 

#-------------------------------------------------------------------------------
# plot_lo_vs_lg
plot_lo_vs_lg

	reset_graph

	ticksize 0.25 1 0.25 1 
	limits 43.2 49.8 43.2 48
	box
	expand 2
	xlabel L_\gamma [erg/s]
	ylabel L_{opt} [erg/s]
	expand 1.5

	foreach 9 < lg_l_gamma_alt err_l_gamma_alt lg_l_magR > {
	  foreach 8 < 0 1 2 3 > { 
	  set tmp$8_$9 local
	  set tmp$8_$9 = $9   if( classn == $8 && flag_z == 1 && flag_magR == 1)
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_lg_l_gamma_alt tmp2_lg_l_magR   
	logerr_x tmp2_lg_l_gamma_alt tmp2_lg_l_magR tmp2_err_l_gamma_alt

	ctype 5 
	points   tmp1_lg_l_gamma_alt tmp1_lg_l_magR 
	logerr_x tmp1_lg_l_gamma_alt tmp1_lg_l_magR tmp1_err_l_gamma_alt

	ctype 4 
	points   tmp0_lg_l_gamma_alt tmp0_lg_l_magR 
	logerr_x tmp0_lg_l_gamma_alt tmp0_lg_l_magR tmp0_err_l_gamma_alt

	ctype 6
	points   tmp3_lg_l_gamma_alt tmp3_lg_l_magR 
	logerr_x tmp3_lg_l_gamma_alt tmp3_lg_l_magR tmp3_err_l_gamma_alt
	ctype 2 

#-------------------------------------------------------------------------------
# plot_nfr_vs_fg
plot_nfr_vs_fg

	reset_graph

	ticksize -1 0 -1 0 
	limits -12 -8.5 -25 -21
	limits -12 -8.5 -15 -11
	box
	expand 2
	xlabel F_\gamma
	ylabel F_{radio}
	expand 1.5

	ctype 4 
	ltype 2
	relocate $($fx1+0) $($fy1+0)  draw $($fx1+4) $($fy1+4)
	relocate $($fx1+1) $($fy1+0)  draw $($fx1+5) $($fy1+4)
	relocate $($fx1-1) $($fy1+0)  draw $($fx1+3) $($fy1+4)
	ltype 0
	ctype 2 

	foreach 9 < lg_flux_alt err_flux_alt lg_nfr84 > {
	  foreach 8 < 0 1 2 3 > { 
	     set tmp$8_$9 local
	     set tmp$8_$9 = $9   if( classn == $8 && flag_fr84 == 1 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_lg_flux_alt tmp2_lg_nfr84    
	logerr_x tmp2_lg_flux_alt tmp2_lg_nfr84  tmp2_err_flux_alt

	ctype 5 
	points   tmp1_lg_flux_alt tmp1_lg_nfr84  
	logerr_x tmp1_lg_flux_alt tmp1_lg_nfr84  tmp1_err_flux_alt

	ctype 4 
	points   tmp0_lg_flux_alt tmp0_lg_nfr84  
	logerr_x tmp0_lg_flux_alt tmp0_lg_nfr84  tmp0_err_flux_alt

	ctype 6
	points   tmp3_lg_flux_alt tmp3_lg_nfr84  
	logerr_x tmp3_lg_flux_alt tmp3_lg_nfr84  tmp3_err_flux_alt
	ctype 2 

	
#-------------------------------------------------------------------------------
# plot_lg_vs_aro
plot_lg_vs_aro

	reset_graph

	ticksize 0 0 0 0
	limits -0.2 1.2 43.2 49.8
	box 1 2 0 0 
	expand 2
	xlabel \alpha_{RO} [*]
	ylabel L_\gamma [erg/s]
	expand 1.5

        # ctype 4 
        # ltype 2
        # relocate $($fx1+0) $($fy1+0)  draw $($fx1+4) $($fy1+4)
        # relocate $($fx1+1) $($fy1+0)  draw $($fx1+5) $($fy1+4)
        # relocate $($fx1-1) $($fy1+0)  draw $($fx1+3) $($fy1+4)
        # ltype 0
        # ctype 2 

	foreach 9 < lg_l_gamma_alt err_l_gamma_alt a_RO > {
	  foreach 8 < 0 1 2 3 > { 
	     set tmp$8_$9 local
	     set tmp$8_$9 = $9   if( classn == $8 && flag_fr84 == 1 && flag_magR == 1 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_a_RO tmp2_lg_l_gamma_alt   
	logerr_y tmp2_a_RO tmp2_lg_l_gamma_alt tmp2_err_l_gamma_alt

	ctype 5 
	points   tmp1_a_RO tmp1_lg_l_gamma_alt 
	logerr_y tmp1_a_RO tmp1_lg_l_gamma_alt tmp1_err_l_gamma_alt

	ctype 4 
	points   tmp0_a_RO tmp0_lg_l_gamma_alt 
	logerr_y tmp0_a_RO tmp0_lg_l_gamma_alt tmp0_err_l_gamma_alt

	ctype 6
	points   tmp3_a_RO tmp3_lg_l_gamma_alt 
	logerr_y tmp3_a_RO tmp3_lg_l_gamma_alt tmp3_err_l_gamma_alt
	ctype 2 

#-------------------------------------------------------------------------------
# plot_g2r_vs_aro
plot_g2r_vs_aro

	reset_graph

	define fudge_gamma ? < Use fudge factor [1|0] : >

	set lg_lg = lg_l_gamma_alt + $fudge_gamma*lg_l_gamma_fudge

	ticksize 0 0 0 0
	limits -0.2 1.2 1 5 
	box 1 2 0 0 
	expand 2
	xlabel \alpha_{RO} [*]
	ylabel L_\gamma/L_{R}
	expand 1.5

	set g2r     = lg_lg - lg_l_r_84
	set err_g2r = err_l_gamma_alt/l_gamma_alt*10.0**g2r
	
	foreach 9 < g2r err_g2r a_RO > {
	  foreach 8 < 0 1 2 3 > { 
	     set tmp$8_$9 local
	     set tmp$8_$9 = $9   if( classn == $8 && flag_fr84 == 1 && flag_magR == 1 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_a_RO tmp2_g2r   
	logerr_y tmp2_a_RO tmp2_g2r tmp2_err_g2r

	ctype 5 
	points   tmp1_a_RO tmp1_g2r 
	logerr_y tmp1_a_RO tmp1_g2r tmp1_err_g2r

	ctype 4 
	points   tmp0_a_RO tmp0_g2r 
	logerr_y tmp0_a_RO tmp0_g2r tmp0_err_g2r

	ctype 6
	points   tmp3_a_RO tmp3_g2r 
	logerr_y tmp3_a_RO tmp3_g2r tmp3_err_g2r
	ctype 2 


#-------------------------------------------------------------------------------
# plot_g2r_vs_ag
plot_g2r_vs_ag

	reset_graph

	define fudge_gamma ? < Use fudge factor [1|0] : >

	set lg_lg = lg_l_gamma_alt + $fudge_gamma*lg_l_gamma_fudge

	ticksize 0 0 0 0
	limits 0.1 2.4 1 5 
	box 1 2 0 0 
	expand 2
	xlabel \alpha_\gamma
	ylabel L_\gamma/L_{R}
	expand 1.5

	set g2r     = lg_lg - lg_l_r_84
	set err_g2r = err_l_gamma_alt/l_gamma_alt*10.0**g2r
	
	foreach 9 < g2r err_g2r alpha_g > {
	  foreach 8 < 0 1 2 3 > { 
	     set tmp$8_$9 local
	     set tmp$8_$9 = $9   if( classn == $8 && flag_fr84 == 1 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_alpha_g tmp2_g2r   
	logerr_y tmp2_alpha_g tmp2_g2r tmp2_err_g2r

	ctype 5 
	points   tmp1_alpha_g tmp1_g2r 
	logerr_y tmp1_alpha_g tmp1_g2r tmp1_err_g2r

	ctype 4 
	points   tmp0_alpha_g tmp0_g2r 
	logerr_y tmp0_alpha_g tmp0_g2r tmp0_err_g2r

	ctype 6
	points   tmp3_alpha_g tmp3_g2r 
	logerr_y tmp3_alpha_g tmp3_g2r tmp3_err_g2r
	ctype 2 


#-------------------------------------------------------------------------------
# plot_g2o_vs_aro
plot_g2o_vs_aro

	reset_graph

	ticksize 0 0 0 0
	limits -0.2 1.2 -3.5 3.5
	box 1 2 0 0 
	expand 2
	xlabel \alpha_{RO} [*]
	ylabel L_\gamma/L_{opt}
	expand 1.5

	set g2o     = lg_l_gamma_alt - lg_l_magR
	set err_g2o = err_l_gamma_alt/l_gamma_alt*10.0**g2o

	foreach 9 < g2o err_g2o a_RO > {
	  foreach 8 < 0 1 2 3 > { 
	     set tmp$8_$9 local
	     set tmp$8_$9 = $9   if( classn == $8 && flag_fr84 == 1 && flag_magR == 1 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_a_RO tmp2_g2o   
	logerr_y tmp2_a_RO tmp2_g2o tmp2_err_g2o

	ctype 5 
	points   tmp1_a_RO tmp1_g2o 
	logerr_y tmp1_a_RO tmp1_g2o tmp1_err_g2o

	ctype 4 
	points   tmp0_a_RO tmp0_g2o 
	logerr_y tmp0_a_RO tmp0_g2o tmp0_err_g2o

	ctype 6
	points   tmp3_a_RO tmp3_g2o 
	logerr_y tmp3_a_RO tmp3_g2o tmp3_err_g2o
	ctype 2 


#-------------------------------------------------------------------------------
# plot_ag_vs_aro
plot_ag_vs_aro

	reset_graph

	ticksize 0 0 0 0
	limits -0.2 1.2 0.1 2.1
	box 1 2 0 0 
	expand 2
	xlabel \alpha_{RO} [*]
	ylabel \alpha_\gamma
	expand 1.5

	foreach 9 < alpha_g err_Gamma a_RO > {
	  foreach 8 < 0 1 2 3 > { 
	     set tmp$8_$9 local
	     set tmp$8_$9 = $9   if( classn == $8 && flag_fr84 == 1 && flag_magR == 1 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_a_RO tmp2_alpha_g   
	error_y  tmp2_a_RO tmp2_alpha_g tmp2_err_Gamma

	ctype 5 
	points   tmp1_a_RO tmp1_alpha_g 
	error_y  tmp1_a_RO tmp1_alpha_g tmp1_err_Gamma 

	ctype 4 
	points   tmp0_a_RO tmp0_alpha_g 
	error_y  tmp0_a_RO tmp0_alpha_g tmp0_err_Gamma 

	ctype 6
	points   tmp3_a_RO tmp3_alpha_g 
	error_y  tmp3_a_RO tmp3_alpha_g tmp3_err_Gamma 
	ctype 2 


#-------------------------------------------------------------------------------
# plot_ag_vs_lr
plot_ag_vs_lr

	reset_graph

	ticksize -1 0 0.1 0.5
	limits 39.0 46.5 0.1 2.1
	box
	expand 2
	xlabel L_{radio} [erg/s]
	ylabel \alpha_\gamma
	expand 1.5

	foreach 9 < lg_l_r_84 alpha_g err_Gamma > {
	  foreach 8 < 0 1 2 3 > { 
	  set tmp$8_$9 local
	  set tmp$8_$9 = $9   if( classn == $8 )
	  }
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_lg_l_r_84 tmp2_alpha_g   
	error_y  tmp2_lg_l_r_84 tmp2_alpha_g tmp2_err_Gamma
	# logerr_x tmp2_lg_l_r_84 tmp2_alpha_g tmp2_err_l_r_84

	ctype 5 
	points   tmp1_lg_l_r_84 tmp1_alpha_g 
	error_y  tmp1_lg_l_r_84 tmp1_alpha_g tmp1_err_Gamma 
	# logerr_x tmp1_lg_l_r_84 tmp1_alpha_g tmp1_err_l_r_84

	ctype 4 
	points   tmp0_lg_l_r_84 tmp0_alpha_g 
	error_y  tmp0_lg_l_r_84 tmp0_alpha_g tmp0_err_Gamma 
	# logerr_x tmp0_lg_l_r_84 tmp0_alpha_g tmp0_err_l_r_84

	ctype 6
	points   tmp3_lg_l_r_84 tmp3_alpha_g 
	error_y  tmp3_lg_l_r_84 tmp3_alpha_g tmp3_err_Gamma 
	# logerr_x tmp3_lg_l_r_84 tmp3_alpha_g tmp3_err_l_r_84
	ctype 2 

	ltype 0
	
#-------------------------------------------------------------------------------
# plot_flux_vs_z
plot_flux_vs_z

	reset_graph

	define whatflux ? < F_100 or F_alt [1|2] : >
	if( $whatflux == 1 ) { define 9 "f100" }
	if( $whatflux == 2 ) { define 9 "flux_alt" }

	if( $whatflux == 1 ) { limits -0.05 3.05  -9.0 -5.0 }
	if( $whatflux == 2 ) { limits -0.05 3.05 -12.0 -9.0 }
	ticksize 0 0 0.1 1.0
	box
	xlabel redshift
	if( $whatflux == 1 ) { ylabel F_{100} } 
	if( $whatflux == 2 ) { ylabel Flux    } 

	set lg_f100 = lg(f100)
	set lg_flux_alt = lg(flux_alt)

	foreach 7 < lg_f100 lg_flux_alt redshift err_flux_alt err_f100 >  {
	  set tmp1_$7 local
	  set tmp2_$7 local
	  set tmp1_$7 = $7   if( classn == 1 )
	  set tmp2_$7 = $7   if( classn == 2 )
	}

	ptype 4 3 
	ctype 3 
	points   tmp2_redshift tmp2_lg_$9   
	logerr   tmp2_redshift tmp2_lg_$9 tmp2_err_$9

	ctype 5 
	points   tmp1_redshift tmp1_lg_$9   
	logerr   tmp1_redshift tmp1_lg_$9 tmp1_err_$9
	ctype 2 

	#--------------------
        set test_ag = < 0.5 1.0 1.5 2.0 > 
	set test_ag = test_ag + 0.001
        set lg_flim_3mo = -8.15 + 0.666*test_ag
        set flim_3mo    = 10.0**lg_flim_3mo
	set flim1_alt   = 4.806e-12*(1e8*flim_3mo)*test_ag/(test_ag - 1)*(1 - 33.0**(1-test_ag))/3.**test_ag
	set lg_flim1_alt= lg(flim1_alt)

	if( $whatflux == 1 ) {
           ctype 4 
           ltype 1 
           do 6=0,dimen(test_ag)-1 {
	      define ag   $(test_ag[$6])
	      define f3mo $(flim_3mo[$6])
	      set z_dum=0.001,3.0,0.01
	      # set lg_flim = lg($f3mo) - $ag*lg(3) + $ag*lg(1+z_dum)
	      set lg_flim = lg($f3mo) + $ag*lg(1+z_dum)
	      ltype 2 
	      connect z_dum lg_flim
             
           }
           ctype 2 
           ltype 0 
	}

	# converts to energy flux
	if( $whatflux == 2 ) {
	   do 6=0,dimen(test_ag)-1 {
	      define ag   $(test_ag[$6])
	      define f3mo $(flim_3mo[$6])
	      # define flim1     $( 1.602e-12*(1e8*$f3mo)*$ag/($ag - 1)*(1 - 10.0**(2*(1-$ag))) )
	      define flim1_alt $(flim1_alt[$6])   ## 4.806e-12*(1e8*$f3mo)*$ag/($ag - 1)*(1 - 33.0**(1-$ag))/3.**$ag )

	      set z_dum=0.001,3.0,0.01

	      set flim2           = $flim1 + 0*z_dum
	      set flim2_alt       = $flim1_alt*(1+z_dum)**($ag-1)
	      set lg_flim2_alt    = lg(flim2_alt)
	      ctype 4 
	      ltype 2 
	      connect z_dum (lg(flim2_alt))
	   }
	}
	ctype 2 
	ltype 0
	
#-------------------------------------------------------------------------------
# plot_lg_vs_z
plot_lg_vs_z

	reset_graph

	limits -0.05 3.05 43.2 49.8
	ticksize 0 0 -1 0 
	box
	expand 2
	xlabel redshift
	ylabel L_\gamma [erg/s]
	expand 1.5

	foreach 9 < lg_l_gamma_alt alpha_g err_Gamma err_l_gamma_alt redshift > {
	  set tmp1_$9 local
	  set tmp2_$9 local
	  set tmp1_$9 = $9   if( classn == 1 )
	  set tmp2_$9 = $9   if( classn == 2 )
	}

	ptype 4 3 
	ctype 3 
	points tmp2_redshift tmp2_lg_l_gamma_alt   
	logerr tmp2_redshift tmp2_lg_l_gamma_alt tmp2_err_l_gamma_alt

	ctype 5 
	points tmp1_redshift tmp1_lg_l_gamma_alt   
	logerr tmp1_redshift tmp1_lg_l_gamma_alt tmp1_err_l_gamma_alt
	ctype 2 

	#--------------------
        set test_ag = < 0.5 1.0 1.5 2.0 > 
	set test_ag = test_ag + 0.001
        set lg_flim_3mo = -8.15 + 0.666*test_ag
        set flim_3mo    = 10.0**lg_flim_3mo
	set flim1_alt   = 4.806e-12*(1e8*flim_3mo)*test_ag/(test_ag - 1)*(1 - 33.0**(1-test_ag))/3.**test_ag
	set lg_flim1_alt= lg(flim1_alt)

	# converts to energy flux
	do 6=0,dimen(test_ag)-1 {
	   define ag        $(test_ag[$6])
	   define f3mo      $(flim_3mo[$6])
	   define flim1_alt $(flim1_alt[$6])   ## 4.806e-12*(1e8*$f3mo)*$ag/($ag - 1)*(1 - 33.0**(1-$ag))/3.**$ag )

	   set z_dum=0.001,3.0,0.01
	   lumdist_zvec z_dum

	   set flim2_alt       = $flim1_alt*(1+z_dum)**($ag-1)
	   set lg_llim_3mo_alt = lg(4.*3.1415) + 2*d_l_vec + lg(flim2_alt)
	   ctype 4 
	   ltype 2 
	   connect z_dum lg_llim_3mo_alt
	}
	ctype 6 
	connect z_dum lg_llim_3mo_alt
	ctype 2 
	ltype 0
	
#-------------------------------------------------------------------------------
# plot_ag_histo
plot_ag_histo

        define hxstep      ? < Step for histogram [e.g. 0.2] : >

        set hx = -0.2-2*$hxstep,4.0,$hxstep
        set hx = hx - 0.5*$hxstep

	set y_0 = alpha_g  if( classn == 0 )
	set y_1 = alpha_g  if( classn == 1 )
	set y_2 = alpha_g  if( classn == 2 )
	set y_3 = alpha_g  if( classn == 3 )

	set hy_0 = histogram(y_0:hx)
	set hy_1 = histogram(y_1:hx)
	set hy_2 = histogram(y_2:hx)
	set hy_3 = histogram(y_3:hx)

	set hy_test = hy_0 CONCAT hy_1 CONCAT hy_2 CONCAT hy_3
	vecminmax hy_test dummy hytop

	reset_graph

	limits 0.1 2.4 -1 $(1.1*$hytop)
	ticksize 0 0 0 0 
	box
	expand 2
	xlabel \alpha_\gamma
	ylabel N
	expand 1.5

	define hdx (0.01)
	ctype 4 
	lweight 3
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_0
	ltype 0       histogram (hx - 1.0*$hdx) hy_0    
	ctype 5 
	lweight 5
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_1
	ltype 0       histogram (hx + 0.0*$hdx) hy_1
	ctype 3 
	lweight 5
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_2
	ltype 0       histogram (hx + 1.0*$hdx) hy_2
	ctype 6 
	lweight 3
	# ltype 1 shade histogram 200 (hx - 1.0*$hdx) hy_3
	ltype 0       histogram (hx + 1.5*$hdx) hy_3

	lweight 3 
	define labsep (1000)
	relocate ( $($gx1+500) $($gy2 - 1.0*$labsep) ) ctype 5 putlabel 6 BLL
	relocate ( $($gx1+500) $($gy2 - 2.0*$labsep) ) ctype 3 putlabel 6 FSRQ
	relocate ( $($gx1+500) $($gy2 - 3.0*$labsep) ) ctype 4 putlabel 6 RG
	relocate ( $($gx1+500) $($gy2 - 4.0*$labsep) ) ctype 6 putlabel 6 unk.


#-------------------------------------------------------------------------------
# make_all_plots
make_all_plots

	foreach 1 < plot_ag_vs_lg \
		plot_lr_vs_lg \
		plot_lo_vs_lg \
		plot_nfr_vs_fg \
		plot_lg_vs_aro \
		plot_g2r_vs_aro \
		plot_g2r_vs_ag \
		plot_g2o_vs_aro \
		plot_ag_vs_aro \
		plot_ag_vs_lr \
		plot_flux_vs_z \
		plot_lg_vs_z \
		plot_ag_histo > { 
	   device postencap $1.ps
	   $1
	   dev x11
	}

#-------------------------------------------------------------------------------
# gamma_vs_flim
gamma_vs_flim

	reset_graph
	ticksize -1 0 0.1 0.5
	limits -10 -5 0.2 3.8
	box
	expand 2.0
	xlabel F_{100} [c.g.s.]
	ylabel \Gamma

	data "/home/gfossati/Science/Fermi/effarea/ajello_ref_points_transformed.dat"
	read < flim 3 glim 4 >

	data "/home/gfossati/Science/Fermi/effarea/flim_data_1.dat"
	read < gg1 1 ff1 2 >
	data "/home/gfossati/Science/Fermi/effarea/flim_data_2.dat"
	read < gg2 1 ff2 2 >

	ctype 3 lweight 3 ltype 2 connect flim glim
	ctype 3 lweight 5 ltype 0 connect ff1  gg1
	ctype 3 lweight 5 ltype 2 connect ff2  gg2
	ctype 2 lweight 3 

	set xlim local
	set ylim local

	set ylim=1.0,3.5,0.05

	define T ?    < Time [years]          : >
	define exp  ? < exponent [0.58 was ok]: > 
	set xlim_3m_ts100  = -7.95 + 0.666*(ylim - 2.2) - 0.666*lg(0.25)
	set xlim   = -8.35 + 0.666*(ylim - 2.2) - 0.666*lg($T)
	set xlim2a = -9.85 + 1.666*(abs(ylim - 1.1))**$exp - 0.666*lg($T)
	# set xlim2b = -10.05 + $bb*(abs(ylim - 0.9))**$exp - 0.666*lg($T)
	set xlim3  = -10. + 1.630*(abs(ylim - 0.9))**0.62 - 0.666*lg($T)

	#ctype 7 ltype 3 connect xlim_3m_ts100  ylim
	#ctype 7 ltype 2 connect xlim  ylim
	ctype 5 ltype 2 connect xlim2a ylim 
	# ctype 4 ltype 2 connect xlim2b ylim
	ctype 2 ltype 0 connect xlim3 ylim 
	ctype 2 ltype 0 

	echo "------------------------------------------------------------"
	echo "  magenta long dash  3m ts100"
	echo "  magenta dash       $T straight "
	echo "  blue    dash       $T curved with $exp "
	echo "------------------------------------------------------------"

#-------------------------------------------------------------------------------
# flim_vs_gamma
flim_vs_gamma

	reset_graph
	ticksize 0.1 0.5 -1 0 
	limits 0.2 3.8 -10 -5
	limits 0.9 3.0 -9.9 -7
	box
	expand 2.0
	xlabel \Gamma
	ylabel F_{100} [c.g.s.]

	data "/home/gfossati/Science/Fermi/effarea/ajello_ref_points_transformed.dat"
	read < flim 3 glim 4 >

	data "/home/gfossati/Science/Fermi/effarea/flim_data_1.dat"
	read < gg1 1 ff1 2 >
	data "/home/gfossati/Science/Fermi/effarea/flim_data_2.dat"
	read < gg2 1 ff2 2 >

	ctype 3 lweight 3 ltype 2 connect glim flim
	ctype 3 lweight 5 ltype 0 connect gg1  ff1
	ctype 3 lweight 5 ltype 2 connect gg2  ff2
	ctype 2 lweight 3 

	set xlim local
	set ylim local

	set ylim=1.0,3.5,0.05

	define T ?    <        Time [years]           : >
	define exp  ? <        exponent [0.58 was ok] : > 
	define bb   ? < second case pre-factor (1.62) : >
	set xlim_3m_ts100  = -7.95 + 0.666*(ylim - 2.2) - 0.666*lg(0.25)
	set xlim   =  -8.35 + 0.666*(ylim - 2.2) - 0.666*lg($T)
	set xlim2a =  -9.85 + 1.666*(abs(ylim - 1.1))**$exp - 0.666*lg($T)
	# set xlim2b = -10.05 + 1.620*(abs(ylim - 0.9))**$exp - 0.666*lg($T)
	set xlim2b = -10.05 + $bb*(abs(ylim - 0.9))**$exp - 0.666*lg($T)
	set xlim3 = -10. + 1.630*(abs(ylim - 0.9))**0.62 - 0.666*lg($T)

	set lg_flim_3mo = -9.85 + 1.666*(abs(ylim - 1.1))**0.58 - 0.666*lg(0.1)

	#ctype 7 ltype 3 connect ylim xlim_3m_ts100  
	#ctype 7 ltype 2 connect ylim xlim
	ctype 5 ltype 2 connect ylim xlim2a
	ctype 4 ltype 2 connect ylim xlim2b
	ctype 2 ltype 0 connect ylim xlim3
	# ctype 6 
	# connect ylim lg_flim_3mo
	ctype 2 ltype 0 

	echo "------------------------------------------------------------"
	echo "  magenta long dash  3m ts100"
	echo "  magenta dash       $T straight "
	echo "  blue    dash       $T curved with $exp "
	echo "  cyan    dash       lg_flim_3mo (?) exp=0.58"
	echo "------------------------------------------------------------"


#===============================================================================
# read_smarts_tab_data  [<src sequence number>]
read_smarts_tab_data 01

	#?# source_list_menu
	#?# # defines the variable '$whatsource' 
	#?# define 9 $whatsource

	define 9 $1

        if( $9 ==  0 ) { define srcNAME "/0208" }
        if( $9 ==  1 ) { define srcNAME "/0235" }
        if( $9 ==  2 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 ==  3 ) { define srcNAME "/0528" }
        if( $9 ==  4 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 ==  5 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 ==  6 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 ==  7 ) { define srcNAME "/OJ287" }
        if( $9 ==  8 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 ==  9 ) { define srcNAME "/3C273" }
        if( $9 == 10 ) { define srcNAME "/3C279" }
        if( $9 == 11 ) { define srcNAME "/1406" }
        if( $9 == 12 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 == 13 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 == 14 ) { define srcNAME "/1510" }
        if( $9 == 15 ) { define srcNAME "/1622" }
        if( $9 == 16 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 == 17 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 == 18 ) { define srcNAME "/1730" }
        if( $9 == 19 ) { define srcNAME "/2155" }
        if( $9 == 20 ) { echo "DATA NOT AVAILABLE FOR THIS OBJECT" }
        if( $9 == 21 ) { define srcNAME "/3C454" }

	data "$!SMARTSarchive""$!srcNAME""_DCF_B_mag.dat"
	read < mjd_b 2 mag_b 4 emag_b 5 > 
	sort < mjd_b   mag_b   emag_b >
	data "$!SMARTSarchive""$!srcNAME""_DCF_V_mag.dat"
	read < mjd_v 2 mag_v 4 emag_v 5 >
	sort < mjd_v   mag_v   emag_v   >
	data "$!SMARTSarchive""$!srcNAME""_DCF_R_mag.dat"
	read < mjd_r 2 mag_r 4 emag_r 5 >
	sort < mjd_r   mag_r   emag_r   >
	data "$!SMARTSarchive""$!srcNAME""_DCF_J_mag.dat"
	read < mjd_j 2 mag_j 4 emag_j 5 >
	sort < mjd_j   mag_j   emag_j   >
	data "$!SMARTSarchive""$!srcNAME""_DCF_H_mag.dat"
	read < mjd_h 2 mag_h 4 emag_h 5 >
	sort < mjd_h   mag_h   emag_h   >
	data "$!SMARTSarchive""$!srcNAME""_DCF_K_mag.dat"
	read < mjd_k 2 mag_k 4 emag_k 5 > 
	sort < mjd_k   mag_k   emag_k   > 
 
	# ??? Not sure what's this for?
	foreach 8 < b v r j h k > { 
	   set orig_mag_$8 = mag_$8
	   set orig_mjd_$8 = mjd_$8
	}

	# probably unnecessary with new *_cal files
	foreach 8 < b v r j h k > { 
	   set filter = abs(mag_$8)
	   foreach 9 < mjd mag emag > {
	      set $9_$8 = $9_$8   if( filter < 999 )   # changed to match the dummy table values
	   }
	   # set mjd_$8 = mjd_$8 - 2400000.5
	}

        define s0b  (4440) 
	define nu_b (14.833)
        define s0v  (3480) 
	define nu_v (14.732)
        define s0r  (3010) 
	define nu_r (14.632)
        define s0j  (1510) 
	define nu_j (14.382)
        define s0h  (981) 
	define nu_h (14.236)
        define s0k  (614) 
	define nu_k (14.136)

	define f0 ( 1 )
	foreach 8 < b v r j h k > { 
	   define f0 $s0$8
	   set f_$8 = $f0*10.0**(-0.4*mag_$8)
	   set lg_f_$8 = lg(f_$8) + 3.0 
	}

	#---------------------------

#-------------------------------------------------------------------------------
# read_lat_data  [<src sequence number>]
read_lat_data 01

	source_list_menu 

	define 9 $whatsource

	#DEL# define LATarchive "/home/gfossati/Science/Fermi/data"
	#DEL# define LATarchive "/home/gfossati/Science/Fermi/monitored_objects/data"

	#DEL# set dimen(source_list) = 22.s
        #DEL# set source_list = < " 0208-512 " \
        #DEL#                         " 0235+164 " \
        #DEL#                         " LSI +61 303 " \
        #DEL#                         " PKS 0528+134 " \
        #DEL#                         " PKS 0537-441 " \
        #DEL#                         " 0716+714 " \
	#DEL#                         " 0827+243 " \
        #DEL#                         " OJ 287 " \
        #DEL#                         " Mrk 421 " \
        #DEL#                         " 3C 273 " \
        #DEL#                         " 3C 279 " \
	#DEL#                         " 1406-076 " \
	#DEL#                         " PKS 1454-354 " \
        #DEL#                         " PKS 1502+106 " \
        #DEL#                         " 1510-089 " \
	#DEL#                         " PKS B 1622-297 " \
        #DEL#                         " 1633+382 " \
        #DEL#                         " Mrk 501 " \
        #DEL#                         " 1730-130 " \
        #DEL#                         " PKS 2155-304 " \
        #DEL#                         " BL Lac " \
        #DEL#                         " 3C 454.3 " >

        #DEL# if( $?1 ) {
        #DEL#    define whatsource $1
        #DEL#    define 9 $whatsource
        #DEL# } else {
        #DEL#    do 9=0,dimen(source_list)-1 {
        #DEL#        echo " ["$9"]  "$(source_list[$9])
        #DEL#    }
        #DEL#    define whatsource ? <  What source : >
        #DEL#    define 9 $whatsource
        #DEL# }

        if( $9 ==  0 ) { data "$!LATarchive/0208-512.dat" }
        if( $9 ==  1 ) { data "$!LATarchive/0235+164.dat" }
        if( $9 ==  2 ) { data "$!LATarchive/LSI_+61_303.dat" }
        if( $9 ==  3 ) { data "$!LATarchive/PKS_0528+134.dat" }
        if( $9 ==  4 ) { data "$!LATarchive/PKS_0537-441.dat" }
        if( $9 ==  5 ) { data "$!LATarchive/0716+714.dat" }
        if( $9 ==  6 ) { data "$!LATarchive/0827+243.dat" }
        if( $9 ==  7 ) { data "$!LATarchive/OJ_287.dat" }
        if( $9 ==  8 ) { data "$!LATarchive/Mrk_421.dat" }
        if( $9 ==  9 ) { data "$!LATarchive/3C_273.dat" }
        if( $9 == 10 ) { data "$!LATarchive/3C_279.dat" }
        if( $9 == 11 ) { data "$!LATarchive/1406-076.dat" }
        if( $9 == 12 ) { data "$!LATarchive/PKS_1454-354.dat" }
        if( $9 == 13 ) { data "$!LATarchive/PKS_1502+106.dat" }
        if( $9 == 14 ) { data "$!LATarchive/1510-089.dat" }
        if( $9 == 15 ) { data "$!LATarchive/PKS_B_1622-297.dat" }
        if( $9 == 16 ) { data "$!LATarchive/1633+382.dat" }
        if( $9 == 17 ) { data "$!LATarchive/Mrk_501.dat" }
        if( $9 == 18 ) { data "$!LATarchive/1730-130.dat" }
        if( $9 == 19 ) { data "$!LATarchive/PKS_2155-304.dat" }
        if( $9 == 20 ) { data "$!LATarchive/BL_Lac.dat" }
        if( $9 == 21 ) { data "$!LATarchive/3C_454.3.dat" }
 
	read <  mjd 1 dt 2 fa 3 efa 4 ula 5 fc 6 efc 7 ulc 8 fb 9 efb 10 ulb 11 >

	set dummy_f  = fa*0 + 99
	set dummy_ef = fa*0 + 9999
	foreach 9 < a b c > {
	   set f$9  = (  f$9 > 0 ) ?  f$9 : dummy_f 
	   set ef$9 = ( ef$9 > 0 ) ? ef$9 : dummy_ef 
	}

	foreach 9 < a b c > {
	   #set sn_$9 = f$9/ef$9
	   set sn_$9 = ( ef$9 > 0 ) ? f$9/ef$9 : sn_dummy
	   set sf$9 = vsmooth(f$9,5)
	}

	set counter = 1,dimen(mjd),1

	set ratio_ab   = fa/fb
	set sratio_ab  = sfa/sfb
	set flag_ul_ab = ula + 2*ulb
	set ratio_ac   = fa/fc
	set sratio_ac  = sfa/sfc
	set flag_ul_ac = ula + 2*ulc
	set ratio_bc   = fb/fc
	set sratio_bc  = sfb/sfc
	set flag_ul_bc = ulb + 2*ulc

	echo "------------------------------------------------------------"
	echo "  The arrays are labeled a/b/c in the following way:"
	echo "    a = 0.1-300 GeV "
	echo "    b = 0.3-1.0 GeV "
	echo "    c = 1.0-300 GeV "
	echo " "
	echo "  Array names are : " 
	echo "     f#   ef#   ul#   sn_#   sf#  "
	echo "------------------------------------------------------------"

#-------------------------------------------------------------------------------
# plot_lat_lc
plot_lat_lc

	reset_graph
	location 5500 31000  8500 29000

	read_lat_data 

	#---------------------------------------
	# Preparing data arrays
	#---------------------------------------
	# daily
	foreach 9 < mjd dt fa efa > { 
	   set dgood_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_$9   = $9   if( ula == 1  && dt < 1.0 )
	}
	# weekly
	foreach 9 < mjd dt fa efa > { 
	   set wgood_$9 = $9   if( ula == 0  && dt > 1.0 )
	   set wul_$9   = $9   if( ula == 1  && dt > 1.0 )
	}

	set dmjd = dgood_mjd CONCAT dul_mjd
	sort < dmjd >
	define tmin $(dmjd[0])
	define tmax $(dmjd[dimen(dmjd)-1])

	echo " Data arrays Time range : "$tmin "-" $tmax
	echo " Calling jd.x to check today\'s date "
	systemcall jd.x | egrep mjd | tee /tmp/today_mjd
	data "/tmp/today_mjd"
	define today_mjd read 1 3 
	echo $today_mjd

	# define tmin $(dmjd[0] - 15)
	# define tmax $(dmjd[dimen(dmjd)-1] + 15)
	define tmin $(54688 - 15)
	define tmax $(int($today_mjd) + 15 )

	define tmin ? < Plot start time : >
	define tmax ? < Plot end   time : >
	#---------------------------------------
	
	range 0 3 
	# limits $tmin $tmax $(lg(1e-8)) $(lg(7e-6))
	limits $tmin $tmax (lg(dgood_fa))
	notation -5 5 -4 4 
	ticksize 0 0 -1 0 

	#---------------------------------------
	window 1 -2 1 1
	box 1 2 0 0 
	xlabel  Time [MJD]

	#---------------------------------------
	# daily averages
	#---------------------------------------
	ptype 4 3 
	expand 0.5
	ctype 2 
	points dul_mjd (lg(dul_fa))
	ctype 3 
	expand 1.25
	points dgood_mjd (lg(dgood_fa))   
	expand 0.5
	logerr dgood_mjd (lg(dgood_fa)) dgood_efa

	ctype 2 
	expand 1.5

	#---------------------------------------
	window 1 -2 1 2
	box 0 2 0 0 

	#---------------------------------------
	# weekly averages
	#---------------------------------------
	ptype 4 3 
	expand 0.5
	ctype 6 
	points wul_mjd (lg(wul_fa))
	ctype 5 
	expand 1.25
	points wgood_mjd (lg(wgood_fa))   
	expand 0.5
	logerr wgood_mjd (lg(wgood_fa)) wgood_efa

	ctype 5 
	# histogram wgood_mjd (lg(wgood_fa))

	ctype 2
	expand 1.1
	define str_top ? < Top label string : > 
	relocate ( $gx1 $($gy2+750) )
	putlabel 6 $str_top

	ctype 2 
	expand 1.5
	window 1 1 1 1
	ylabel  Flux 0.1-300 GeV [c.g.s.]

#-------------------------------------------------------------------------------
# plot_lat_lc_with_hr  
#      the plotted ratio is 0.3-1/1-300 GeV, more like a softness ratio!
plot_lat_lc_with_hr

	reset_graph
	location 5500 31000  8500 29000

	read_lat_data 

	#---------------------------------------
	# Preparing data arrays
	#---------------------------------------
	# daily
	foreach 9 < mjd dt fa efa sfa fb efb sfb fc efc sfc > { 
	   set dgood_f_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_f_$9   = $9   if( ula == 1  && dt < 1.0 )
	}
	foreach 9 < mjd dt fa efa fb efb fc efc > { 
	   set wgood_f_$9 = $9   if( ula == 0  && dt > 1.0 )
	   set wul_f_$9   = $9   if( ula == 1  && dt > 1.0 )
	}

	# hr
	foreach 9 < mjd dt ratio_bc sratio_bc > { 
	   set dgood_r_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_r_$9   = $9   if( ula == 1  && dt < 1.0 )
	}
	foreach 9 < mjd dt ratio_bc sratio_bc > { 
	   set wgood_r_$9 = $9   if( ula == 0  && dt > 1.0 )
	   set wul_r_$9   = $9   if( ula == 1  && dt > 1.0 )
	}
	set vgood_ratio_bc = ratio_bc  if( dt> 1 && sn_b >= 3 && sn_c >=3 && ulb == 0 && ulc == 0 )
	set vgood_mjd      = mjd       if( dt> 1 && sn_b >= 3 && sn_c >=3 && ulb == 0 && ulc == 0 )

	set dmjd = dgood_f_mjd CONCAT dul_f_mjd
	sort < dmjd >
	define tmin $(dmjd[0])
	define tmax $(dmjd[dimen(dmjd)-1])

	echo " Data arrays Time range : "$tmin "-" $tmax
	echo " calling jd.x to check today\'s date "
	systemcall jd.x | egrep mjd | tee /tmp/today_mjd
	data "/tmp/today_mjd"
	define today_mjd read 1 3 
	echo $today_mjd

	# define tmin $(dmjd[0] - 15)
	# define tmax $(dmjd[dimen(dmjd)-1] + 15)
	define tmin $(54688 - 15)
	define tmax $(int($today_mjd) + 15 )

	define tmin ? < Plot start time : >
	define tmax ? < Plot end   time : >
	#---------------------------------------
	
	notation -5 5 -4 4 

	#=======================================
	# l.c.: bottom window
	#---------------------------------------
	window 1 -2 1 1
	range 0 3
	# limits $tmin $tmax $(lg(1e-8)) $(lg(7e-6))
	limits $tmin $tmax (lg(dgood_f_fa))
	ticksize 0 0 -1 0 
	box 1 2 0 0 
	xlabel  Time [MJD]
	ylabel  F_{0.1-300 GeV} [c.g.s.]

	#---------------------------------------
	# daily averages
	#---------------------------------------
	ptype 4 3 
	expand 0.5
	ctype 2 
	points dul_f_mjd (lg(dul_f_fa))
	ctype 3 
	expand 1.25
	points dgood_f_mjd (lg(dgood_f_fa))   
	expand 0.5
	logerr dgood_f_mjd (lg(dgood_f_fa)) dgood_f_efa
	ctype 5 
	expand 0.90
	points wgood_f_mjd (lg(wgood_f_fa))   

	ctype 2 
	expand 1.5

	#=======================================
	# HR: top window
	#---------------------------------------
	range 0 0 
	window 1 -2 1 2
	limits $tmin $tmax wgood_r_ratio_bc
	limits $tmin $tmax -0.1 7.6
	limits $tmin $tmax -0.1 11.1
	limits $tmin $tmax 11.1 -0.1
	ticksize 0 0 0 0 
	box 0 2 0 0 
	ylabel F_{0.3-1 GeV}/F_{1-300 GeV}

	ptype 4 3 
	expand 0.5
	ctype 6 
	points wul_r_mjd wul_r_ratio_bc
	 ctype 3 
	 expand 1.25
	 points dgood_r_mjd dgood_r_sratio_bc
	ctype 5 
	expand 1.25
	points wgood_r_mjd wgood_r_ratio_bc
	# expand 0.5
	# logerr good_mjd (lg(good_fa)) good_efa
	ctype 4 
	ptype 4 0 
	expand 1.5
	points vgood_mjd vgood_ratio_bc

	ctype 5 
	# histogram wgood_mjd (lg(wgood_fa))

	ctype 2
	expand 1.1
	define str_top ? < Top label string : > 
	relocate ( $gx1 $($gy2+750) )
	putlabel 6 $str_top

	ctype 2 
	expand 1.5
	window 1 1 1 1
	# ylabel  Flux 0.1-300 GeV [c.g.s.]

#-------------------------------------------------------------------------------
# hr_vs_flux
#     ad hoc for 3C454 (maybe)
#     Need to run after 'plot_lat_lc_with_hr' to have the arrays properly setup
hr_vs_flux

	reset_graph

	limits -6.5 -4.4 7.5 0.5
	ticksize -1 0 0 0 
	box
	xlabel  F_{0.1-300 GeV} [c.g.s.]
	ylabel F_{0.3-1 GeV}/F_{1-300 GeV}

	echo "------------------------------"
	echo " Options for plotting : "
	echo "  [1] smoothed daily  data "
	echo "  [2]          daily  data "
	echo "  [3]          weekly data "
	define flag_what ? < What to plot : >
	if( $flag_what == 1 ) { 
	   ctype 2 
	   points (lg(dgood_f_sfa)) dgood_r_sratio_bc
	   ctype 5
	   points (lg(dgood_f_sfa)) dgood_r_sratio_bc  if( dgood_f_mjd < 54800 )
	   ctype 3
	   points (lg(dgood_f_sfa)) dgood_r_sratio_bc  if( dgood_f_mjd > 55050 )
	}
	if( $flag_what == 2 ) { 
           ctype 2 
           points (lg(dgood_f_fa)) dgood_r_ratio_bc
           ctype 5
           points (lg(dgood_f_fa)) dgood_r_ratio_bc  if( dgood_f_mjd < 54800 )
           ctype 3
           points (lg(dgood_f_fa)) dgood_r_ratio_bc  if( dgood_f_mjd > 55050 )
	}
	if( $flag_what == 3 ) { 
           ctype 2 
           points (lg(wgood_f_fa)) wgood_r_ratio_bc
           ctype 5
           points (lg(wgood_f_fa)) wgood_r_ratio_bc  if( wgood_f_mjd < 54800 )
           ctype 3
           points (lg(wgood_f_fa)) wgood_r_ratio_bc  if( wgood_f_mjd > 55050 )
	}
	ctype 2 

##-------------------------------------------------------------------------------
## source_list_menu
source_list_menu

	# define LATarchive    "/home/gfossati/Science/Fermi/data"
	define LATarchive    "/home/gfossati/Science/Fermi/monitored_objects/data"

	define SMARTSarchive "/home/gfossati/Science/Fermi/smarts/data/new"

	set dimen(source_list) = 22.s
        set source_list= < "  0208-512 " \
                           "  0235+164 " \
                           " (LSI +61 303)" \
                           "  PKS 0528+134 " \
                           " (PKS 0537-441)" \
                           " (0716+714)" \
		           " (0827+243)" \
                           "  OJ 287 " \
                           " (Mrk 421)" \
                           "  3C 273 " \
                           "  3C 279 " \
		           "  1406-076 " \
		           " (PKS 1454-354)" \
                           " (PKS 1502+106)" \
                           "  1510-089 " \
		           "  PKS B 1622-297 " \
                           " (1633+382)" \
                           " (Mrk 501)" \
                           "  1730-130 " \
                           "  PKS 2155-304 " \
                           " (BL Lac)" \
                           "  3C 454.3" >

	if( $?1 ) {
	   define whatsource $1
	   define 9 $whatsource
	} else {
	   do 9=0,dimen(source_list)-1 {
	       echo " ["$9"]  "$(source_list[$9])
	   }
	   define whatsource ? <  What source : >
	   define 9 $whatsource
	}

#-------------------------------------------------------------------------------
# plot_lat_and_smarts
plot_lat_and_smarts

	source_list_menu
	define 9 $whatsource

	read_smarts_tab_data $9
	read_lat_data        $9

	reset_graph
	location 5500 31000  8500 29000

	define whatsmarts ? < Which SMARTS band [b|r|v|j|h|k] : >
	define 7 $whatsmarts

	#---------------------------------------
	# Preparing data arrays
	#---------------------------------------
	# daily
	foreach 9 < mjd dt fa efa sfa > { 
	   set dgood_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_$9   = $9   if( ula == 1  && dt < 1.0 )
	}

	set dmjd = dgood_mjd CONCAT dul_mjd
	sort < dmjd >
	define tmin $(dmjd[0])
	define tmax $(dmjd[dimen(dmjd)-1])

	echo " Data arrays Time range : "$tmin "-" $tmax
	echo " calling jd.x to check today\'s date "
	systemcall jd.x | egrep mjd | tee /tmp/today_mjd
	data "/tmp/today_mjd"
	define today_mjd read 1 3 
	echo $today_mjd

	# define tmin $(dmjd[0] - 15)
	# define tmax $(dmjd[dimen(dmjd)-1] + 15)
	define tmin $(54688 - 15)
	define tmax $(int($today_mjd) + 15 )

	define tmin ? < Plot start time : >
	define tmax ? < Plot end   time : >

	range 0 2 
	range 0 3 

	#---------------------------------------
	# Fermi/LAT daily averages
	#---------------------------------------
	limits $tmin $tmax $(lg(1e-8)) $(lg(7e-6))
	limits $tmin $tmax (lg(dgood_fa))
	notation -5 5 -4 4 
	ticksize 0 0 -1 0 

	#---------------------------------------
	window 1 -2 1 1
	box 1 2 0 0 
	xlabel Time [MJD]
	ylabel F_{LAT} [c.g.s.]

	ptype 4 3 
	expand 0.5
	ctype 2 
	ctype grey60
	points dul_mjd (lg(dul_fa))
	ctype 3 
	expand 1.25
	points dgood_mjd (lg(dgood_fa))   
	expand 0.5
	logerr dgood_mjd (lg(dgood_fa)) dgood_efa

	ctype 2 
	expand 1.5

	#---------------------------------------
	# smarts 
	#---------------------------------------
	window 1 -2 1 2
	limits $tmin $tmax lg_f_$7
	box 0 2 0 0 
	ylabel F_$7 [mJy]

	ptype 4 3 
	expand 0.5
	ctype 5 
	expand 1.25
	points mjd_$7 lg_f_$7

	ctype 5 
	# histogram wgood_mjd (lg(wgood_fa))

	ctype 2
	expand 1.1
	define str_top ? < Top label string : > 
	relocate ( $gx1 $($gy2+750) )
	putlabel 6 $str_top

	ctype 2 
	expand 1.5
	window 1 1 1 1

#-------------------------------------------------------------------------------
# plot_lat_and_smarts_1box
plot_lat_and_smarts_1box

	reset_graph
	location 5500 29000  8500 29000

	source_list_menu
	define 9 $whatsource

	read_smarts_tab_data $9
	read_lat_data        $9

	define whatsmarts ? < Which SMARTS band [b|r|v|j] : >
	define 7 $whatsmarts

	#---------------------------------------
	# Preparing data arrays
	#---------------------------------------
	# daily LAT
	foreach 9 < mjd dt fa efa > { 
	   set dgood_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_$9   = $9   if( ula == 1  && dt < 1.0 )
	}

	set dmjd = dgood_mjd CONCAT dul_mjd
	sort < dmjd >
	define tmin $(dmjd[0])
	define tmax $(dmjd[dimen(dmjd)-1])

	echo " Data arrays Time range : "$tmin "-" $tmax
	echo " calling jd.x to check today\'s date "
	systemcall jd.x | egrep mjd | tee /tmp/today_mjd
	data "/tmp/today_mjd"
	define today_mjd read 1 3 
	echo $today_mjd

	# define tmin $(dmjd[0] - 15)
	# define tmax $(dmjd[dimen(dmjd)-1] + 15)
	define tmin $(54688 - 15)
	define tmax $(int($today_mjd) + 15 )

	define tmin ? < Plot start time : >
	define tmax ? < Plot end   time : >

	#---------------------------------------
	# Fermi/LAT daily averages
	#---------------------------------------
	range 0 2 
	range 0 3 
	limits $tmin $tmax $(lg(1e-8)) $(lg(7e-6))
	limits $tmin $tmax (lg(dgood_fa))
	notation -5 5 -4 4 
	ticksize 0 0 -1 0 

	#---------------------------------------
	ctype 3 
	box 0 2 0 4
	ylabel F_{LAT} [c.g.s.]
	ctype 2 
	box 1 4 0 4
	xlabel Time [MJD]

	ptype 4 3 
	expand 0.5
	ctype 2 
	points dul_mjd (lg(dul_fa))
	ctype 3 
	expand 1.25
	points dgood_mjd (lg(dgood_fa))   
	expand 0.5
	logerr dgood_mjd (lg(dgood_fa)) dgood_efa

	ctype 2 
	expand 1.5

	#---------------------------------------
	# smarts 
	#---------------------------------------
	limits $tmin $tmax lg_f_$7
	#box 0 4 0 4 
	ctype 5
	box 4 4 4 2 
	# ylabel F_$7 [arb.]

	ptype 4 3 
	expand 0.5
	ctype 5 
	expand 1.25
	points mjd_$7 lg_f_$7

	ctype 5 
	# histogram wgood_mjd (lg(wgood_fa))

	ctype 2
	expand 1.1
	define str_top ? < Top label string : > 
	relocate ( $gx1 $($gy2+750) )
	putlabel 6 $str_top

	ctype 2 
	expand 1.5
	window 1 1 1 1

#-------------------------------------------------------------------------------
# plot_2smarts_1box
plot_2smarts_1box

	reset_graph
	location 5500 29000  8500 29000

	define whatsmarts1 ? < Which SMARTS band [b|r|v|j] : >
	define whatsmarts2 ? < Which SMARTS band [b|r|v|j] : >
	define 7 $whatsmarts1
	define 8 $whatsmarts2

	#---------------------------------------
	# daily LAT (used for reference for time interval)
	foreach 9 < mjd dt fa efa > { 
	   set dgood_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_$9   = $9   if( ula == 1  && dt < 1.0 )
	}

	set dmjd = dgood_mjd CONCAT dul_mjd
	sort < dmjd >
	define tmin $(dmjd[0])
	define tmax $(dmjd[dimen(dmjd)-1])

	echo " LAT Data arrays Time range : "$tmin "-" $tmax
	echo " calling jd.x to check today\'s date "
	systemcall jd.x | egrep mjd | tee /tmp/today_mjd
	data "/tmp/today_mjd"
	define today_mjd read 1 3 
	echo $today_mjd

	# define tmin $(dmjd[0] - 15)
	# define tmax $(dmjd[dimen(dmjd)-1] + 15)
	define tmin $(54688 - 15)
	define tmax $(int($today_mjd) + 15 )

	define tmin ? < Plot start time : >
	define tmax ? < Plot end   time : >

	range 0 2 
	range 0 3 
	notation -5 5 -4 4 
	ticksize 0 0 -1 0 

	#---------------------------------------
	# SMARTS band 1
	#---------------------------------------
	limits $tmin $tmax lg_f_$7
	ctype 3 
	box 0 2 0 4
	ylabel F_$7 [arb.]
	ctype 2 
	box 1 4 0 4
	xlabel Time [MJD]

	ptype 4 3 
	expand 0.5
	ctype 3 
	expand 1.25
	points mjd_$7 lg_f_$7

	ctype 2 
	expand 1.5

	#---------------------------------------
	# SMARTS band 2
	#---------------------------------------
	limits $tmin $tmax lg_f_$8
	ctype 5
	box 4 4 4 2 
	# ylabel f_$7 [arb.]

	ptype 4 3 
	expand 0.5
	ctype 5 
	expand 1.25
	points mjd_$8 lg_f_$8

	#---------------------------------------
	# top label
	#---------------------------------------
	ctype 2
	expand 1.1
	define str_top ? < Top label string : > 
	relocate ( $gx1 $($gy2+750) )
	putlabel 6 $str_top

	ctype 2 
	expand 1.5
	window 1 1 1 1

#-------------------------------------------------------------------------------
# plot_smarts_vs_smarts
plot_smarts_vs_smarts

	reset_graph
	location 5500 29000  8500 29000

	define whatsmarts1 ? < Which SMARTS band [b|r|v|j] : >
	define whatsmarts2 ? < Which SMARTS band [b|r|v|j] : >
	define 7 $whatsmarts1
	define 8 $whatsmarts2

	#---------------------------------------
	# daily LAT (used for reference for time interval)
	foreach 9 < mjd dt fa efa > { 
	   set dgood_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_$9   = $9   if( ula == 1  && dt < 1.0 )
	}

	set dmjd = dgood_mjd CONCAT dul_mjd
	sort < dmjd >
	define tmin $(dmjd[0])
	define tmax $(dmjd[dimen(dmjd)-1])

	echo " LAT Data arrays Time range : "$tmin "-" $tmax
	echo " calling jd.x to check today\'s date "
	systemcall jd.x | egrep mjd | tee /tmp/today_mjd
	data "/tmp/today_mjd"
	define today_mjd read 1 3 
	echo $today_mjd

	# define tmin $(dmjd[0] - 15)
	# define tmax $(dmjd[dimen(dmjd)-1] + 15)
	define tmin $(54688 - 15)
	define tmax $(int($today_mjd) + 15 )

	define tmin ? < Plot start time : >
	define tmax ? < Plot end   time : >

	range 0 3 
	range 0 3 
	notation -5 5 -5 5
	ticksize 0 0 -1 0 

	#---------------------------------------
	# SMARTS band 1
	#---------------------------------------
	limits lg_f_$7  lg_f_$8
	ticksize 0 0 0 0 
	ctype 2 
	box 1 2 0 0 

	xlabel F_$7 [arb.]
	ylabel F_$8 [arb.]

	ptype 4 3 
	expand 0.5
	ctype 3 
	expand 1.25
	points lg_f_$7

	ctype 2 
	expand 1.5

	#---------------------------------------
	# SMARTS band 2
	#---------------------------------------
	limits $tmin $tmax lg_f_$8
	ctype 5
	box 4 4 4 2 
	# ylabel f_$7 [arb.]

	ptype 4 3 
	expand 0.5
	ctype 5 
	expand 1.25
	points mjd_$8 lg_f_$8

	#---------------------------------------
	# top label
	#---------------------------------------
	ctype 2
	expand 1.1
	define str_top ? < Top label string : > 
	relocate ( $gx1 $($gy2+750) )
	putlabel 6 $str_top

	ctype 2 
	expand 1.5
	window 1 1 1 1

#-------------------------------------------------------------------------------
# plot_many  [*** GOOD ONE ***]
#    Plots a set of SMARTS filters, AND Fermi/LAT light curves.
plot_many 

	source_list_menu
	define 9 $whatsource

	read_smarts_tab_data $9
	read_lat_data        $9

	define whatsmarts ? < Which SMARTS band [a string e.g. "b v j k"] : >
	# define 8 $whatsmarts
	set whatsmarts = < $!whatsmarts >

	reset_graph
	location 8000 27000  5500 31000

	#---------------------------------------
	# Preparing data arrays
	#---------------------------------------
	# daily Fermi/LAT
	foreach 9 < mjd dt fa efa > { 
	   set dgood_$9 = $9   if( ula == 0  && dt < 1.0 )
	   set dul_$9   = $9   if( ula == 1  && dt < 1.0 )
	}

	set dmjd = dgood_mjd CONCAT dul_mjd
	help dmjd
	sort < dmjd >
	define tmin $(dmjd[0])
	define tmax $(dmjd[dimen(dmjd)-1])

	echo " Data arrays Time range : "$tmin "-" $tmax
	echo " calling jd.x to check today\'s date "
	systemcall jd.x | egrep mjd | tee /tmp/today_mjd
	data "/tmp/today_mjd"
	define today_mjd read 1 3 
	echo $today_mjd

	#define tmin $(54688 - 15)
	#define tmax $(int($today_mjd) + 15 )

	define tmin (54688)
	define tmax $(int($today_mjd))

	define tmin ? < Plot start time : >
	define tmax ? < Plot end   time : >

	define tfrac (0.05)
	define dttot $( $tmax - $tmin )
	# echo $dttot
	define tmin $($tmin - $tfrac*$dttot)
	define tmax $($tmax + $tfrac*$dttot )
	#---------------------------------------

	#---------------------------------------
	# Time filtering data arrays
	#---------------------------------------
	# daily Fermi/LAT
	set lat_time = dgood_mjd
	foreach 9 < mjd dt fa efa > { 
	   set dgood_$9 = dgood_$9   if( lat_time >= $tmin && lat_time <= $tmax )
	   set dul_$9   = dul_$9     if( lat_time >= $tmin && lat_time <= $tmax )
	}
	delete lat_time
	# smarts

	foreach 7 whatsmarts {
	   set smart_time_$7 = mjd_$7
           set mjd_$7  = mjd_$7   if( smart_time_$7 >= $tmin && smart_time_$7 <= $tmax )
           set lg_f_$7 = lg_f_$7  if( smart_time_$7 >= $tmin && smart_time_$7 <= $tmax )
	   delete smart_time_$7
	}
	#---------------------------------------

	range 0 2 
	range 0 3 

	define nyboxes $(-1*(dimen(whatsmarts)+1))

	#---------------------------------------
	# Fermi/LAT daily averages
	#---------------------------------------
	limits $tmin $tmax $(lg(1e-8)) $(lg(7e-6))
	limits $tmin $tmax (lg(dgood_fa))
	notation -5 5 -1 1 
	# ticksize 0 0 -1 0 
	ticksize 0 0 0 0
	ticksize 0 0 0.25 1 

	#---------------------------------------
	# window 1 -5 1 1
	window 1 $nyboxes 1 1
	expand 1.25
	box 1 2 0 0 
	xlabel Time [MJD]
	ylabel LAT

	ptype 4 3 
	expand 0.5
	ctype 2 
	ctype grey60
	points dul_mjd (lg(dul_fa))
	ctype 3 
	expand 1.25
	points dgood_mjd (lg(dgood_fa))   
	expand 0.5
	logerr dgood_mjd (lg(dgood_fa)) dgood_efa

	ctype 2 
	expand 1.5

	#---------------------------------------
	# smarts 
	#---------------------------------------
	define j (1)
	foreach 7 whatsmarts {
	   define j $($j+1)
	   window 1 $nyboxes 1 $j
	   limits $tmin $tmax lg_f_$7
	   ctype 2 
	   expand 1.25
	   box 0 2 0 0 
	   if( substr('$7',0,1) == 'a' ) { 
	      define ylab "\alpha($(substr('$7',1,0)))"
	   } else {
	      define ylab $7
	   } 
	   ylabel $ylab

           ptype 4 3 
           expand 0.5
           ctype 5 
	   if( substr('$7',0,1) == 'a' ) { ctype orange } 
           expand 1.25
           points mjd_$7 lg_f_$7
	}
	#ctype 5 
	# histogram wgood_mjd (lg(wgood_fa))

        # ctype 2
        # expand 1.1
        # define str_top ? < Top label string : > 
        # relocate ( $gx1 $($gy2+750) )
        # putlabel 6 $str_top

	ctype 2 
	expand 1.5
	window 1 1 1 1
	relocate ( $( 0.5*($gx1+$gx2) ) $( $gy2 + 750) )
	putlabel 5 $(source_list[$whatsource])

#-------------------------------------------------------------------------------
# match_2lc
match_2lc

	source_list_menu
	define 9 $whatsource

	read_smarts_tab_data $9

	define band1 ? < First  OIR band [b|v|r|j|h|k] : >
	define band2 ? < Second OIR band [b|v|r|j|h|k] : >

	define 1 $band1
	define 2 $band2
	define 3 $1$2
	echo $3
	#define eps (0.005)
	define eps_min ? < Threshold [minutes] : > 
	define eps $($eps_min/60/24)

	set t1   = mjd_$1
	set lgf1 = lg_f_$1
	set t2   = mjd_$2
	set lgf2 = lg_f_$2

	set t1x   = t1
	set lgf1x = t1*0 - 50
	set t2x   = t1
	set lgf2x = t1*0 - 50

	define i (0)
	do 7=0,dimen(t1)-1 {
	   define nmatch (0)
	   define smallest_dt (100)
	   do 8=$i,dimen(t2)-1 {
	      define dt $( abs(t1[$7] - t2[$8]) )
	      if( $dt < $smallest_dt ) {
	         define smallest_dt $dt
	      } 
	      if( $dt <= $eps ) { 
		 define nmatch $( $nmatch + 1 )
	         # echo " Match for "$7" with "$8" : "$(t1[$7]) $(t2[$8]) $dt 
		 define i $($8+1)
		 set lgf1x[$7] = lgf1[$7]
		 set lgf2x[$7] = lgf2[$8]
	      }
	   }
	   define tt $( sprintf('%11.5f',$(t1[$7])) )
	   #echo " N_matches["$7"] "$(t1[$7])" = "$nmatch"   smallest dt = "$smallest_dt
	   echo " N_matches["$(sprintf('%4d',$7))"] "$( sprintf('%11.5f',$(t1[$7])) )" = "$nmatch"   smallest dt = "$( sprintf('%10.3f',$(60*24*$smallest_dt)))" minutes"
	   if( $nmatch > 1 ) { 
	      echo " WARNING more than one match "
	   }
	}

	set filter = lgf1x 
	set mjd_$1x$2  = t1x     if( filter > -50 )
	set lg_f_$1x$2 = lgf1x   if( filter > -50 )
	set mjd_$2x$1  = t2x     if( filter > -50 )
	set lg_f_$2x$1 = lgf2x   if( filter > -50 )

	set mjd_$22$1  = mjd_$2x$1
	set lg_f_$22$1 = lg_f_$2x$1 - lg_f_$1x$2
	set mjd_a$2$1  = mjd_$2x$1
	set lg_f_a$2$1 = (lg_f_$2x$1 - lg_f_$1x$2)/($nu_$1 - $nu_$2)

	echo "----------------------------------------------------------------------"
	echo "  Input light curves : "
	echo "    Band "$1" with "$(dimen(lg_f_$1))" data points "
	echo "    Band "$2" with "$(dimen(lg_f_$2))" data points "
	echo "  "
	echo "  Matching threshold is "$eps" days, or "$($eps*24*60)" min. or "$($eps*86400)" seconds"
	echo "  Output light curves have "$(dimen(lg_f_$1x$2))" and "$(dimen(lg_f_$1x$2))" data points"
	echo "----------------------------------------------------------------------"
	echo "  Generated matching light curves with names : "
	echo "     mjd_$1x$2  lg_f_$1x$2 : band 1 matched to band 2 data"
	echo "     mjd_$2x$1  lg_f_$2x$1 : band 2 matched to band 1 data "
	echo "     mjd_$22$1  lg_f_$22$1 (ratio of $2/$1 fluxes)"
	echo "     mjd_a$2$1  lg_f_a$2$1 (spectral index between $2 and $1 bands)"
	echo "----------------------------------------------------------------------"

#-------------------------------------------------------------------------------
# plot_a_br  [BROKEN] ( radio flux vs. \alpha_{B,radio} )
plot_a_br

	reset_graph

	limits (lg_f_r+3) 0 2  
	limits $(lg(0.2))  $(lg(20)) 0 1.75
	ticksize -1 0 0 0 
	box
	xlabel F_R [mJy]
	ylabel \alpha_{BR}

	ctype 3 
	points (lg_orig_f_r + 3) a_br
	ctype 2 

#-------------------------------------------------------------------------------
# check_lat_sn
check_lat_sn

	read_lat_data

	define wx    ? < What X-variable [counter|time] : >
	define wband ? <             Which band [a|b|c] : >
	define 9 $wband

	if( substr('$wx',0,1) == 'c' ) {
	   set xx = counter
	} else {
	   set xx = mjd
	}

	define max_sn (30)

	set rejected = sn_$9   if( sn_$9 >= $max_sn )
	define rejectedpct $(sprintf('%4.1f',$(100.*dimen(rejected)/dimen(mjd))))

	echo " Data non plotted with s/n max = "$max_sn"   :  " $(dimen(rejected)) "[" $rejectedpct "% ]"

	notation -4 5 -4 4 

	ticksize 0 0 1 3 
	limits xx sn_$9
	limits xx -1.5 $max_sn
	box

	ptype 4 3 
	ctype 2 points xx sn_$9
	ctype 3 points xx sn_$9  if( ul$9 >= 1 )
	ctype 4 points xx sn_$9  if( ul$9 <  1 )
	ctype 2

#-------------------------------------------------------------------------------
# check_lat_ratios
check_lat_ratios

	read_lat_data

	define wx    ? < What X-variable [counter|time|flux] : >
	define wband ? <               Which band [ab|ac|bc] : >
	define 9 $wband

	if( substr('$wx',0,1) == 'c' ) {
	   set xx = counter
	   define labx "order #"
	}
	if( substr('$wx',0,1) == 't' ) {
	   set xx = mjd
	   define labx "MJD"
	} 
	if( substr('$wx',0,1) == 'f' ) {
	   set xx = lg(fa)
	   define labx "F_a"
	}

	define max_ff_ab (12)
	define max_ff_ac (45)
	define max_ff_bc (12)
	define max_ff $max_ff_$9

	#--------------------
	define 7 $(substr('$wband',0,1))
	define 8 $(substr('$wband',1,1))

	compute_ratio_ab $7 $8 2.0 r_20
	compute_ratio_ab $7 $8 2.5 r_25
	compute_ratio_ab $7 $8 3.0 r_30
	echo $r_20
	echo $r_25
	echo $r_30
	#--------------------

	vecminmax ratio_$9 m1 m2
	echo " Array min and max : "$m1 $m2

	set rejected = ratio_$9   if( ratio_$9 >= $max_ff )
	if( dimen(rejected) > 0 ) { 
	   define rejectedpct $(sprintf('%4.1f',$(100.*dimen(rejected)/dimen(mjd))))
	   echo " Data non plotted with f/f max = "$max_ff"   :  " $(dimen(rejected)) "[" $rejectedpct "% ]"
	} else {
	   echo " No data rejected with f/f max = "$max_ff
	}

	set temp = ratio_$9   if( flag_ul_$9 == 0 )
	echo " REAL Data points (w/out upper limits) : "$(dimen(temp)) "[" $(sprintf('%4.1f',$(100.*dimen(temp)/dimen(mjd)))) "% ]" 

	notation -4 5 -4 4 

	ticksize 0 0 1 3 
	limits xx ratio_$9
	limits xx -0.5 $max_ff
	limits xx $max_ff -0.5
	box
	xlabel $labx
	ylabel F_$7/F_$8 

	ptype 4 1 expand 1.25 ctype 2 points xx ratio_$9  if( flag_ul_$9 == 3 )
	ptype 4 3 expand 0.75 ctype 3 points xx ratio_$9  if( flag_ul_$9 == 2 )
	ptype 4 3 expand 0.75 ctype 6 points xx ratio_$9  if( flag_ul_$9 == 1 )
	ptype 4 3 expand 1.75 ctype 4 points xx ratio_$9  if( flag_ul_$9 <  1 )
	ctype 2

	ctype 7 
	ltype 2
	relocate $fx1 $r_20 draw $fx2 $r_20
	relocate $fx1 $r_25 draw $fx2 $r_25
	relocate $fx1 $r_30 draw $fx2 $r_30
	ctype 2 
	ltype 0

	echo "---------------------------------------------"
	echo " black crosses :  upper limit / upper limit  ===>  n/a "
	echo " red   squares :         GOOD / upper limit  ===> LOWER limit "
	echo " cyan  squares :  upper limit / GOOD         ===> UPPER limit  "
	echo " green squares :         GOOD / GOOD         ===>  GOOD"
	echo "---------------------------------------------"

	relocate ( $(0.5*($gx1+$gx2)) $($gy2 + 750) )
	putlabel 6 $9

#-------------------------------------------------------------------------------
# histo_lat_ratios
histo_lat_ratios

	read_lat_data

	#define wx    ? < What X-variable [counter|time|flux] : >
	define wband ? <               Which band [ab|ac|bc] : >
	define 9 $wband

	define max_ff_ab (12)
	define max_ff_ac (45)
	define max_ff_bc (12)
	define max_ff $max_ff_$9

	set xx=-0.5,$max_ff_$9+1,1

	#--------------------
	define 7 $(substr('$wband',0,1))
	define 8 $(substr('$wband',1,1))

	compute_ratio_ab $7 $8 2.0 r_20
	compute_ratio_ab $7 $8 2.5 r_25
	compute_ratio_ab $7 $8 3.0 r_30
	echo $r_20
	echo $r_25
	echo $r_30
	#--------------------

	vecminmax ratio_$9 m1 m2
	echo " Array min and max : "$m1 $m2

	set rejected = ratio_$9   if( ratio_$9 >= $max_ff )
	if( dimen(rejected) > 0 ) { 
	   define rejectedpct $(sprintf('%4.1f',$(100.*dimen(rejected)/dimen(mjd))))
	   echo " Data non plotted with f/f max = "$max_ff"   :  " $(dimen(rejected)) "[" $rejectedpct "% ]"
	} else {
	   echo " No data rejected with f/f max = "$max_ff
	}

	set temp = ratio_$9   if( flag_ul_$9 == 0 )
	echo " REAL Data points (w/out upper limits) : "$(dimen(temp)) "[" $(sprintf('%4.1f',$(100.*dimen(temp)/dimen(mjd)))) "% ]" 

	set ratio_good    = ratio_$9   if( flag_ul_$9 <  1 )
	set ratio_ll      = ratio_$9   if( flag_ul_$9 == 2 )
	set ratio_with_ll = ratio_$9   if( flag_ul_$9 < 1 || flag_ul_$9 == 2 )

	set hratio_with_ll = histogram(ratio_with_ll:xx)
	set hratio_good    = histogram(ratio_good:xx)

	ticksize 0 0 0 0
	limits xx hratio_with_ll
	box
	xlabel F_$7/F_$8 
	ylabel N

	define shift local
	define shift (0.025)
	ctype 3 histogram (xx-$shift) (hratio_with_ll-$shift)
	ctype 4 histogram (xx+$shift) (hratio_good+$shift)

	ctype 7 
	ltype 2
	relocate $r_20 $fy1 draw $r_20 $fy2 
	relocate $r_25 $fy1 draw $r_25 $fy2 
	relocate $r_30 $fy1 draw $r_30 $fy2 
	ctype 2 
	ltype 0

	echo "---------------------------------------------"
	echo " black crosses :  upper limit / upper limit  ===>  n/a "
	echo " red   squares :         GOOD / upper limit  ===> LOWER limit "
	echo " cyan  squares :  upper limit / GOOD         ===> UPPER limit  "
	echo " green squares :         GOOD / GOOD         ===>  GOOD"
	echo "---------------------------------------------"

	relocate ( $(0.5*($gx1+$gx2)) $($gy2 + 750) )
	putlabel 6 $9

##----------------------------------------------------------
## compute_ratio_ab <band_a> <band_b> <Gamma> <output var name>
compute_ratio_ab 4

	#--- preset values ---#
	define x1a (0.1)
	define x2a (300.0)
	define x1b (0.3)
	define x2b (1.0)
	define x1c (1.0)
	define x2c (300.0)

	foreach 9 < 11 12 21 22 > {
	   define x$9 local
	}
	define xa1 $x1$1
	define xa2 $x2$1
	define xb1 $x1$2
	define xb2 $x2$2

	define fa local
	define fb local
	define ratio local

	define fa $( $xa1**(1.0-$3)/($3-1.0)*(1.0 - ($xa1/$xa2)**($3-1.0)) )
	define fb $( $xb1**(1.0-$3)/($3-1.0)*(1.0 - ($xb1/$xb2)**($3-1.0)) )
	define ratio $($fa/$fb)

	echo $fa $fb "==>" $ratio

	define $4 $ratio

#===============================================================================
# read_smarts_and_uvot_3c454
read_smarts_and_uvot_3c454

	foreach 9 < b v r j > {
	   #--- "arbitrary" units ---#
	   data smarts_$9l.dat
	   read < smarts_$9_jd 1 smarts_$9_f 2 smarts_$9_ef 3 >
	   set smarts_$9_tjd = smarts_$9_jd - 2400000.5

	   set smarts_$9_lgf   =    lg(smarts_$9_f)
	   set smarts_$9_eulgf =    lg(1 + smarts_$9_ef/smarts_$9_f)
	   set smarts_$9_edlgf = -1*lg(1 - smarts_$9_ef/smarts_$9_f)
	
	   #--- flux units values ---#
	   data smarts_$9_vFv.dat
	   read < smarts_f_$9_jd 1 smarts_f_$9_f 2 smarts_f_$9_ef 3 >
	   set smarts_f_$9_tjd = smarts_f_$9_jd - 2400000.5

	   set smarts_f_$9_lgf   =    lg(smarts_f_$9_f)
	   set smarts_f_$9_eulgf =    lg(1 + smarts_f_$9_ef/smarts_f_$9_f)
	   set smarts_f_$9_edlgf = -1*lg(1 - smarts_f_$9_ef/smarts_f_$9_f)
	}

	foreach 9 < u b v > { 
	   #--- "arbitrary" units ---#
	   data uvot_$9$9.dat
	   read < uvot_$9_jd 1 uvot_$9_f 2 uvot_$9_ef 3 >
	   set uvot_$9_tjd = uvot_$9_jd - 2400000.5

	   set uvot_$9_lgf   =    lg(uvot_$9_f)
	   set uvot_$9_eulgf =    lg(1 + uvot_$9_ef/uvot_$9_f)
	   set uvot_$9_edlgf = -1*lg(1 - uvot_$9_ef/uvot_$9_f)
	
	   #--- flux units values ---#
	   data uvot_$9$9_vFv.dat
	   read < uvot_f_$9_jd 1 uvot_f_$9_f 2 uvot_f_$9_ef 3 >
	   set uvot_f_$9_tjd = uvot_f_$9_jd - 2400000.5

	   set uvot_f_$9_lgf   =    lg(uvot_f_$9_f)
	   set uvot_f_$9_eulgf =    lg(1 + uvot_f_$9_ef/uvot_f_$9_f)
	   set uvot_f_$9_edlgf = -1*lg(1 - uvot_f_$9_ef/uvot_f_$9_f)
	}

	foreach 9 < b v > { 
	   #--- "arbitrary" units ---#
	   set all_$9_tjd = smarts_$9_tjd CONCAT uvot_$9_tjd
	   set all_$9_f   = smarts_$9_f   CONCAT uvot_$9_f
	   set all_$9_ef  = smarts_$9_ef  CONCAT uvot_$9_ef

	   sort < all_$9_tjd all_$9_f all_$9_ef >

	   set all_$9_lgf   = lg(all_$9_f)
	   set all_$9_eulgf = lg(1 + all_$9_ef/all_$9_f)
	   set all_$9_edlgf = -1*lg(1 - all_$9_ef/all_$9_f)
	
	   #--- flux units values ---#
	   set all_f_$9_tjd = smarts_f_$9_tjd CONCAT uvot_f_$9_tjd
	   set all_f_$9_f   = smarts_f_$9_f   CONCAT uvot_f_$9_f
	   set all_f_$9_ef  = smarts_f_$9_ef  CONCAT uvot_f_$9_ef

	   sort < all_f_$9_tjd all_f_$9_f all_f_$9_ef >

	   set all_f_$9_lgf   = lg(all_f_$9_f)
	   set all_f_$9_eulgf = lg(1 + all_f_$9_ef/all_f_$9_f)
	   set all_f_$9_edlgf = -1*lg(1 - all_f_$9_ef/all_f_$9_f)
	}

	echo "------------------------------------------------------------"
	echo " SMARTS: b v r j "
	echo " UVOT  : u b v "
	echo " BOTH  : b v "
	echo "------------------------------------------------------------"

#-------------------------------------------------------------------------------
# plot_smarts_and_uvot_3c454
plot_smarts_and_uvot_3c454

	reset_graph

	define whichband ? < Which band [b|v] : >
	define 9 $whichband

	notation -4 5 -4 4 
	limits all_$9_tjd all_$9_lgf
	limits all_$9_tjd -6.8 -5.8
	limits 54675 54820 -6.8 -5.8

	box
	xlabel Time [TJD]
	ylabel "mag" ($9)

	ptype 4 3 
	ctype 3 points uvot_$9_tjd   uvot_$9_lgf
	ctype 5 points smarts_$9_tjd smarts_$9_lgf
	ctype 2 

#-------------------------------------------------------------------------------
# plot_smarts_and_uvot_f_3c454
plot_smarts_and_uvot_f_3c454

	reset_graph

	define whichband ? < Which band [b|v] : >
	define 9 $whichband

	notation -4 5 -4 4 
	# limits all_f_$9_tjd -6.8 -5.8
	limits all_f_$9_tjd all_f_$9_lgf
	limits 54675 54820 -11.2 -10.4
	limits all_f_$9_tjd -11.2 -10.4

	box
	xlabel Time [TJD]
	ylabel \\nu F_\\nu ($9)

	ptype 4 3 
	ctype 3 points uvot_f_$9_tjd   uvot_f_$9_lgf
	ctype 5 points smarts_f_$9_tjd smarts_f_$9_lgf
	ctype 2 

#---------------------------------------------------------------------------
# smarts_fvar   [probably specialized for the case of 3C 454.3]
smarts_fvar  

	echo "-------------------------------------------------------------"
	define end ? < Prefix of arrays [e.g. smarts_j]: >
	define 1 $end

	define t1 ? < Start Time : >
	define t2 ? < End   Time : >

	set time    local
	set test_y  local
	set sigma_y local
	set test_w  local

	set time   = $1_tjd
	set test_y = $1_f     if(time>$t1 && time<$t2 && $1_f>0)
	set test_w = $1_ef    if(time>$t1 && time<$t2 && $1_f>0)
	set sigma_y = test_w

	mystats test_y mean_y  width_y  absdev_y skew_y
	median  test_y med

	define N local
	define N (dimen(test_y))

	echo "-----------------------------------------------------------------"
	echo "* DATA:" $end 
	echo "*       N =" $(dimen(test_y))
	echo "*"
	echo "* Average Flux    =" $mean_y   
	echo "* sigma           =" $width_y  
	echo "* Skewness        =" $skew_y   
	# echo "* Median          =" $med

	#-----------------------------------------------------------
	# "new" method, based on defining an array whose average
	# represents sigma^2_rms (=F_var^2), and whose variance is the related
	# to the uncertainty on F_var
	#
	echo "-----------------------------------------------------------------"
	echo "*** Alternative (array based) computation: "

	set sigma2_rms = ((test_y - $mean_y)**2.0 - sigma_y**2.0)/($mean_y**2.0)
	mystats sigma2_rms s2r_mean s2r_sigma dum1 dum2

	echo "  Average sigma2  =" $s2r_mean 
	echo "  sigma(sigma2)   =" $s2r_sigma
	echo "  err(sigma2)     =" $($s2r_sigma/sqrt($N))

	define fvar_alt     $( sqrt($s2r_mean) )
	define s2r_err      $( $s2r_sigma/sqrt($N) )
        define err_fvar_alt $( ($s2r_err/2.0/$fvar_alt) )
	echo "==> Alt F_var : " $fvar_alt "+/-" $err_fvar_alt

	#-----------------------------------------------------------
	# "old" method, by defining separate pieces as variables.
	# Origin of expression for error on fvar UNKNOWN (?)
	#
	define sigma_f2 ( sum((test_y - $mean_y)**2.)/$N )
	define delta_f2 ( sum(test_w*test_w)/$N )

	define fvar ( sqrt($sigma_f2 - $delta_f2)/$mean_y )
	define err_fvar ($fvar*($sigma_f2/$delta_f2)*sqrt(2/$(dimen(test_y)-1))/2/($sigma_f2/$delta_f2-1) )

	define err_fvar_vaughan ( sqrt( ( sqrt(1./2./$N)*$delta_f2/$mean_y/$fvar )**2. + ( sqrt($delta_f2/$N)/$mean_y )**2. ) )

	# echo "-----------------------------------------------------------------"
	# echo "* Sigma_F =" $(sqrt($sigma_f2))      
	# echo "* Delta_F =" $(sqrt($delta_f2))
	echo "-----------------------------------------------------------------"
	echo "*   F_Var =" $fvar "+/-" $err_fvar 
	echo "                       alt: "$err_fvar_alt "[new/old : "$($err_fvar_alt/$err_fvar)"]"
	echo "                   vaughan: "$err_fvar_vaughan
	echo "-----------------------------------------------------------------"

#-------------------------------------------------------------------------------
# print_smarts_uvot_3c454
print_smarts_uvot_3c454

	set dummy=1,dimen(all_b_tjd)
	print smarts_uvot_b.dat    ' %4d  %12.5f  %4d  %10.4e  %10.4e\n' < dummy all_b_tjd dummy all_b_f all_b_ef >

	set dummy=1,dimen(all_v_tjd)
	print smarts_uvot_v.dat    ' %4d  %12.5f  %4d  %10.4e  %10.4e\n' < dummy all_v_tjd dummy all_v_f all_v_ef >
	# print smarts_uvot_b_lg.dat ' %4d  %12.5f  %4d  %10.4f  %10.4f\n' < dummy all_b_tjd dummy all_b_lgf all_b_ef >
	# print smarts_uvot_v_lg.dat ' %4d  %12.5f  %4d  %10.4f  %10.4f\n' < dummy all_v_tjd dummy all_v_lgf all_v_ef >

	set dummy=1,dimen(all_f_b_tjd)
	print smarts_uvot_b_vFv.dat    ' %4d  %12.5f  %4d  %10.4e  %10.4e\n' < dummy all_f_b_tjd dummy all_f_b_f all_f_b_ef >

	set dummy=1,dimen(all_f_v_tjd)
	print smarts_uvot_v_vFv.dat    ' %4d  %12.5f  %4d  %10.4e  %10.4e\n' < dummy all_f_v_tjd dummy all_f_v_f all_f_v_ef >

#===============================================================================
