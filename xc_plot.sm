##-------------------------------------------------------------------------------
## set_read_sim_gf
## It defines 
##    + the TOP data directory (XC_DATA) 
##    + the subdirectory to use (SIMDIR)
##    + some additional case-dependent variables
## Reads 'main_parameters.dat'
## 
set_read_sim_gf 01 

        define XC_DATA "/home/gfossati/Science/Xuhui/xc_data"

        if( $?1 ) { 
           define which_sim $1
        } else { 
           echo "------------------------------"
           echo "Simulation cases: "
           #systemcall find $XC_DATA/simulations -mindepth 1 -type d -printf '   = %f\\n' | egrep -v 'lightcurves|SM_macro|observ' | sort 
           systemcall find $XC_DATA/simulations -mindepth 1 -maxdepth 1 -printf '   = %f\\n' | egrep -v 'lightcurves|SM_macro|observ' | egrep '= ext|= hl' | sort 
           echo "------------------------------"

           define which_sim ? < Simulation directory name [e.g. bs_new_50] : > 
        }

        define SIMDIR "simulations/"$which_sim

        define flag_fg_case (0)
        define flag_ext     (0)
        define flag_hl      (0)

        #--------------------------------------------------
        # defining also 'sim_case' for legacy issues, and to play it safe.
        #--------------------------------------------------
        if( substr('$which_sim',0,2) == 'st' ) { define sim_case (1) }
        if( substr('$which_sim',0,2) == 'fg' ) {
           define sim_case (2)
           define flag_fg_case (1)
        } 
        if( substr('$which_sim',0,2) == 'bs' ) { define sim_case (3) }
        if( substr('$which_sim',0,2) == 'te' ) { define sim_case (4) }

        #--------------------------------------------------
        if( substr('$which_sim',0,2) == 'ex' ) { 
           define flag_ext (1)
           define sim_case (5)
        } 
        if( substr('$which_sim',0,2) == 'hl' ) { 
           define flag_hl  (1)
        }
        #--------------------------------------------------

        if( substr('$which_sim',0,4) == 'hla1' ) { define sim_case (11) }
        if( substr('$which_sim',0,4) == 'hla2' ) { define sim_case (12) }
        if( substr('$which_sim',0,4) == 'hlb1' ) { define sim_case (21) }

        if( substr('$which_sim',0,4) == 'hlc1' ) { define sim_case (31) }
	   if( $(strlen('$which_sim')) >= 5 ) {
               if( substr('$which_sim',0,5) == 'hlc1b' ) { define sim_case (35) }
	   }
        if( substr('$which_sim',0,4) == 'hlc2' ) { define sim_case (32) }
        if( substr('$which_sim',0,4) == 'hlc4' ) { define sim_case (34) }
        #if( substr('$which_sim',0,4) == 'hlc5' ) { define sim_case (35) }

        if( substr('$which_sim',0,4) == 'hld1' ) { define sim_case (41)
	   if( $(strlen('$which_sim')) >= 5 ) {
               if( substr('$which_sim',0,5) == 'hld1b' ) { define sim_case (46) }
	   }
        }
        if( substr('$which_sim',0,4) == 'hld2' ) { define sim_case (42) }
        if( substr('$which_sim',0,4) == 'hld3' ) { define sim_case (43) }
        #if( substr('$which_sim',0,4) == 'hld4' ) { define sim_case (44) }
        #if( substr('$which_sim',0,4) == 'hld5' ) { define sim_case (45) }
        if( substr('$which_sim',0,4) == 'hld4' ) { define sim_case (44)
	   if( $(strlen('$which_sim')) >= 4 ) {
               if( substr('$which_sim',0,5) == 'hld4b' ) { define sim_case (45) }
	   }
        }
        if( substr('$which_sim',0,4) == 'hle1' ) { define sim_case (51) }
        if( substr('$which_sim',0,4) == 'hlf1' ) { define sim_case (61) }
        if( substr('$which_sim',0,4) == 'hlg1' ) { define sim_case (71) }
        if( substr('$which_sim',0,4) == 'hlh1' || substr('$which_sim',0,4) == 'hlh2' || substr('$which_sim',0,4) == 'hlh3' ) { define sim_case (81) }
        if( substr('$which_sim',0,4) == 'hli1' || substr('$which_sim',0,4) == 'hli2' ) { define sim_case (91) }
        if( substr('$which_sim',0,4) == 'hlj1' || substr('$which_sim',0,4) == 'hlj2' ) { define sim_case (101) }
        #--------------------------------------------------

        #----------------------------------------------------------------------
        # Sets times for SEDs to plot
        # NOTE: numbers are 1-based, e.g. 1-30, not vector indices directly
        #----------------------------------------------------------------------
        define flag_ext_nf (0)   # DEFAULT
        if( $sim_case ==  1 ) { set times_for_seds = < 1  8 16 22 > }
        if( $sim_case ==  2 ) { set times_for_seds = < 1  8 16 22 > }
        if( $sim_case ==  2 ) { set times_for_seds = < 1  8 16 22 > }
        if( $sim_case ==  3 ) { set times_for_seds = < 1 13 20 25 > }
        if( $sim_case ==  4 ) { set times_for_seds = < 1  8 15 22 > }
        if( $sim_case ==  5 ) {
           set times_for_seds = < 7 10 19 28 > 
           if( substr('$which_sim',0,0) == 'ext15nf_bb' || \
               substr('$which_sim',0,0) == 'ext15nf'     ) {
              set times_for_seds = < 6 13 20 27 >   # rev
           }
           if( substr('$which_sim',0,0) == 'ext15' ) {
              set times_for_seds = < 4 12 21 30 >   # rev
              set times_for_seds = < 4 12 30 39 >   # rev
           }
           if( substr('$which_sim',0,0) == 'ext15_highgmin' ) { 
              set times_for_seds = < 4 12 22 30 >   # rev
           }
           if( substr('$which_sim',0,0) == 'ext15ir' ) { 
              set times_for_seds = < 3 10 19 28 >   # rev : for SED (but needs editing of the label)
              set times_for_seds = < 4 10 19 28 >   # rev : for l.c.
           }
           if( substr('$which_sim',0,0) == 'ext25' ) { 
              set times_for_seds = < 5 10 19 28 >   # rev
           }
           if( substr('$which_sim',0,0) == 'ext_ssc' ) { 
              set times_for_seds = < 6  9 15 23 >   # rev
           }
           if( substr('$which_sim',0,0) == 'ext15nf_bb' || \
               substr('$which_sim',0,0) == 'ext15nf'     ) {
              define flag_ext_nf (1)
           } else {
              define flag_ext_nf (0)
           }
        }
        #--------------------------------------------------
	define dn (6)
	define dn (5)
        if( $sim_case == 11 && $dn == 5 ) { set times_for_seds = < 1 10 15 20 > }  # hla1 dn=5
        if( $sim_case == 11 && $dn == 6 ) { set times_for_seds = < 1  9 15 21 > }  # hla1 dn=6
        #----------
        if( $sim_case == 12 && $dn == 5 ) { set times_for_seds = < 11 17 22 27 > }  # hla2 dn=5  # n(t_0) = 10.6
       #if( $sim_case == 12 && $dn == 5 ) { set times_for_seds = < 10 11 21 22 > }  # hla2 dn=5  # 
       #if( $sim_case == 12 && $dn == 5 ) { set times_for_seds = < 10 16 21 26 > }  # hla2 dn=5  # 
        if( $sim_case == 12 && $dn == 6 ) { set times_for_seds = < 10 16 22 28 > }  # hla2 dn=6  
        #----------
        if( $sim_case == 21 && $dn == 5 ) { set times_for_seds = < 1  9 14 19 > }  # hlb1 dn=5
        if( $sim_case == 21 && $dn == 6 ) { set times_for_seds = < 1  8 14 20 > }  # hlb1 dn=6
        #----------
        if( $sim_case == 31 && $dn == 0 ) { set times_for_seds = < 1  7 13 29 > }  # hlc1 
        if( $sim_case == 31 && $dn == 5 ) { set times_for_seds = < 1  8 13 18 > }  # hlc1 dn=5
        if( $sim_case == 31 && $dn == 6 ) { set times_for_seds = < 1  7 13 19 > }  # hlc1 dn=6
	#
        if( $sim_case == 32 && $dn == 0 ) { set times_for_seds = < 1  7 13 29 > }  # hlc2 
        if( $sim_case == 32 && $dn == 5 ) { set times_for_seds = < 1  8 13 18 > }  # hlc2 dn=5
        if( $sim_case == 32 && $dn == 6 ) { set times_for_seds = < 1  7 13 19 > }  # hlc2 dn=6
	#
        if( $sim_case == 35 && $dn == 0 ) { set times_for_seds = < 1  7 13 29 > }  # hlc1b 
        if( $sim_case == 35 && $dn == 5 ) { set times_for_seds = < 1  8 13 18 > }  # hlc1b dn=5
        if( $sim_case == 35 && $dn == 6 ) { set times_for_seds = < 1  7 13 19 > }  # hlc1b dn=6
        #----------
        if( $sim_case == 41 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hld1 
        if( $sim_case == 41 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hld1 dn=5
        if( $sim_case == 41 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hld1 dn=6
	#
        if( $sim_case == 46 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hld1b 
        if( $sim_case == 46 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hld1b dn=5
        if( $sim_case == 46 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hld1b dn=6
	#
        if( $sim_case == 42 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hld2 
        if( $sim_case == 42 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hld2 dn=5
        if( $sim_case == 42 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hld2 dn=6
	#
        if( $sim_case == 43 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hld3 
        if( $sim_case == 43 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hld3 dn=5
        if( $sim_case == 43 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hld3 dn=6
	#
        if( $sim_case == 44 && $dn == 0 ) { set times_for_seds = < 1 11 18 28 > }  # hld4 LATE TIMES
        if( $sim_case == 44 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hld4 
        if( $sim_case == 44 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hld4 dn=5
        if( $sim_case == 44 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hld4 dn=6
	#
        if( $sim_case == 45 && $dn == 0 ) { set times_for_seds = < 1 11 18 28 > }  # hld4b LATE TIMES
        if( $sim_case == 45 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hld4b 
        if( $sim_case == 45 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hld4b dn=5
        if( $sim_case == 45 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hld4b dn=6
        #----------
        if( $sim_case == 51 && $dn == 0 ) { set times_for_seds = < 1  8 28 30 > }  # hle1
        if( $sim_case == 51 && $dn == 5 ) { set times_for_seds = < 1  9 14 19 > }  # hle1 dn=5
        if( $sim_case == 51 && $dn == 6 ) { set times_for_seds = < 1  8 14 20 > }  # hle1 dn=6
        #
        if( $sim_case == 61 && $dn == 0 ) { set times_for_seds = < 1  5 11 28 > }  # hlf1 
        if( $sim_case == 61 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hlf1 dn=5
        if( $sim_case == 61 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hlf1 dn=6
        #
        if( $sim_case == 71 && $dn == 0 ) { set times_for_seds = < 1 28 29 30 > }  # hlg1 
        if( $sim_case == 71 && $dn == 5 ) { set times_for_seds = < 1 10 15 20 > }  # hlg1(2) dn=5
        if( $sim_case == 71 && $dn == 6 ) { set times_for_seds = < 1  9 15 21 > }  # hlg1(2) dn=6
        #--------------------------------------------------
	#
        if( $sim_case == 81 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hlh2 
        if( $sim_case == 81 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hlh2 dn=5
        if( $sim_case == 81 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hlh2 dn=6
	#
        if( $sim_case == 91 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hli2 
        if( $sim_case == 91 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hli2 dn=5
        if( $sim_case == 91 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hli2 dn=6
	#
        if( $sim_case == 101 && $dn == 0 ) { set times_for_seds = < 1  5 11 29 > }  # hlj2 
        if( $sim_case == 101 && $dn == 5 ) { set times_for_seds = < 1  6 11 16 > }  # hlj2 dn=5
        if( $sim_case == 101 && $dn == 6 ) { set times_for_seds = < 1  5 11 17 > }  # hlj2 dn=6
        #--------------------------------------------------

        #------------------------------------------------------------
        define cty_sed1 "deepskyblue2"
        define cty_sed2 "2"
        define cty_sed3 "red2"
        define cty_sed4 "green3"

        define surf_421  54.337
        define surf_1510 56.42

        #------------------------------------------------------------
	# flag_lc_alt controls some light curve plotting properties
	#
       #define flag_lc_alt (0)
        define flag_lc_alt (2)  # for plotting: 3 X-ray               light curves
        define flag_lc_alt (1)  # for plotting: 2 X-ray & 1 gamma-ray light curves
        if( $flag_ext ) { 
           define flag_lc_alt (0)
        }
        
        #----------------------------------------
        # time limits for X axes
        #----------------------------------------
        if( $flag_ext == 0 ) {
           define tplotmin ( -15)
           define tplotmax (  70)
           define tplotmin ( -15)
           define tplotmax (  40)
           define tick_s   (   2)
           define tick_l   (  10)
        } else {
           define tplotmin (-350)
           define tplotmax ( 950)
           define tick_s   (  50)
           define tick_l   ( 200)
           if( $flag_ext_nf ) { 
              define tplotmin (   0)
              define tplotmax (1300)
           }
        }

        #------------------------------------------------------------
        # reading parameters and SEDs
        #------------------------------------------------------------
        data "$!XC_DATA/$!SIMDIR/main_parameters.dat"
        define   n_z    read  1 3 
        define   n_r    read  2 3 
        define sizeZ    read  3 3 
        define sizeR    read  4 3 

        define Gamma    read 21 3
        define Bfield   read  6 3 

	define Ne_init  read  7 3
	define g1_init  read  8 3
	define g2_init  read  9 3
	define p_init   read 10 3

	define Q_pickup read 18 3 
	define g_pickup read 19 3 

	define g1_inj   read 13 3
	define g2_inj   read 14 3 
	define p_inj    read 15 3 
	define L_inj    read 17 3

        define r_esc    read 11 3 
        define r_acc    read 12 3 
        define t_inj    read 16 3 

	# cheat to allow for no-shock/no-injection cases
	if( $t_inj > 1.0e9 ) { define t_inj (0.0) }

	#---------------------------------------
        define R_16              ($sizeR/1.0e16)
        define Z_16              ($sizeZ/1.0e16)
        define time_dZ           ($sizeZ/$n_z/3.0e10)
        define lg_volume_Z_slice      (lg($pi) + 48.0 + 2.0*lg($R_16)      + lg($Z_16/$n_z))
        define lg_volume_R_ring_basic (lg($pi) + 48.0 + 2.0*lg($R_16/$n_r) + lg($Z_16/$n_z))

        #------------------------------------------------------------
        data "$!XC_DATA/$!SIMDIR/seds.dat"
        define t_seds_start       read 1 2
        define t_seds_end         read 1 3
        define t_seds_dt          read 1 5
        define sed_scaling_factor read 3 2   #GF# NEW
           
        define t_seds_start_obs $( $t_seds_start - $t_inj/$Gamma )

        data "$!XC_DATA/$!SIMDIR/times.dat"
        read < tm 4 >
        set tm_obs = (tm - $t_inj)/$Gamma
	define t_last (tm_obs[dimen(tm_obs)-1])
	delete tm
	delete tm_obs

        echo "+--------------------------------------"
        echo "| Parameters read from data file"
        echo "| "
        echo "|  t_last_obs (elec)    : "$t_last
        echo "|  t_inj                : "$t_inj
        echo "|  t_start (SEDs)       : "$t_seds_start
        echo "|  t_end   (SEDs)       : "$t_seds_end
        echo "|  dt      (SEDs)       : "$t_seds_dt
        echo "|  SED scaling factor   : "$sed_scaling_factor
        echo "+--------------------------------------"
        echo "|  OBS. start time of SED #1 : "$t_seds_start_obs
        echo "+--------------------------------------"

##-------------------------------------------------------------------------------
## combine_runs_lc_seds 
combine_runs_lc_seds 

        define which_family ? < Family of runs [hla1|hlb1|hlc1|hlc1b|hlc2|hld1|hld1b|hld2|hld3|hld4|hld4b] : > 
        define new_and_old  ? <                                                  ALL (new+old) / New [1|2] : >

        if( substr('$which_family',0,0) == 'hla1' ) {   
	   # CHECKED : CLEAN (o1 r1 r4 r5)
	   # Why runs r2 and r3 were disgarded? --> much lower statistics?  shorter duration?
           set subcases = < o1 r1 r2 r3 r4 r5 > 
           set subcases = < o1 r1       r4 r5 >  # comb_v2
           set subcases = <    r1 r2 r3 r4 r5 > 
        }
        if( substr('$which_family',0,0) == 'hlb1' ) {   
	   # CHECKED : CLEAN
           set subcases = < o1 r1 r2 > 
        }
        if( substr('$which_family',0,0) == 'hlc1' ) {   
	   # CHECKED : ~~ CLEAN (o1 r1 r2 r5) 
	   # There is the problem that 'o1' does not have the 'alt' light curve, but 
	   #    probably when I made the original 'comb_all' it was on davinci and
	   #    I actually had the data for it... "probably", "likely"...
           # Q: Why runs r3 and r4 were disgarded? --> much lower statistics?  shorter duration?
           set subcases = < o1 r1 r2 r3 r4 r5 > 
           set subcases = < o1    r2       r5 >    # apparently 'comb_new' was this.
           set subcases = < o1 r1 r2       r5 >    # 'comb_v2' 
           set subcases = <    r1 r2 r3 r4 r5 >    # 'comb_all'
        }
        if( substr('$which_family',0,0) == 'hlc1b' ) {   
	   # CHECKED : CLEAN
           set subcases = < r1 r2 r3 > 
        }
        if( substr('$which_family',0,0) == 'hlc2' ) {   
	   # CHECKED : CLEAN
           set subcases = < r1 r2 > 
        }
        if( substr('$which_family',0,0) == 'hld1' ) {   
	   # CHECKED : CLEAN (o1 r1 r2 r5)
	   # Q: Why runs r3 and r4 were disgarded? --> much lower statistics?  shorter duration?
           set subcases = < o1 r1 r2 r3 r4 r5 > 
           set subcases = < o1 r1 r2       r5 >    # 'comb_v2'
           set subcases = <    r1 r2 r3 r4 r5 >    # 'comb_all'
        }
        if( substr('$which_family',0,0) == 'hld1b' ) {   
	   # CHECKED : CLEAN
           set subcases = < r1 r2 r3 r4 r5 r6 > 
        }
        if( substr('$which_family',0,0) == 'hld2' ) {   
	   # CHECKED : CLEAN
           set subcases = < r1 r2 r3 xc1 > 
        }
        if( substr('$which_family',0,0) == 'hld3' ) {   
	   # CHECKED : CLEAN
           set subcases = < r1 xc1 > 
        }
        if( substr('$which_family',0,0) == 'hld4' ) {   
	   # CHECKED : CLEAN
           set subcases = < r1 r2 > 
        }
        #if( substr('$which_family',0,0) == 'hld5' ) 
        if( substr('$which_family',0,0) == 'hld4b' ) {   
	   # CHECKED : CLEAN
           set subcases = < r1 r2 r3 r4 r5 > 
        }

	define flag_do_2bb (0)
	define flag_do_2bb (1)

	# MUST IMPROVE THIS: TOO DUM!
        if( $new_and_old == 2 ) { 
            set subcases = pop(1,subcases)
        } 

        if( $new_and_old == 1 ) { 
           define prefix "comb_all"
        } else {
           define prefix "comb_new"
        }

        define 1 $which_family

        foreach 2 subcases {

           set_read_sim_gf $1_$2

           #----------------------------------------
           # reading LIGHT CURVES
           #----------------------------------------
           # 7 standard 
           #----------------------------------------
           data "$!XC_DATA/$!SIMDIR/lc_07_std.dat"
           define lum_scaling_factor read 10 2   
           #echo "|" 
           #echo "|  LC FG scaling factor: "$lum_scaling_factor
           #echo "+--------------------------------------"
           read < x 1  lc7s_$2_1 2  lc7s_$2_2  3  lc7s_$2_3  4  lc7s_$2_4  5  lc7s_$2_5  6  lc7s_$2_6  7  lc7s_$2_7  8 >
           read <     nlc7s_$2_1 9 nlc7s_$2_2 10 nlc7s_$2_3 11 nlc7s_$2_4 12 nlc7s_$2_5 13 nlc7s_$2_6 14 nlc7s_$2_7 15 >
           # scaling
           do 9=1,7 {
              set lc7s_$2_$9 = lc7s_$2_$9 - 44.0 - lg($lum_scaling_factor)
           }
           
           #----------------------------------------
           # 7 alt
           #----------------------------------------
           data "$!XC_DATA/$!SIMDIR/lc_07_alt.dat" 
           define lum_scaling_factor read 10 2   
           read < x 1  lc7a_$2_1 2  lc7a_$2_2  3  lc7a_$2_3  4  lc7a_$2_4  5  lc7a_$2_5  6  lc7a_$2_6  7  lc7a_$2_7  8 >
           read <     nlc7a_$2_1 9 nlc7a_$2_2 10 nlc7a_$2_3 11 nlc7a_$2_4 12 nlc7a_$2_5 13 nlc7a_$2_6 14 nlc7a_$2_7 15 >
           # scaling
           do 9=1,7 {
              set lc7a_$2_$9 = lc7a_$2_$9 - 44.0 - lg($lum_scaling_factor)
           }
           
           #----------------------------------------
           # 2 broad band
           #----------------------------------------
	   if( $flag_do_2bb == 1 ) {
           data "$!XC_DATA/$!SIMDIR/lc_02_bb.dat" 
           define lum_scaling_factor read 5 2   
           read < xbb 1  lc2bb_$2_1 2  lc2bb_$2_2  3 >
           read <       nlc2bb_$2_1 4 nlc2bb_$2_2  5 >
           # scaling
           do 9=1,2 {
              set lc2bb_$2_$9 = lc2bb_$2_$9 - 44.0 - lg($lum_scaling_factor)
           }
           }
           
           #-----------------------------------------------------------
           # reading SEDs
           #-----------------------------------------------------------
           data "$!XC_DATA/$!SIMDIR/seds.dat"
           read < nu 1         sed_$2_1   2 sed_$2_2   3 sed_$2_3   4 sed_$2_4   5 sed_$2_5   6 sed_$2_6   7 sed_$2_7   8 sed_$2_8   9 sed_$2_9  10 >
           read < sed_$2_10 11 sed_$2_11 12 sed_$2_12 13 sed_$2_13 14 sed_$2_14 15 sed_$2_15 16 sed_$2_16 17 sed_$2_17 18 sed_$2_18 19 sed_$2_19 20 > 
           read < sed_$2_20 21 sed_$2_21 22 sed_$2_22 23 sed_$2_23 24 sed_$2_24 25 sed_$2_25 26 sed_$2_26 27 sed_$2_27 28 sed_$2_28 29 sed_$2_29 30 sed_$2_30 31  > 
           # scaling
           do 3=1,30 {
              set sed_$2_$3 = sed_$2_$3 - 44.0 - lg($sed_scaling_factor)
           }

           data "$!XC_DATA/$!SIMDIR/seds_zoom.dat"
           read < nuz 1         sedz_$2_1   2 sedz_$2_2   3 sedz_$2_3   4 sedz_$2_4   5 sedz_$2_5   6 sedz_$2_6   7 sedz_$2_7   8 sedz_$2_8   9 sedz_$2_9  10 >
           read < sedz_$2_10 11 sedz_$2_11 12 sedz_$2_12 13 sedz_$2_13 14 sedz_$2_14 15 sedz_$2_15 16 sedz_$2_16 17 sedz_$2_17 18 sedz_$2_18 19 sedz_$2_19 20 > 
           read < sedz_$2_20 21 sedz_$2_21 22 sedz_$2_22 23 sedz_$2_23 24 sedz_$2_24 25 sedz_$2_25 26 sedz_$2_26 27 sedz_$2_27 28 sedz_$2_28 29 sedz_$2_29 30 sedz_$2_30 31  > 
           # scaling
           do 3=1,30 {
              set sedz_$2_$3 = sedz_$2_$3 - 44.0 - lg($sed_scaling_factor)
           }

        }

        # initialize for sum, LINEAR SCALE (/1e44)
        do 9=1,7 {
           set  lc7s_tot_$9 = 0.0*x
           set nlc7s_tot_$9 = 0.0*x
           set  lc7a_tot_$9 = 0.0*x
           set nlc7a_tot_$9 = 0.0*x
        }
	if( $flag_do_2bb == 1 ) {
        do 9=1,2 {
           set  lc2bb_tot_$9 = 0.0*x
           set nlc2bb_tot_$9 = 0.0*x
        }
        }
        do 9=1,30 {
           set  sed_tot_$9 = 0.0*nu 
           set sedz_tot_$9 = 0.0*nuz
        }

        #-----------------------------------------------------------
        # summing over cases, done in linear scale
        #-----------------------------------------------------------
        #-----------------------------------------------------------
	# SEDs first, assuming there are 30 of them
        #-----------------------------------------------------------
        #DEL# set subcases2 = pop(1,subcases)
        set subcases2 = subcases
        do 3=1,30 {
           foreach 2 subcases2 {
              set sed_tot_$3  = sed_tot_$3  + 10.0**sed_$2_$3
              set sedz_tot_$3 = sedz_tot_$3 + 10.0**sedz_$2_$3
           }
           set sed_$3  = sed_tot_$3/dimen(subcases)
           set sedz_$3 = sedz_tot_$3/dimen(subcases)
           set sed_$3  = lg(sed_$3)  + 44.0
           set sedz_$3 = lg(sedz_$3) + 44.0
        }

        foreach 4 < 7s 7a > { 
           do 3=1,7 {
              foreach 2 subcases2 {
                 set  lc$4_tot_$3 =  lc$4_tot_$3 + 10.0**lc$4_$2_$3
                 set nlc$4_tot_$3 = nlc$4_tot_$3 + nlc$4_$2_$3
              }
              set  lc$4_$3 =  lc$4_tot_$3/dimen(subcases)
              set nlc$4_$3 = nlc$4_tot_$3
              set  lc$4_$3 =  lg(lc$4_$3) + 44.0 
           }
        }
	if( $flag_do_2bb == 1 ) {
        foreach 4 < 2bb > { 
           do 3=1,2 {
              foreach 2 subcases2 {
                 set  lc$4_tot_$3 =  lc$4_tot_$3 + 10.0**lc$4_$2_$3
                 set nlc$4_tot_$3 = nlc$4_tot_$3 + nlc$4_$2_$3
              }
              set  lc$4_$3 =  lc$4_tot_$3/dimen(subcases)
              set nlc$4_$3 = nlc$4_tot_$3
              set  lc$4_$3 =  lg(lc$4_$3) + 44.0 
           }
        }
        }

        define print_noheader 1
        define 9 $prefix
        #define fmt_lc " %12.6e %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f    %8d %8d %8d %8d %8d %8d %8d"
        define fmt_lc " %12.6e %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f %9.4f    %8.0f %8.0f %8.0f %8.0f %8.0f %8.0f %8.0f"
        systemcall egrep '^\#' "$!XC_DATA/$!SIMDIR/lc_07_std.dat" >! $9_lc_07_std.dat 
        print + $9_lc_07_std.dat '$!fmt_lc\n' < x  lc7s_1  lc7s_2  lc7s_3  lc7s_4  lc7s_5  lc7s_6 lc7s_7 \
                                                  nlc7s_1 nlc7s_2 nlc7s_3 nlc7s_4 nlc7s_5 nlc7s_6 nlc7s_7 >

        systemcall egrep '^\#' "$!XC_DATA/$!SIMDIR/lc_07_alt.dat" >! $9_lc_07_alt.dat 
        print + $9_lc_07_alt.dat '$!fmt_lc\n' < x  lc7a_1  lc7a_2  lc7a_3  lc7a_4  lc7a_5  lc7a_6 lc7a_7 \
                                                  nlc7a_1 nlc7a_2 nlc7a_3 nlc7a_4 nlc7a_5 nlc7a_6 nlc7a_7 >

	if( $flag_do_2bb == 1 ) {
        #define fmt_lc " %12.6e %9.4f %9.4f    %8d %8d"
        define fmt_lc " %12.6e %9.4f %9.4f    %8.0f %8.0f"
        systemcall egrep '^\#' "$!XC_DATA/$!SIMDIR/lc_02_bb.dat" >! $9_lc_02_bb.dat 
        print + $9_lc_02_bb.dat '$!fmt_lc\n' < x  lc2bb_1  lc2bb_2 \
                                                 nlc2bb_1 nlc2bb_2 >
	}

        define fmt_seds_10 "%8.4f %8.4f %8.4f %8.4f %8.4f %8.4f %8.4f %8.4f %8.4f %8.4f"
        systemcall egrep '^\#' "$!XC_DATA/$!SIMDIR/seds.dat" >! $9_seds.dat 
        print + $9_seds.dat ' %12.6e $!fmt_seds_10 $!fmt_seds_10 $!fmt_seds_10\n' < nu sed_1  sed_2  sed_3  sed_4  sed_5  sed_6  sed_7  sed_8  sed_9 sed_10 \
                                                                                      sed_11 sed_12 sed_13 sed_14 sed_15 sed_16 sed_17 sed_18 sed_19 sed_20 \
                                                                                      sed_21 sed_22 sed_23 sed_24 sed_25 sed_26 sed_27 sed_28 sed_29 sed_30 >

        systemcall egrep '^\#' "$!XC_DATA/$!SIMDIR/seds_zoom.dat" >! $9_seds_zoom.dat 
        print + $9_seds_zoom.dat ' %12.6e $!fmt_seds_10 $!fmt_seds_10 $!fmt_seds_10\n' < nuz sedz_1  sedz_2  sedz_3  sedz_4  sedz_5  sedz_6  sedz_7  sedz_8  sedz_9 sedz_10 \
                                                                                            sedz_11 sedz_12 sedz_13 sedz_14 sedz_15 sedz_16 sedz_17 sedz_18 sedz_19 sedz_20 \
                                                                                            sedz_21 sedz_22 sedz_23 sedz_24 sedz_25 sedz_26 sedz_27 sedz_28 sedz_29 sedz_30 >

        define print_noheader 0

pppp
        systemcall head -10 "$!XC_DATA/$!SIMDIR/lc_07_std.dat" >> comb_lc_07_std.dat 
        print + comb_lc_07_std.dat '%12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %d %d %d %d %d %d %d\n' \
                                                  < x  lc7s_1  lc7s_2  lc7s_3  lc7s_4  lc7s_5  lc7s_6 lc7s_7 \
                                                      nlc7s_1 nlc7s_2 nlc7s_3 nlc7s_4 nlc7s_5 nlc7s_6 nlc7s_7 >

        systemcall head -10 "$!XC_DATA/$!SIMDIR/lc_07_alt.dat" >> comb_lc_07_alt.dat 
        print + comb_lc_07_alt.dat '%12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %d %d %d %d %d %d %d\n' \
                                                  < x  lc7a_1  lc7a_2  lc7a_3  lc7a_4  lc7a_5  lc7a_6 lc7a_7 \
                                                      nlc7a_1 nlc7a_2 nlc7a_3 nlc7a_4 nlc7a_5 nlc7a_6 nlc7a_7 >

        systemcall head -4 "$!XC_DATA/$!SIMDIR/seds.dat" >> comb_seds.dat 
        define fmt10 "%12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e"
        print + comb_seds.dat '$!fmt10 $!fmt10 $!fmt10\n' < sed_1  sed_2  sed_3  sed_4  sed_5  sed_6  sed_7  sed_8  sed_9 sed_10 \
                                                           sed_11 sed_12 sed_13 sed_14 sed_15 sed_16 sed_17 sed_18 sed_19 sed_20 \
                                                           sed_21 sed_22 sed_23 sed_24 sed_25 sed_26 sed_27 sed_28 sed_29 sed_30 >

        systemcall head -4 "$!XC_DATA/$!SIMDIR/seds_zoom.dat" >> comb_seds_zoom.dat 
        define fmt10 "%12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e %12.6e"
        print + comb_seds_zoom.dat '$!fmt10 $!fmt10 $!fmt10\n' < sedz_1  sedz_2  sedz_3  sedz_4  sedz_5  sedz_6  sedz_7  sedz_8  sedz_9 sedz_10 \
                                                                sedz_11 sedz_12 sedz_13 sedz_14 sedz_15 sedz_16 sedz_17 sedz_18 sedz_19 sedz_20 \
                                                                sedz_21 sedz_22 sedz_23 sedz_24 sedz_25 sedz_26 sedz_27 sedz_28 sedz_29 sedz_30 >

#-------------------------------------------------------------------------------
# plot_seds  [<run code>] [<smoothing factor, DEF=5>]
plot_seds  02

        reset_graph   # SETTING LOCATION AT: 5500 30000 5500 30000
        # location  5500 30000 4500 30000
        # location  4500 31000 3500 31000

        #lc7: location 5500 30000 4500 30000
        #location 4500 27500 7500 28000
        location 4000 28250 3250 30000

        define sf local
	if( $?2 ) {
           define sf $2
	} else {
           define sf (5)
	}

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }
        
        if( substr('$which_sim',0,2) == 'ex' ) {
           define flag_zoom (0)
        } else {
           define flag_zoom          ? <     Full or zoomed [0|1] : >
        }

        if( $flag_zoom ) { 
           data "$!XC_DATA/$!SIMDIR/seds_zoom.dat"
           define t_seds_start       read 1 2
           define t_seds_end         read 1 3
           define t_seds_dt          read 1 5
           define sed_scaling_factor read 3 2   #GF# NEW
           
           define t_seds_start_obs $( $t_seds_start - $t_inj/$Gamma )
           echo "+--------------------------------------"
           echo "| Parameters UPDATED from ZOOM data file"
           echo "| "
           echo "|  t_start (SEDs)       : "$t_seds_start
           echo "|  t_end (SEDs)         : "$t_seds_end
           echo "|  dt (SEDs)            : "$t_seds_dt
           echo "|  SED scaling factor   : "$sed_scaling_factor
           echo "+--------------------------------------"
           echo "|  start time of SED #1 : "$t_seds_start_obs
           echo "+--------------------------------------"
        } else { 
           data "$!XC_DATA/$!SIMDIR/seds.dat"
        }

        if( substr('$which_sim',0,2) == 'ex' || substr('$which_sim',0,2) == 'hl' ) {
           #echo ">>>> Using given scaling factor "
        } else {
           define sed_scaling_factor ? <       SED scaling factor : >
        }

        if( substr('$which_sim',0,2) == 'ex' ) { 
           define plot_inset ? <  Plot IR/O inset [0|1|2] : > 
        } else {
           define plot_inset (0)
        }

        read < x 1 y1 $(times_for_seds[0]+1) y2 $(times_for_seds[1]+1) y3 $(times_for_seds[2]+1) y4 $(times_for_seds[3]+1) >

        set y1 = y1 - lg($sed_scaling_factor)
        set y2 = y2 - lg($sed_scaling_factor)
        set y3 = y3 - lg($sed_scaling_factor)
        set y4 = y4 - lg($sed_scaling_factor)

        # times used for labels 
        define time11 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[0]-1.) - $t_inj/$Gamma)/1000. ) )
        define time12 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[0]     - $t_inj/$Gamma)/1000. ) ) 
        echo "| checking time11 and time12 : "$time11 $time12
        #if( $time11 < 0 ) { 
        #   define time12 $($time12 - $time11 + 1)
        #   define time11 (0)
        #}
        #define time21 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[1]-1.) - $t_inj/$Gamma)/1000. ) )
        #define time22 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[1]     - $t_inj/$Gamma)/1000. ) )
        #define time31 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[2]-1.) - $t_inj/$Gamma)/1000. ) )
        #define time32 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[2]     - $t_inj/$Gamma)/1000. ) )
        #define time41 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[3]-1.) - $t_inj/$Gamma)/1000. ) )
        #define time42 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[3]     - $t_inj/$Gamma)/1000. ) )

        define time11 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[0]-1.) - $t_inj/$Gamma)/100. )/10. )
        define time12 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[0]     - $t_inj/$Gamma)/100. )/10. ) 
        define time21 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[1]-1.) - $t_inj/$Gamma)/100. )/10. )
        define time22 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[1]     - $t_inj/$Gamma)/100. )/10. )
        define time31 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[2]-1.) - $t_inj/$Gamma)/100. )/10. )
        define time32 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[2]     - $t_inj/$Gamma)/100. )/10. )
        define time41 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[3]-1.) - $t_inj/$Gamma)/100. )/10. )
        define time42 ( int( ($t_seds_start + $t_seds_dt* times_for_seds[3]     - $t_inj/$Gamma)/100. )/10. )

        foreach 4 < 1 2 3 4 > {
            define 1 (1)
            define 2 (2)
           #echo "| times for seds: n, t_i, t_f : "$(times_for_seds[$4-1]) $time$4$1 $time$4$2 
            echo "| times for seds: n, t_i, t_f : "$(sprintf('%3d',$(times_for_seds[$4-1]))) $(sprintf('%6.1f',$(1.00001*$time$4$1 + 1e-5))) $(sprintf('%6.1f',$(1.00001*$time$4$2+1e-5)))
        }

        #-------------------------------------------------
        # Additional SED components
        #-------------------------------------------------

        # separate foreground SED
        if( $flag_fg_case ) { 
           if( $flag_zoom ) { 
              data "$!XC_DATA/$!SIMDIR/sed_fg_zoom.dat"
           } else { 
              data "$!XC_DATA/$!SIMDIR/sed_fg.dat"
           }
           read < fg 2 >
           define fg_scaling_factor read 3 2   #GF# NEW
           echo "| Parameters read from data file"
           echo "| SED FG scaling factor : "$fg_scaling_factor

           set y1  = y1 + fg/$fg_scaling_factor
           set y2  = y2 + fg/$fg_scaling_factor
           set y3  = y3 + fg/$fg_scaling_factor
           set y4  = y4 + fg/$fg_scaling_factor
           set lfg = lg(x*fg/$fg_scaling_factor)
           #GF# smooth lfg lfg_5 5
           mysmooth lfg lfg_5 5
        }
     
        # black body SED
        if( $flag_ext ) { 
           data "$!XC_DATA/$!SIMDIR/blackbody.in"
           read < xfg 1 fg0 2 >

           set lx   = lg(x)
           set lxfg = lg(xfg)
           interp2 lxfg fg0 lx fg
           set y1 = lg( 10.0**y1 + fg )
           set y2 = lg( 10.0**y2 + fg )
           set y3 = lg( 10.0**y3 + fg )
           set y4 = lg( 10.0**y4 + fg )
           set lfg = lg(x*fg)
           #GF# smooth lfg lfg_5 5
           mysmooth lfg lfg_5 5
        }
        #-------------------------------------------------
        
        #-------------------------------------------------
        # Converting into nFn and smoothing
        #-------------------------------------------------
        set lx  = lg(x) + 3
        set ly1 = lg(x) + y1
        set ly2 = lg(x) + y2
        set ly3 = lg(x) + y3
        set ly4 = lg(x) + y4
        #
        #LIN2LOG# after this point things should be ok because here it was converting to log anyway
        #
        #define sf local
        #define sf (5)
        #define sf (0)
        mysmooth ly1 ly1s $sf 
        mysmooth ly2 ly2s $sf
        mysmooth ly3 ly3s $sf
        mysmooth ly4 ly4s $sf

        #-------------------------------------------------
        if( $flag_ext ) {
           define vmin  9.8
           define vmax 25.9
           define nlnmin  43.4
           define nlnmax  48.0
           if( $plot_inset == 1 ) {
              define nlnmin  42.25
              define nlnmax  47.75
           }
           if( $plot_inset == 2 ) {
              define nlnmin  43.4
              define nlnmax  48.9
           }
        } else {
           if( $flag_zoom ) { 
              define vmin 16.8
              define vmax 19.2
              define nlnmin  43.1
              define nlnmax  45.9
           } else { 
              define vmin 12.8
              define vmax 28.4
              define nlnmin  42.2 #42.6
              #define nlnmax  45.8 #46.2
              define nlnmax  46.2 #46.2
           }
        }

        #-------------------------------------------------
        lweight 3
        expand 1.5
        ltype 0 
        ctype 2

        #-------------------------------------------------
        # plot the axes in frequency (bottom) and flux (right) 
        #
        if( $flag_ext ) {
            limits $vmin $vmax $($nlnmin-$surf_1510) $($nlnmax-$surf_1510)
        } else {
            limits $vmin $vmax $($nlnmin-$surf_421)  $($nlnmax-$surf_421)
        }
        if( $flag_zoom ) { 
           ticksize 0.2 1 0.2 1 
        } else { 
           ticksize 1 3 0 0
        }
        box 1 4 4 2
        xlabel "log(\nu) [Hz]"
        relocate ( $($gx2 + 3500) $(($gy1+$gy2)/2.) )
        angle -90
        putlabel 5 "log(\nu F_\nu) [erg s^{-1} cm^{-2}]"
        angle 0

        #-------------------------------------------------
        # plot the data points
        # define min $($min-2)
        limits $fx1 $fx2 $nlnmin $nlnmax

        if( $flag_ext ) {
           #plot_ned_data_1510
           plot_other_data_1510
        } else {  
           plot_ned_data_421
           plot_mw_data_421_jb
           plot_mw_data_421_gf
           plot_new_data_421
        }

        #-------------------------------------------------
        # plot the xlabel in eV (top) and ylabel in Luminosity (left)
        #
        limits $($vmin-14.384) $($vmax-14.384) $nlnmin $nlnmax
        if( $flag_zoom ) { 
           # plot X-ray label in keV instead of eV
           limits $($vmin-17.384) $($vmax-17.384) $nlnmin $nlnmax
           ticksize -1 10 0.2 1
        } else { 
           ticksize  1  3 0.2 1
        }
        ctype 2 
        ltype 0 
        expand 1.5
        box 4 2 1 4
        #ylabel "log(\nu L_\nu) [erg s^{-1}]"
        relocate ( $($gx1-3000) $(0.5*($gy1+$gy2)) ) 
        angle 90
        putlabel 5 "log(\nu L_\nu) [erg s^{-1}]"
        angle 0 

        limits $($vmin-14.384) $($vmax-14.384) $nlnmin $nlnmax

        relocate ( $(($gx1+$gx2)/2.)  $($gy2+2000) )
        if( $flag_zoom == 1 ) { 
           putlabel 5 "E [keV]"
        } else { 
           putlabel 5 "log(E) [eV]"
        }

        define cty_sed1 "deepskyblue2"
        define cty_sed2 "2"
        define cty_sed3 "red2"
        define cty_sed4 "green3"
        lweight 4 
        #GF 06/2012# Why exclude the first SED for the 'hl' cases?
        if( $flag_fg_case || $flag_ext ) {
           ctype $cty_sed1 histogram lx ly1s if( lx > lx[2] )
        }
           ctype $cty_sed1 histogram lx ly1s if( lx > lx[2] )  #GF 06/2012

        ltype 0 
        ctype $cty_sed2 histogram lx ly2s     if( lx > lx[2] )
        ctype $cty_sed3 histogram lx ly3s     if( lx > lx[2] )
        ctype $cty_sed4 histogram lx ly4s     if( lx > lx[2] )

        #if( $flag_ext ) {
        #   limits $vmin $vmax $nlnmin $nlnmax
        #   plot_other_data_1510
        #}

        # plots the BBB
        #ctype 7
        #ltype 2
        #histogram lx lfg_5
        #ctype 0
        #ltype 0

        #limits $vmin $vmax $nlnmin $nlnmax
        #plot_other_data_1510

        lweight 3 

        #-------------------------------------------------
        # Time intervals legend
        #-------------------------------------------------
        expand 1.2
        expand 1.0
        define tlabels_gx0 $($gx1+700)
        if( $plot_inset == 1 ) { 
           define tlabels_gx0 $($gx1+1000)
        } 
        if( $plot_inset == 2 ) { 
           define tlabels_gx0 $($gx2-7000)
        } 
        define dgy (1000)
        #if( $flag_zoom >= 1 ) 
        if( $flag_zoom <= 1 && $flag_ext == 0 ) {
          #ctype $cty_sed2 relocate ( $tlabels_gx0 $($gy1 + 1500 + (4 - 2)*$dgy) ) putlabel 6 "t= "$time21" - "$time22" ks"
          #ctype $cty_sed3 relocate ( $tlabels_gx0 $($gy1 + 1500 + (4 - 3)*$dgy) ) putlabel 6 "t= "$time31" - "$time32" ks"
          #ctype $cty_sed4 relocate ( $tlabels_gx0 $($gy1 + 1500 + (4 - 4)*$dgy) ) putlabel 6 "t= "$time41" - "$time42" ks"
           ctype $cty_sed2 relocate ( $tlabels_gx0 $($gy1 + 1250 + (4 - 2)*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$(1.0001*$time21)))" - "$(sprintf('%.1f',$(1.0001*$time22)))" ks"
           ctype $cty_sed3 relocate ( $tlabels_gx0 $($gy1 + 1250 + (4 - 3)*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$(1.0001*$time31)))" - "$(sprintf('%.1f',$(1.0001*$time32)))" ks"
           ctype $cty_sed4 relocate ( $tlabels_gx0 $($gy1 + 1250 + (4 - 4)*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$(1.0001*$time41)))" - "$(sprintf('%.1f',$(1.0001*$time42)))" ks"
           if( $time11 <0 && $time12 >0 ) { 
              ctype $cty_sed1 relocate ( $tlabels_gx0 $($gy1 + 1250 + (4 - 1)*$dgy) ) putlabel 6 "t= ~0 ks"
           } else {
              ctype $cty_sed1 relocate ( $tlabels_gx0 $($gy1 + 1250 + (4 - 1)*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$(1.0001*$time11)))" - "$(sprintf('%.1f',$(1.00001*$time12)))" ks"
           }

        } else {
           if( $time11 <0 && $time12 >0 ) { 
              ctype $cty_sed1 relocate ( $tlabels_gx0 $($gy2 + 800 - 2*$dgy) ) putlabel 6 "t= ~0 ks"
           } else {
              ctype $cty_sed1 relocate ( $tlabels_gx0 $($gy2 + 800 - 2*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$time11))" - "$(sprintf('%.1f',$time12))" ks"
           }
           ctype $cty_sed2 relocate ( $tlabels_gx0 $($gy2 + 800 - 3*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$time21))" - "$(sprintf('%.1f',$time22))" ks"
           ctype $cty_sed3 relocate ( $tlabels_gx0 $($gy2 + 800 - 4*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$time31))" - "$(sprintf('%.1f',$time32))" ks"
           ctype $cty_sed4 relocate ( $tlabels_gx0 $($gy2 + 800 - 5*$dgy) ) putlabel 6 "t= "$(sprintf('%.1f',$time41))" - "$(sprintf('%.1f',$time42))" ks"
        }
        ctype 0
        expand 1.5
        lweight 3 

        #------------------------------------------------------------
        #location 4500 27500 7500 28000
        define sgx1 $gx1
        define sgx2 $gx2
        define sgy1 $gy1
        define sgy2 $gy2
        echo $sgx1 $sgx2 $sgy1 $sgy2

        if( $plot_inset ) {
           define inset_vmin (13.65)
           define inset_vmax (15.75)
           
           if( $plot_inset == 1 ) {
              define inset_xw ( 6500)
              define inset_yw ( 6500)
              define inset_x0 (17250)
              define inset_y0 ($sgy1+1000)
              #define inset_x0 (18000)
              #define inset_y0 ( 8500)
              define box_str "0 2 1 0"
           }
           if( $plot_inset == 2 ) {
              define inset_xw ( 8500)
              define inset_yw ( 8500)
              define inset_x0 ($sgx1+900)
              define inset_y0 ($sgy2-900-$inset_yw)
              #define inset_x0 ($sgx1+1000)
              #define inset_y0 ($sgy2-1000-$inset_yw)
              define box_str "1 0 0 2"
           }
           location $inset_x0 $($inset_x0+$inset_xw) $inset_y0 $($inset_y0+$inset_yw) 
           
           limits $inset_vmin $inset_vmax 44.6 46.2
           ticksize 0.25 1.0 0.2 1.0 
           expand 1.0
           box $box_str
           
           if( $flag_ext ) {
              #plot_ned_data_1510
              plot_other_data_1510
           }
           limits $($inset_vmin - 14.384) $($inset_vmax - 14.384) 44.6 46.2
           
           lweight 3 
           #LTYPE 1
           if( $flag_fg_case || $flag_ext ) {
               ctype $cty_sed1 histogram lx ly1s if( lx > lx[2] && ly2s > 44 )
           }
           ltype 0 
           ctype $cty_sed2 histogram lx ly2s     if( lx > lx[2] )
           ctype $cty_sed3 histogram lx ly3s     if( lx > lx[2] )
           ctype $cty_sed4 histogram lx ly4s     if( lx > lx[2] )

           if( $flag_ext ) {
              limits $inset_vmin $inset_vmax 44.6 46.2
              plot_other_data_1510
           }
           #------------------------------------------------------------
        }

##-------------------------------------------------------------------------------
# plot_lc7   [<run code>]
plot_lc7 01

        reset_graph   # SETTING LOCATION AT: 5500 30000 5500 30000
        # location  5500 30000 4500 30000
        #location 4500 31000 3500 31000
        #location 5500 30000 4500 30000

        #seds: location 4000 28250 3250 30000
        location 4000 30000 3250 30000

        lweight 3 
        ctype 2 
        ltype 0 
        expand 1.5

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }

        echo "-------------------------------------------------------------"
        echo " Doing : "$which_sim

        #------------------------------------------------------------
        # Setting default colors 
        #------------------------------------------------------------
        #                                external       hard_lags
        #                              -------------  -------------
        define col_lc1  "green3"       # ...          # optical
        define col_lc2  "grey1"        # Infrared (R) # soft X-ray
        #define col_lc2  "blue"        #*Infrared (R) # soft X-ray
        define col_lc3  "red2"         # swift UVOT   # hard X-ray
        define col_lc4  "purple"       # UV           #
        define col_lc5  "green3"       # X-ray        # ...
        define col_lc6  "darkorange1"  # MeV gamma    # Fermi
        define col_lc7  "grey1"        #*Fermi/LAT    # TeV
        #define col_lc7 "blue"         #*Fermi/LAT    # TeV
        define col_data "blue"         # data         # data

        #------------------------------------------------------------
	# labels using for the legenda of light curve plots
        define band1label "(optical)"
        define band2label "(soft X)"
        define band3label "(hard X)"
        define band4label " "
        define band5label "(X-ray)"
        define band6label "(Fermi/LAT)"
        define band7label "(VHE)"

        if( $flag_ext ) { 
           define band1label " "
           define band2label "(R)"
           define band3label "(Swift/UVOT)"
           define band4label "(UV)"
           define band5label "(X-ray)"
           define band6label " "
           define band7label "(Fermi/LAT)"
        } 
        if( $flag_hl ) { 
           define band1label "(optical)"       #   1 -  3 eV
           define band2label "(soft X)"        #   2 -  4 keV
           define band3label "(hard X)"        #   9 - 15 keV
           define band4label " "               #  15 - 20 keV || 0.1 - 1  keV for 'alt' files
           define band5label "(X-ray)"         #  20 - 60 keV || 0.4 - 4  TeV for 'alt' files
           define band6label "(Fermi/LAT)"     # 0.5 - 50 GeV || 0.3 - 10 GeV for 'alt' files
           define band7label "(VHE)"           #   1 - 10 TeV
           if( $flag_lc_alt == 1 ) { 
              define band2label "(mid X)"      #   2 -  4 keV *
              define band7label "(VHE)"        # 0.4 -  4 TeV * 
           }
           if( $flag_lc_alt == 2 ) { 
             #define band2label "(soft X)"     # 
             #define band3label "(mid X)"      # 
             #define band7label "(hard X)"     # 
              define band2label " "
              define band3label " "
              define band7label " "
           }
        }

        echo "-------------------------------------------------------------"
        echo "> Data Time Shift " 
        #echo ">  preferred value for FG  :  7.0"
        #echo ">  preferred value for STD :  6.5 (8.0)"
        #echo ">  preferred value for BS  : 14.0"
        if( substr('$which_sim',0,2) == 'hl' ){
           echo "> For Mrk421/March19: approximate X-ray l.c. peak is at t(ks)=27 ks" 
           echo "> NOTE: actual march 19 data peak time is at around 30 ks in T=10987.0" 
           echo ">           preferred value for hla : 24.0 (21.5 for non-corrected (?))"
           echo ">           preferred value for hlb : 25.0"
           echo ">           preferred value for hlc : 20.0"
           echo ">           preferred value for hld : 17.0"
        }
        if( substr('$which_sim',0,2) == 'ex' ){
           echo "> For 1510: approximate Fermi l.c. peak is at t(ks)=1400" 
           echo "            Give approx. peak time desired to match simulations."
           echo "            For ext15    ~ 320 is ok "
           echo "            For ext15 hi ~ 320 is ok "
           echo "            For ext15 IR ~ 300 is ok "
           echo "            For ext25    ~ 260 is ok "
           echo "            For ext ssc  ~ 200 is ok "
        }
        echo "> "
        echo ">  Type 0 for not plotting the data" 
        define data_time_shift_in ? {   >>> Time shift for data : }

        #----------------------------------------
        # additional settings 
        #----------------------------------------
        define tev14hs 0
        define flag_2panels 1
        if( substr('$which_sim',0,2) == 'hl' ){ define flag_2panels 0 }
        #GF 06/2012, fudge#
        #define flag_2panels 0
        #----------------------------------------

	# WHY do I want them to be integers?
        #define time1 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[0]-0.5) - $t_inj/$Gamma )/1000. ) )
        #define time2 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[1]-0.5) - $t_inj/$Gamma )/1000. ) )
        #define time3 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[2]-0.5) - $t_inj/$Gamma )/1000. ) )
        #define time4 ( int( ($t_seds_start + $t_seds_dt*(times_for_seds[3]-0.5) - $t_inj/$Gamma )/1000. ) )
        define time1 ( ($t_seds_start + $t_seds_dt*(times_for_seds[0]-0.5) - $t_inj/$Gamma )/1000. )
        define time2 ( ($t_seds_start + $t_seds_dt*(times_for_seds[1]-0.5) - $t_inj/$Gamma )/1000. )
        define time3 ( ($t_seds_start + $t_seds_dt*(times_for_seds[2]-0.5) - $t_inj/$Gamma )/1000. )
        define time4 ( ($t_seds_start + $t_seds_dt*(times_for_seds[3]-0.5) - $t_inj/$Gamma )/1000. )
        echo "+--------------------------------------"
	echo "| SED time 1 : "$(sprintf('%5.1f',$($time1*1.0001)))
	echo "| SED time 2 : "$(sprintf('%5.1f',$($time2*1.0001)))
	echo "| SED time 3 : "$(sprintf('%5.1f',$($time3*1.0001)))
	echo "| SED time 4 : "$(sprintf('%5.1f',$($time4*1.0001)))
        #----------------------------------------

        #----------------------------------------
        # reading the actual light curves
        #----------------------------------------
        data "$!XC_DATA/$!SIMDIR/lc_07_std.dat"
        if( $flag_lc_alt > 0 ) { data "$!XC_DATA/$!SIMDIR/lc_07_alt.dat" }
        #data "$!XC_DATA/$!SIMDIR/lc_08.dat"
        define lum_scaling_factor read 10 2   
        echo "|" 
        echo "| LC FG scaling factor: "$lum_scaling_factor
        echo "+--------------------------------------"

        read < x 1 y1 2 y2 3 y3 4 y4 5 y5 6 y6 7 y7 8  ny1 9 ny2 10 ny3 11 ny4 12 ny5 13 ny6 14 ny7 15 >
        read <   vary1 16 vary2 17 vary3 18 vary4 19 vary5 20 vary6 21 vary7 22 >

        do 9=1,7 {
           set y$9 = y$9 - lg($lum_scaling_factor)
        }

        # reads energy ranges for each light curve
        do 8=1,7 {
           do 9=1,2 {
               define 7 $($9+2)
               define range$8$9 read $8 $7 
           }
        }

        # re-assigning arrays and ranges for the 'alt' case [THIS MUST BE MADE FLEXIBLE!]
        if( $flag_lc_alt == 1 ) {
          #set y2  =  y4
          #set ny2 = ny4
           set y7  =  y5
           set ny7 = ny5
          #define range21 $range41
          #define range22 $range42
           define range71 $range51
           define range72 $range52
        }
        if( $flag_lc_alt == 2 ) {
           set _y2  =  y4
           set _ny2 = ny4
           set _y3  =  y2
           set _ny3 = ny2
           set _y7  =  y3
           set _ny7 = ny3
           define _range21 $range41
           define _range22 $range42
           define _range31 $range21
           define _range32 $range22
           define _range71 $range31
           define _range72 $range32

           foreach 7 < 2 3 7 > {
              set y$7  = _y$7
              set ny$7 = _ny$7
              foreach 8 < 1 2 > {
                 define range$7$8 $_range$7$8
              }
           }
           #set y7  =  y4
           #set ny7 = ny4
           #define range71 $range41
           #define range72 $range42
        }

        do 8=1,7 {
           do 9=1,2 {
               define 6 "units$8$9"
               define 7 "range$8$9"

               define $6 "keV"
               define $7 $(1e0*$$7)  

               if( $$7 <  1.0e-2 ) { 
                  define $7 $(1e3*$$7)  
                  define $6 "eV"
               }
               if( $$7 >= 1.0e3 && $$7 < 1.0e5 ) {
                  define $7 $(1e-3*$$7)
                  define $6 "MeV"
               }
               if( $$7 >= 1.0e5 && $$7 < 1.0e8 ) { 
                  define $7 $(1e-6*$$7)
                  define $6 "GeV"
               }
               if( $$7 >= 1.0e8  ) { 
                  define $7 $(1e-9*$$7)
                  define $6 "TeV"
               }
           }
        }

        # ???
        set dimen(rge1) = 8
        set dimen(rge2) = 8
        set rge1[0] = 10
        set rge2[0] = 10
        do 9=1,2 {
           do 8=1,7{
              set rge$9[$8] = $range$8$9
           }
        }

        # read FG SED for foreground case
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        if( $flag_fg_case ) {
           data "$!XC_DATA/$!SIMDIR/lc_07_fg.dat"
           read < fg1 2 fg2 3 fg3 4 fg4 5 fg5 6 fg6 7 fg7 8 >
           define fg_scaling_factor read 9 2   #GF# NEW
           echo "| Parameters read from data file"
           echo "| LC FG scaling factor : "$fg_scaling_factor
           # define fg_scaling_factor ? { >>> FG Luminosity scaling factor : }
           do 9=1,7 {
              # set fg$9 = fg$9/$fg_scaling_factor
              # set y$9 = y$9 + fg$9[0]
              define fg$9  $( fg$9[0]/$fg_scaling_factor )
              set y$9 = y$9 + $fg$9
           }
        }
        
        # reads external radiation component for EC cases
        if( $flag_ext ) {
           data "$!XC_DATA/$!SIMDIR/blackbody.in"
           read < xdk 1 sp0 2 >

           set lxdk = lg(xdk)
           set lrge1=lg(rge1)
           set lrge2=lg(rge2)
           interp2 lxdk sp0 lrge1 sp1
           interp2 lxdk sp0 lrge2 sp2

           do 9=1,7{
            define dk$9 0
            define i 1
            while {xdk[$i] < rge2[$9]}{
              if (xdk[$i]>rge1[$9] && xdk[$i-1]<rge1[$9]){
                define dk$9 $($dk$9+(xdk[$i]-rge1[$9])*(sp0[$i]*sp1[$9])**0.5)
              }
              if (xdk[$i-1]>rge1[$9]){
                define dk$9 $($dk$9+(xdk[$i]-xdk[$($i-1)])*(sp0[$i]*sp0[$($i-1)])**0.5)
              }
            define i $($i+1)
            }
            define dk$9 $($dk$9+(rge2[$9]-xdk[$($i-1)])*(sp2[$9]*sp0[$($i-1)])**0.5)

            set y$9 = lg( 10.0**y$9 + $dk$9 )
           }
        }

        # scale time to 'ks' and take logarithm of flux
        set x = x/1000.0
        set x = x - $t_inj/1000.0/$Gamma
        do 9=1,7 { 
           set ly$9 = y$9
        }
        #LIN2LOG# after this point things should be ok because here it was converting to log anyway

        # NOT USED
        #set y2p3 = (y2 + y3)/2.
        #set ly2p3 = lg(y2p3)
        #mysmooth ly2p3 ly2p3s 7

        # sets DEFAULT smoothing (no smoothing)
        do 9=1,7 {
           define smoothing_band_$9 (0)
        }

        if( $flag_ext ) {
           define smoothing_width_xray ? { >>>   Smoothing width for X-ray  : } 
           define smoothing_width_R    ? { >>>   Smoothing width for R band : } 
           define smoothing_width_4    ? { >>>   Smoothing width for UV     : } 
           define smoothing_band_2 $smoothing_width_R
           define smoothing_band_4 $smoothing_width_4
           define smoothing_band_5 $smoothing_width_xray
        } else {
           define smoothing_width_4 (3)
           if( $flag_lc_alt > 0 )  { define smoothing_width_4 (0) }
           if( $flag_lc_alt == 0 || $flag_lc_alt == 1 ) { 
              define smoothing_width_tev  ? { >>>      Smoothing width for TeV : } 
           }
           if( substr('$which_sim',0,2) == 'fg' || substr('$which_sim',0,2) == 'st' ) { 
              define smoothing_width_gev (1)
           } else {
              define smoothing_width_gev (3)
           }
           #?# define smoothing_band_2 (0)
           #?# define smoothing_band_4 $smoothing_width_4
           #?# define smoothing_band_5 (0)
           #?# define smoothing_band_6 $smoothing_width_gev

           if( $flag_lc_alt == 0 || $flag_lc_alt == 1 ) { 
              define smoothing_band_7 $smoothing_width_tev
           } else {
              define smoothing_band_7 (0)   # it is soft X-ray
           }
        }

        echo "+-----------------------------------------------------------"
        echo "| Smoothing band 1 by : "$smoothing_band_1"  ["$band1label"]"
        echo "| Smoothing band 2 by : "$smoothing_band_2"  ["$band2label"]"
        echo "| Smoothing band 3 by : "$smoothing_band_3"  ["$band3label"]"
        echo "| Smoothing band 4 by : "$smoothing_band_4"  ["$band4label"]"
        echo "| Smoothing band 5 by : "$smoothing_band_5"  ["$band5label"]"
        echo "| Smoothing band 6 by : "$smoothing_band_6"  ["$band6label"]"
        echo "| Smoothing band 7 by : "$smoothing_band_7"  ["$band7label"]"
        echo "+-----------------------------------------------------------"
        if( $smoothing_band_1 > 0 ) { mysmooth ly1 ly1s $smoothing_band_1 } else { set ly1s = ly1 } # NEVER USED
        if( $smoothing_band_2 > 0 ) { mysmooth ly2 ly2s $smoothing_band_2 } else { set ly2s = ly2 } 
        if( $smoothing_band_3 > 0 ) { mysmooth ly3 ly3s $smoothing_band_3 } else { set ly3s = ly3 } # NEVER USED
        if( $smoothing_band_4 > 0 ) { mysmooth ly4 ly4s $smoothing_band_4 } else { set ly4s = ly4 } 
        if( $smoothing_band_5 > 0 ) { mysmooth ly5 ly5s $smoothing_band_5 } else { set ly5s = ly5 } 
        if( $smoothing_band_6 > 0 ) { mysmooth ly6 ly6s $smoothing_band_6 } else { set ly6s = ly6 } 
        if( $smoothing_band_7 > 0 ) { mysmooth ly7 ly7s $smoothing_band_7 } else { set ly7s = ly7 } 

        define min (0)
        define max (0)

        # foreach 9 < 1 2 3 4 5 6_5 7_5 7_5o 2p3s > 
        # foreach 9 < 1 2 3 4 5 6_5 7_5 2p3s > 
        # foreach 9 < 1 2s 3 4 5s 6s 7s 2p3s > 
        # foreach 9 < 1 2s 3 4s 5s 6s 7s > 
        foreach 9 < 1s 2s 3s 4s 5s 6s 7s > {
           set trial = ly$9  if( x >= 0 ) 
           vecminmax trial min max
           set ly$9 = ly$9 - $max
        }

        #-----------------------------------------------------------
        # BOTTOM panel, or ONLY panel: light curves 2,3
        #-----------------------------------------------------------
        if( $flag_2panels == 1 ) {
            window 1 -2 1 1
        } else {
            window 1 1 1 1
        }
        limits $tplotmin $tplotmax -1.0 0.4
        ticksize $tick_s $tick_l -1.0 5
        if( $flag_2panels == 1 ) {
           box 1 2 0 0 
        } else {
           box 1 2 4 0
        }
        #xlabel "Time [ks]"
        if( $flag_ext_nf ) { 
           xlabel "Time since simulation start [ks, obs. frame]"
        } else {
           xlabel "Time since injection start [ks, obs. frame]"
        }

        #----- Plot : 7 -----
        if( $flag_2panels == 0 ) {
           ctype $col_lc7
           ctype green3
           if( $flag_lc_alt == 2 ) { ctype blue2 }
           ltype 1 lweight 3
           histogram  x (ly7s/1.)  if( x <  0 )
           ltype 0 lweight 4
           histogram  x (ly7s/1.)  if( x >= 0 )
           lweight 3
        }
        
        #----- Plot : 2 -----
        ctype $col_lc2
        ltype 1 lweight 3
        histogram  x ly2s  if( x <  0 ) 
        ltype 0 lweight 4
        histogram  x ly2s  if( x >= 0 ) 
        lweight 3

        #----- Plot : 3 -----
        ctype $col_lc3
        ltype 1 lweight 3
        histogram  x ly3s  if( x <  0 )
        ltype 0 lweight 4
        histogram  x ly3s  if( x >= 0 )
        lweight 3
        
        #----- Plot : 4 -----
        #ctype $col_lc4
        #ltype 1 lweight 3
        #histogram  x ly4s  if( x <  0 )
        #ltype 0 lweight 4
        #histogram  x ly4s  if( x >= 0 )
        #lweight 3
        
        if( substr('$which_sim',0,2) == 'te' ){
           ctype $col_lc4
           histogram x ly4s
           ctype $col_lc5
           histogram x ly5s
        }

        ##ctype 6
        ##connect  x ly2p3s

        if( $data_time_shift_in != 0 ) {
           if( $flag_ext == 0 ) {
              define data_time_shift $($data_time_shift_in - 30.0)
              echo " time shift : "$data_time_shift
              ctype 0
              define name "pca_20_37_week1_256s"
              ctype cyan
              # plot_lc_pca

              # observed light curved of 2-4 keV 
              define name "pca_5_8_week1_256s"
              ctype blue
              ctype $col_data
              define save_col_data $col_data
              if( $flag_lc_alt == 2 ) { define col_data "darkorange" }
              plot_lc_pca
              define col_data $save_col_data
           } else {
              define data_time_shift $($data_time_shift_in - 1400.0)
              echo " time shift : "$data_time_shift
              define name "pks1510_gasp"
              ctype blue
              plot_lc_data
           }
        }

        #-----------------------------------------------------------
        # TOP panel: light curves: ext= 5,6,7 / other cases= 1,6,7
        #-----------------------------------------------------------
        if( $flag_2panels == 1 ) {

           ctype 2 
           #limits (x) -1.0 0.4
           #limits -400 950 -1.0 0.4
           #limits -350 950 -1.0 0.4
           #if( $flag_ext_nf ) { 
           #   limits 0 1300 -1.0 0.4
            #}
           limits $tplotmin $tplotmax -1.0 0.4
           #ticksize 50 200 -1.0 5
           ticksize $tick_s $tick_l -1.0 5
           window 1 -2 1 2 
           #box 0 2 0 0
           box 0 2 4 0

           if( $flag_ext == 0 ) {
              define name "SAVE_x_and_tev_tev01_wrbr_hfreb2_pca_5_23_32"
              ctype blue
              ctype $col_data
              plot_lc_tev
           }

           if( $flag_ext ){
              ctype $col_lc5
              ltype 1 lweight 2 
              histogram x ly5s  if( x <  0 )
              ltype 0 lweight 4
              histogram x ly5s  if( x >= 0 )
              lweight 3
           } else {
              ctype $col_lc1
              ltype 1 lweight 2 
              histogram x ly1s  if( x <  0 )
              ltype 0 lweight 4
              histogram x ly1s  if( x >= 0 )
              lweight 3
           }

           #----- Plot : 6 -----
           ctype $col_lc6
           ltype 1 lweight 2
           histogram x ly6s  if( x <  0 )
           ltype 0 lweight 4
           histogram x ly6s  if( x >= 0 )
           lweight 3

           ctype $col_lc7
           #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
           #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
           #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
           if( $tev14hs == 1 ) {
              data lc_07_14hs.dat
              read < x 1 y7 8 >
              set x=x/1000.0

              if( $flag_fg_case ) {
                 data "$!XC_DATA/$!SIMDIR/lc_07_fg.dat"
                 read < fg1 2 fg2 3 fg3 4 fg4 5 fg5 6 fg6 7 fg7 8 >
                 define fg_scaling_factor read 9 2   #GF# NEW
                 echo "| Parameters read from data file"
                 echo "| LC FG scaling factor : "$fg_scaling_factor
                 # define fg_scaling_factor ? { >>> FG Luminosity scaling factor : }
                 do 9=1,7 {
                    define fg$9 $( fg$9[0]/$fg_scaling_factor )
                 }
                 #DEL# define fg7 read 9 8
                 set y7 = y7 + $fg7
              }
              set ly7 = lg(y7)
              vecminmax ly7 min max
              set ly7 = ly7 - $max
              histogram x ly7

           } else {

              #----- Plot : 7 -----
              ctype $col_lc7
              ltype 1 lweight 2
              histogram x ly7s  if( x <  0 )
              ltype 0 lweight 4
              histogram x ly7s  if( x >= 0 )
              lweight 3
           }
           lweight 3

           if( $data_time_shift_in != 0 ){
              if( $flag_ext ==0 ) {
                 define name "SAVE_x_and_tev_tev01_wrbr_hfreb2_pca_5_23_32"
                 ctype blue
                 ctype $col_data
                 plot_lc_tev
              } else {
                 ctype $col_data 
                 define name "pks1510_fermi"
                 plot_lc_data
              }
           }
        }
        # END of TOP panel
        #-----------------------------------------------------------

        #-----------------------------------------------------------
        # Common Y-axis label
        ctype 2
        ltype 0
        expand 1.5
        window 1 1 1 1
        relocate ( $($gx1-3000) $(0.5*($gy1+$gy2)) ) 
        angle 90
        putlabel 5 "Luminosity scaled to peak value" # 1
        angle 0 
        #ylabel "Luminosity scaled to peak value" # 1
        #ylabel "F_\nu/F_\nu^{max}" # 1
        #ylabel "Luminosity scaled to peak value L_\nu/L_\nu^{max}" # 1

        angle 0
        ctype 2 
        ltype 0 

        #-----------------------------------------------------------
        # Reference lines and marks
        define plot_ref_times  ? {  >>> Mark reference times [0|1] : } 
        define plot_seds_times ? {  >>> Mark SEDs      times [0|1] : } 

        define dgdf $( ($gx2-$gx1)/($fx2-$fx1) )

        if( $plot_ref_times ) {
           if( substr('$which_sim',0,2) == 'fg' || substr('$which_sim',0,2) == 'st' ) {
              define tstart  (15.10)
              define tcrossZ (13.44)
              define tcrossR (10.10)
           } else {
              define tstart  (17.40)
              define tcrossZ (14.50)
              define tcrossR (10.87)
           }
           if( substr('$which_sim',0,3) == 'ext' ) {
              define tstart  $($t_inj/$Gamma/1000.)
              define tstart  (0)
              define tcrossZ $($sizeZ/3.e10/$Gamma/1000.)
              define tcrossR $($sizeR/3.e10/$Gamma/1000.)
           }
           if( substr('$which_sim',0,2) == 'hl' ) {
              define tstart  $($t_inj/$Gamma/1000.)
              define tstart  (0)
              define tcrossZ $($sizeZ/3.e10/$Gamma/1000.)
              define tcrossR $($sizeR/3.e10/$Gamma/1000.)
           }
           
           ltype 3
           ctype grey50
           relocate ( $( ($tstart            - $fx1)*$dgdf+$gx1 ) $gy1 )
           draw     ( $( ($tstart            - $fx1)*$dgdf+$gx1 ) $gy2 )
           relocate ( $( ($tstart + $tcrossZ - $fx1)*$dgdf+$gx1 ) $gy1 )
           draw     ( $( ($tstart + $tcrossZ - $fx1)*$dgdf+$gx1 ) $gy2 )
           # (5/3 R)
           #ltype 1 
           #ctype 3
           #relocate ( $( ($tstart+1.6666*$tcrossR-$fx1)*$dgdf+$gx1 ) $gy1 )
           #draw     ( $( ($tstart+1.6666*$tcrossR-$fx1)*$dgdf+$gx1 ) $gy2 )
           # (5/3 R + Z)
           #ltype 4 
           #ctype 7
           #relocate ( $( ($tstart+1.6666*$tcrossR+$tcrossZ-$fx1)*$dgdf+$gx1 ) $gy1 )
           #draw     ( $( ($tstart+1.6666*$tcrossR+$tcrossZ-$fx1)*$dgdf+$gx1 ) $gy2 )
           
           ctype 2 
           ltype 0
        }

        if( $plot_seds_times ) {
           lweight 2
           do 9=1,4 { 
              ctype $cty_sed$9
              relocate ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+150) )
              draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+2500) )
	   }
           lweight 15
           do 9=1,4 { 
              ctype $cty_sed$9
              relocate ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+150) )
              draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+1000) )
              if( $flag_2panels == 0 ) { 
                 draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+2000) )
              }
              if( $flag_2panels == 1 ) { 
                 relocate ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $(($gy1+$gy2)/2. + 750) )
                 draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $(($gy1+$gy2)/2. - 750) )
              }
           }
           lweight 3
           ctype 2 
        }

        #-------------------------------------------------
        # Plotting inbox labels for energy bands
        #GF# the labels' plotting should be moved within each 'window' section
        #-------------------------------------------------
        expand 1.2
        expand 1.1
        expand 1.0
        
        define dxpos  500
        #define dxpos 15000
        define dypos 1000
        define dypos  900
        #CHECK 06/2012# define flag_2panels 1
        #CHECK 06/2012# if( substr('$which_sim',0,2) == 'hl' ){ define flag_2panels 0 }

        if( $flag_2panels == 1 ) {

           define gyref $( ($gy1 + $gy2)/2.0 - 0 )

           # l.c. #2 (for Mrk421: soft X-ray)
           relocate ( $($gx1+$dxpos) $($gyref - 1*$dypos) )
           if( substr('$units21',0,0) == substr('$units22',0,0) ) {
              ctype $col_lc2 putlabel 6 $range21" - "$range22 $units22" "$band2label
           } else {
              ctype $col_lc2 putlabel 6 $range21 $units21"-"$range22 $units22" "$band2label
           }

           # l.c. #3 (for Mrk421: hard X-ray)
           relocate ( $($gx1+$dxpos) $($gyref - 2*$dypos) )
           if( substr('$units31',0,0) == substr('$units32',0,0) ) {
              ctype $col_lc3 putlabel 6 $range31" - "$range32 $units32" "$band3label
           } else {
              ctype $col_lc3 putlabel 6 $range31 $units31"-"$range32 $units32" "$band3label
           }

           # l.c. #4 
           #relocate ( $($gx1+$dxpos) $($gyref - 3*$dypos) )
           #if( substr('$units41',0,0) == substr('$units42',0,0) ) {
           #   ctype $col_lc4 putlabel 6 $range41" - "$range42 $units42" "$band4label
           #} else {
           #   ctype $col_lc4 putlabel 6 $range41 $units41"-"$range42 $units42" "$band4label
           #}

           define gyref $( $gy2 - 0 )

           # l.c. #1 (hsp) or #5 (ext) (for Mrk421: hard X-ray)
           relocate ( $($gx1+$dxpos) $($gyref - 1*$dypos) ) 
           if( $flag_ext ){
              if( substr('$units51',0,0) == substr('$units52',0,0) ) {
                 ctype $col_lc5 putlabel 6 $range51" - "$range52 $units52" "$band5label
              } else {
                 ctype $col_lc5 putlabel 6 $range51 $units51"-"$range52 $units52" "$band5label
              }
           } else {
              if( substr('$units11',0,0) == substr('$units12',0,0) ) {
                 ctype $col_lc1 putlabel 6 $range11" - "$range12 $units12" (Optical)"
              } else { 
                 ctype $col_lc1 putlabel 6 $range11 $units11"-"$range12 $units12" (Optical)"
              }
           }

           # l.c. #6 (for Mrk421: GeV)
           relocate ( $($gx1+$dxpos) $($gyref - 2*$dypos) ) 
           if( $flag_ext ){
              if( substr('$units61',0,0) == substr('$units62',0,0) ) {
                 ctype $col_lc6 putlabel 6 $range61" - "$range62 $units62" "$band6label
              } else {
                 ctype $col_lc6 putlabel 6 $range61 $units61"-"$range62 $units62" "$band6label
              }
           } else {
              if( substr('$units61',0,0) == substr('$units62',0,0) ) {
                 ctype $col_lc6 putlabel 6 $range61" - "$range62 $units62" (Fermi)"
              } else {
                 ctype $col_lc6 putlabel 6 $range61 $units61"-"$range62 $units62" (Fermi)"
              }
           }

           # l.c. #7 (for Mrk421: TeV)
           relocate ( $($gx1+$dxpos) $($gyref - 3*$dypos) ) 
           if( substr('$units71',0,0) == substr('$units72',0,0) ) {
              ctype $col_lc7 putlabel 6 $range71" - "$range72 $units72" "$band7label
           } else {
              ctype $col_lc7 putlabel 6 $range71 $units71"-"$range72 $units72" "$band7label
           }

        } else {

           relocate ($($gx1+$dxpos) $($gy2-2*$dypos)) #29500)
           ctype $col_lc2 putlabel 6 $range21 $units21"-"$range22 $units22" "$band2label

           relocate ($($gx1+$dxpos) $($gy2-3*$dypos)) #28500)
           ctype $col_lc3 putlabel 6 $range31 $units31"-"$range32 $units32" "$band3label

           relocate ($($gx1+$dxpos) $($gy2-4*$dypos)) #28500)
           ctype green3   
           if( $flag_lc_alt == 2 ) { ctype blue2 } 
           putlabel 6 $range71 $units71"-"$range72 $units72" "$band7label
              
        }

        ctype 2
        ltype 0
        expand 1.5

	realgsave "-q"
        #------------------------------------------------------------
        # top axis label and scale, in days
        define tzero_gx  $( int((0.0-$fx1)*$dgdf+$gx1) )
        if( $flag_ext ) {
           limits $($tplotmin/86.4) $($tplotmax/86.4) 0 1 
           ticksize 1.0 2.0 0 0 
           box 4 4 0 4 

           relocate ( $(($gx1+$gx2)/2.)  $($gy2+2000) )
           putlabel 5 "Time in days [obs. frame]"

           location $tzero_gx $gx2 $gy1 $gy2
           limits 0 $($tplotmax/86.4) 0 1 
           ticksize 1.0 2.0 0 0 
           box 4 4 1 4 
        } else {
           limits $($tplotmin/3.6) $($tplotmax/3.6) 0 1 
          #ticksize 1.0 3.0 0 0 
           ticksize 1.0 2.0 0 0 
           box 4 4 0 4 

           relocate ( $(($gx1+$gx2)/2.)  $($gy2+2000) )
           putlabel 5 "Time in hours [obs. frame]"

           location $tzero_gx $gx2 $gy1 $gy2
           limits 0 $($tplotmax/3.6) 0 1 
          #ticksize 1.0 3.0 0 0 
           ticksize 1.0 2.0 0 0 
           box 4 4 1 4 
        }
        realgrestore

##-------------------------------------------------------------------------------
# plot_lc_new   [<run code>]
#             - prompts for bands to plot
plot_lc_new 01

        reset_graph   # SETTING LOCATION AT: 5500 30000 5500 30000
        # location  5500 30000 4500 30000
        #location 4500 31000 3500 31000
        #location 5500 30000 4500 30000

        #seds: location 4000 28250 3250 30000
        location 4000 30000 3250 30000
        location 5000 31000 3250 30000 # current plot_ff   (2013.08.11)

        lweight 3 
        ctype 2 
        ltype 0 
        expand 1.5

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }

	# GF to supersede obsolete settings
	define flag_lc_alt (3)

        echo "-------------------------------------------------------------"
        echo " Doing : "$which_sim

        define lcbands_var ? < Bands to plot [1-7] : > 
        set lcbands_vec = < $lcbands_var > 

        #------------------------------------------------------------
        # Setting default colors 
        #------------------------------------------------------------
        #                                external       hard_lags
        #                              -------------  -------------
        define col_lc1  "green3"       # ...          # optical
        define col_lc2  "grey1"        # Infrared (R) # soft X-ray
        #define col_lc2  "blue"        #*Infrared (R) # soft X-ray
        define col_lc3  "red2"         # swift UVOT   # hard X-ray
        define col_lc4  "purple"       # UV           #
        define col_lc5  "green3"       # X-ray        # ...
        define col_lc6  "darkorange1"  # MeV gamma    # Fermi
        define col_lc7  "grey1"        #*Fermi/LAT    # TeV
        #define col_lc7 "blue"         #*Fermi/LAT    # TeV

        define col_data "grey70"       # data

	# for 'alt' files for hardlags simulations
        define col_lc1  "magenta"      # optical          1   -  3  eV (4000 - 12400 AA)
        define col_lc2  "red2"         # mid X-ray        2   -  4 keV
        define col_lc3  "blue"         # hard X-ray       9   - 15 keV
        define col_lc4  "black"        # soft X-ray       0.1 -  1 keV
        define col_lc5  "green3"       # low TeV          0.4 -  4 TeV 
        define col_lc6  "darkorange1"  # Fermi/LAT        0.3 - 10 GeV
        define col_lc7  "grey50"       # higher TeV band  1   - 10 TeV

        #------------------------------------------------------------
	# labels using for the legenda of light curve plots
	do 9=1,7 {
           define band$9label " "
	}
        #define band1label " "
        #define band2label " "
        #define band3label " "
        #define band4label " "
        #define band5label " "
        #define band6label " "
        #define band7label " "

        if( $flag_ext ) { 
           define band1label " "
           define band2label "R"
           define band3label "Swift/UVOT"
           define band4label "UV"
           define band5label "X-ray"
           define band6label " "
           define band7label "Fermi/LAT"
        } 

	# For flag_lc_alt == 1 : 2X 1G l.c. 
	# For flag_lc_alt == 2 : 3X    l.c.
	#    In all 'hl' cases it reads the 'alt' file.
	#    Light curves used for 2X/1G are: 2, 3, 5
	#    Light curves used for 3X    are: 2, 3, 4
        if( $flag_hl ) { 
           define band1label "optical"       #   1 -  3 eV
           define band2label "soft X"        #   2 -  4 keV
           define band3label "hard X"        #   9 - 15 keV
           define band4label " "             #  15 - 20 keV || 0.1 - 1  keV for 'alt' files
           define band5label "X-ray"         #  20 - 60 keV || 0.4 - 4  TeV for 'alt' files
           define band6label "Fermi/LAT"     # 0.5 - 50 GeV || 0.3 - 10 GeV for 'alt' files
           define band7label "VHE"           #   1 - 10 TeV

           if( $flag_lc_alt > 0 ) {
              define band1label "optical"       #   1 -  3 eV
              define band2label "mid X"         #   2 -  4 keV
              define band3label "hard X"        #   9 - 15 keV
              define band4label "soft X"        # 0.1 - 1  keV for 'alt' files
              define band5label "VHE"           # 0.4 - 4  TeV for 'alt' files
              define band6label "Fermi/LAT"     # 0.3 - 10 GeV for 'alt' files
              define band7label "xVHE"          #   1 - 10 TeV
	   }
           if( $flag_lc_alt == 1 ) {
              define band2label "mid X"      #   2 -  4 keV *
              define band4label "soft X"     # 0.1 -  1 keV *
              define band7label "VHE"        # 0.4 -  4 TeV * 
           }
           if( $flag_lc_alt == 2 ) {
              define band2label " "
              define band3label " "
              define band7label " "
           }
        }

        echo "-------------------------------------------------------------"
        echo "> Data Time Shift " 
        #echo ">  preferred value for FG  :  7.0"
        #echo ">  preferred value for STD :  6.5 (8.0)"
        #echo ">  preferred value for BS  : 14.0"
        if( substr('$which_sim',0,2) == 'hl' ){
           echo "> For Mrk421/March19: approximate X-ray l.c. peak is at t(ks)=27 ks" 
           echo "> NOTE: actual march 19 data peak time is at around 30 ks in T=10987.0" 
           echo ">           preferred value for hla : 24.0 (21.5 for non-corrected (?))"
           echo ">           preferred value for hlb : 25.0"
           echo ">           preferred value for hlc : 20.0"
           echo ">           preferred value for hld : 17.0"
        }
        if( substr('$which_sim',0,2) == 'ex' ){
           echo "> For 1510: approximate Fermi l.c. peak is at t(ks)=1400" 
           echo "            Give approx. peak time desired to match simulations."
           echo "            For ext15    ~ 320 is ok "
           echo "            For ext15 hi ~ 320 is ok "
           echo "            For ext15 IR ~ 300 is ok "
           echo "            For ext25    ~ 260 is ok "
           echo "            For ext ssc  ~ 200 is ok "
        }
        echo "> "
        echo ">  Type 0 for not plotting the data" 
        define data_time_shift_in ? {   >>> Time shift for data : }

        #----------------------------------------
        # additional settings 
        #----------------------------------------
        define tev14hs 0
        define flag_2panels 1
        if( substr('$which_sim',0,2) == 'hl' ){ define flag_2panels 0 }
        #GF 06/2012, fudge#
        #define flag_2panels 0
        #----------------------------------------

        #----------------------------------------
	# Times corresponding to the selected SEDs
	#
        define time1 ( ($t_seds_start + $t_seds_dt*(times_for_seds[0]-0.5) - $t_inj/$Gamma )/1000. )
        define time2 ( ($t_seds_start + $t_seds_dt*(times_for_seds[1]-0.5) - $t_inj/$Gamma )/1000. )
        define time3 ( ($t_seds_start + $t_seds_dt*(times_for_seds[2]-0.5) - $t_inj/$Gamma )/1000. )
        define time4 ( ($t_seds_start + $t_seds_dt*(times_for_seds[3]-0.5) - $t_inj/$Gamma )/1000. )
        echo "+--------------------------------------"
	echo "| SED time 1 : "$(sprintf('%5.1f',$($time1*1.0001)))
	echo "| SED time 2 : "$(sprintf('%5.1f',$($time2*1.0001)))
	echo "| SED time 3 : "$(sprintf('%5.1f',$($time3*1.0001)))
	echo "| SED time 4 : "$(sprintf('%5.1f',$($time4*1.0001)))
        #----------------------------------------

        #----------------------------------------
        # reading the actual light curves data
        #----------------------------------------
        data "$!XC_DATA/$!SIMDIR/lc_07_std.dat"
        if( $flag_lc_alt > 0 ) { data "$!XC_DATA/$!SIMDIR/lc_07_alt.dat" }
        define lum_scaling_factor read 10 2   
        echo "|" 
        echo "| LC FG scaling factor: "$lum_scaling_factor
        echo "+--------------------------------------"

        read < x 1 y1 2 y2 3 y3 4 y4 5 y5 6 y6 7 y7 8  ny1 9 ny2 10 ny3 11 ny4 12 ny5 13 ny6 14 ny7 15 >
        read <   vary1 16 vary2 17 vary3 18 vary4 19 vary5 20 vary6 21 vary7 22 >

        do 9=1,7 {
           set y$9 = y$9 - lg($lum_scaling_factor)
        }

        # reads energy ranges for each light curve
        do 8=1,7 {
           do 9=1,2 {
               define 7 $($9+2)
               define range$8$9 read $8 $7 
           }
        }

        do 8=1,7 {
           do 9=1,2 {
               define 6 "units$8$9"
               define 7 "range$8$9"
	       ##echo $9 $6 $7

               define $6 "keV"
               define $7 $(1e0*$$7)  

               if( $$7 <  1.0e-2 ) { 
                  define $7 $(1e3*$$7)  
                  define $6 "eV"
               }
               if( $$7 >= 1.0e3 && $$7 < 1.0e5 ) {
                  define $7 $(1e-3*$$7)
                  define $6 "MeV"
               }
               if( $$7 >= 1.0e5 && $$7 < 1.0e8 ) { 
                  define $7 $(1e-6*$$7)
                  define $6 "GeV"
               }
               if( $$7 >= 1.0e8  ) { 
                  define $7 $(1e-9*$$7)
                  define $6 "TeV"
               }
	       ##echo $$7 $$6
           }
        }

        # ???
        set dimen(rge1) = 8
        set dimen(rge2) = 8
        set rge1[0] = 10
        set rge2[0] = 10
        do 9=1,2 {
           do 8=1,7{
              set rge$9[$8] = $range$8$9
           }
        }

        #--------------------------------------------------
	# Additional flux components (e.g. FG, EXT)
        #--------------------------------------------------
        # prepares FG for foreground case
        if( $flag_fg_case ) {
           data "$!XC_DATA/$!SIMDIR/lc_07_fg.dat"
           read < fg1 2 fg2 3 fg3 4 fg4 5 fg5 6 fg6 7 fg7 8 >
           define fg_scaling_factor read 9 2   #GF# NEW
           echo "| Parameters read from data file"
           echo "| LC FG scaling factor : "$fg_scaling_factor
           # define fg_scaling_factor ? { >>> FG Luminosity scaling factor : }

           do 9=1,7 {
              # set fg$9 = fg$9/$fg_scaling_factor
              # set y$9 = y$9 + fg$9[0]
              define fg$9  $( fg$9[0]/$fg_scaling_factor )
              set y$9 = y$9 + $fg$9
	      # The above is probably incorrect and it should be replaced by something like the one below
              #set y$9 = lg( 10.0**y$9 + $dk$9 )
           }
        }
        
        # prepares external radiation component for EC cases
        if( $flag_ext ) {
           data "$!XC_DATA/$!SIMDIR/blackbody.in"
           read < xdk 1 sp0 2 >

	   # estimates the values of the blackbody flux at the min-max frequencies 
	   #   of the light curve bands
           set lxdk  = lg(xdk)
           set lrge1 = lg(rge1)
           set lrge2 = lg(rge2)
           interp2 lxdk sp0 lrge1 sp1
           interp2 lxdk sp0 lrge2 sp2

           do 9=1,7 {
              define dk$9 (0)
              define i    (1)
              while { xdk[$i] < rge2[$9] } {
                 if( xdk[$i] > rge1[$9] && xdk[$i-1] < rge1[$9] ) {
                    define dk$9 $( $dk$9 + (xdk[$i]-rge1[$9])*(sp0[$i]*sp1[$9])**0.5 )
                 }
                 if( xdk[$i-1] > rge1[$9] ) {
                    define dk$9 $( $dk$9 + (xdk[$i]-xdk[$($i-1)])*(sp0[$i]*sp0[$($i-1)])**0.5 )
                 }
              define i $($i+1)
              }
              define dk$9 $($dk$9+(rge2[$9]-xdk[$($i-1)])*(sp2[$9]*sp0[$($i-1)])**0.5)

              set y$9 = lg( 10.0**y$9 + $dk$9 )
           }
        }

        #--------------------------------------------------
        # scale time to 'ks' and take logarithm of flux (NOT ANYMORE)
        set x = x/1000.0
        set x = x - $t_inj/1000.0/$Gamma
        do 9=1,7 { 
           set ly$9 = y$9
        }
        #LIN2LOG# after this point things should be ok because here it was converting to log anyway

        #--------------------------------------------------
	# smoothing
        #--------------------------------------------------
        # sets DEFAULT smoothing (no smoothing)
        do 9=1,7 {
           define smoothing_band_$9 (0)
        }

        if( $flag_ext ) {

           define smoothing_width_xray ? { >>>   Smoothing width for X-ray  : } 
           define smoothing_width_R    ? { >>>   Smoothing width for R band : } 
           define smoothing_width_4    ? { >>>   Smoothing width for UV     : } 
           define smoothing_band_2 $smoothing_width_R
           define smoothing_band_4 $smoothing_width_4
           define smoothing_band_5 $smoothing_width_xray

        } else {

           define smoothing_width_4 (3)
           if( $flag_lc_alt > 0 )  { define smoothing_width_4 (0) }
           if( $flag_lc_alt == 0 || $flag_lc_alt == 1 ) { 
              define smoothing_width_tev  ? { >>>      Smoothing width for TeV : } 
           }
           if( $flag_lc_alt == 3 ) { 
              define smoothing_width_tev  ? { >>>      Smoothing width for TeV : } 
           }
           if( substr('$which_sim',0,2) == 'fg' || substr('$which_sim',0,2) == 'st' ) { 
              define smoothing_width_gev (1)
           } else {
              define smoothing_width_gev (3)
           }

           # define smoothing_band_7 (0)   # no smoothing because for 'flag_lc_alt=2' it is soft X-ray
           if( $flag_lc_alt == 0 || $flag_lc_alt == 1 ) { 
              define smoothing_band_7 $smoothing_width_tev
           } 
           if( $flag_lc_alt == 3 ) { 
              define smoothing_band_5 $smoothing_width_tev
              define smoothing_band_7 $smoothing_width_tev
           } 
        }

        echo "+-----------------------------------------------------------"
        echo "| Smoothing band 1 by : "$smoothing_band_1"  ["$band1label"]"
        echo "| Smoothing band 2 by : "$smoothing_band_2"  ["$band2label"]"
        echo "| Smoothing band 3 by : "$smoothing_band_3"  ["$band3label"]"
        echo "| Smoothing band 4 by : "$smoothing_band_4"  ["$band4label"]"
        echo "| Smoothing band 5 by : "$smoothing_band_5"  ["$band5label"]"
        echo "| Smoothing band 6 by : "$smoothing_band_6"  ["$band6label"]"
        echo "| Smoothing band 7 by : "$smoothing_band_7"  ["$band7label"]"
        echo "+-----------------------------------------------------------"
        if( $smoothing_band_1 > 0 ) { mysmooth ly1 ly1s $smoothing_band_1 } else { set ly1s = ly1 } # NEVER USED
        if( $smoothing_band_2 > 0 ) { mysmooth ly2 ly2s $smoothing_band_2 } else { set ly2s = ly2 } 
        if( $smoothing_band_3 > 0 ) { mysmooth ly3 ly3s $smoothing_band_3 } else { set ly3s = ly3 } # NEVER USED
        if( $smoothing_band_4 > 0 ) { mysmooth ly4 ly4s $smoothing_band_4 } else { set ly4s = ly4 } 
        if( $smoothing_band_5 > 0 ) { mysmooth ly5 ly5s $smoothing_band_5 } else { set ly5s = ly5 } 
        if( $smoothing_band_6 > 0 ) { mysmooth ly6 ly6s $smoothing_band_6 } else { set ly6s = ly6 } 
        if( $smoothing_band_7 > 0 ) { mysmooth ly7 ly7s $smoothing_band_7 } else { set ly7s = ly7 } 

        #--------------------------------------------------
	# rescaling light curves to their peak value
        #--------------------------------------------------
        define min (0)
        define max (0)

        foreach 9 < 1s 2s 3s 4s 5s 6s 7s > {
           set trial = ly$9  if( x >= 0 ) 
           vecminmax trial min max
           set ly$9 = ly$9 - $max
        }

        #-----------------------------------------------------------
        # BOTTOM panel, or ONLY panel: light curves 2,3
        #-----------------------------------------------------------
        if( $flag_2panels == 1 ) {
            window 1 -2 1 1
        } else {
            window 1 1 1 1
        }
        limits $tplotmin $tplotmax -1.0 0.4
        ticksize $tick_s $tick_l -1.0 5
        if( $flag_2panels == 1 ) {
           box 1 2 0 0 
        } else {
           box 1 2 4 0
        }
        #xlabel "Time [ks]"
        if( $flag_ext_nf ) { 
           xlabel "Time since simulation start [ks, obs. frame]"
        } else {
           xlabel "Time since injection start [ks, obs. frame]"
        }

        #--------------------------------------------------
	# plots the data first to avoid overlaying the simulated light curves
        #--------------------------------------------------
        if( $data_time_shift_in != 0 ) {
           if( $flag_ext == 0 ) {
              define data_time_shift $($data_time_shift_in - 30.0)
              echo " time shift : "$data_time_shift
              ctype 0
              define name "pca_20_37_week1_256s"
              ctype cyan
              # plot_lc_pca

              # observed light curved of 2-4 keV 
              define name "pca_5_8_week1_256s"
              ctype blue
              ctype $col_data
              define save_col_data $col_data
              if( $flag_lc_alt == 2 ) { define col_data "darkorange" }
             #plot_lc_pca
              plot_lc_pca_shaded
              define col_data $save_col_data

           } else {

              define data_time_shift $($data_time_shift_in - 1400.0)
              echo " time shift : "$data_time_shift
              define name "pks1510_gasp"
              ctype blue
              plot_lc_data
           }
        }

	foreach 9 lcbands_vec {
           ctype $col_lc$9
           ltype 1 lweight 3
           histogram  x ly$9s  if( x <  0 ) 
           ltype 0 lweight 4
           histogram  x ly$9s  if( x >= 0 ) 
           lweight 3
	}

        if( substr('$which_sim',0,2) == 'te' ){
           ctype $col_lc4
           histogram x ly4s
           ctype $col_lc5
           histogram x ly5s
        }

        #-----------------------------------------------------------
        # TOP panel: light curves: ext= 5,6,7 / other cases= 1,6,7
	# GF 2013/05: !!! REMOVED FOR NOW !!!
        #-----------------------------------------------------------
        if( $flag_2panels == 1 ) {

        }
        # END of TOP panel
        #-----------------------------------------------------------

        #-----------------------------------------------------------
        # Common Y-axis label
        ctype 2
        ltype 0
        expand 1.5
        window 1 1 1 1
        relocate ( $($gx1-3000) $(0.5*($gy1+$gy2)) ) 
        angle 90
        putlabel 5 "Luminosity scaled to peak value" # 1
        angle 0 
        #ylabel "Luminosity scaled to peak value" # 1
        #ylabel "F_\nu/F_\nu^{max}" # 1
        #ylabel "Luminosity scaled to peak value L_\nu/L_\nu^{max}" # 1

        angle 0
        ctype 2 
        ltype 0 

        #-----------------------------------------------------------
        # Reference lines and marks
        define plot_ref_times  ? {  >>> Mark reference times [0|1] : } 
        define plot_seds_times ? {  >>> Mark SEDs      times [0|1] : } 

        define dgdf $( ($gx2-$gx1)/($fx2-$fx1) )

        if( $plot_ref_times ) {
           if( substr('$which_sim',0,2) == 'fg' || substr('$which_sim',0,2) == 'st' ) {
              define tstart  (15.10)
              define tcrossZ (13.44)
              define tcrossR (10.10)
           } else {
              define tstart  (17.40)
              define tcrossZ (14.50)
              define tcrossR (10.87)
           }
           if( substr('$which_sim',0,3) == 'ext' ) {
              define tstart  $($t_inj/$Gamma/1000.)
              define tstart  (0)
              define tcrossZ $($sizeZ/3.e10/$Gamma/1000.)
              define tcrossR $($sizeR/3.e10/$Gamma/1000.)
           }
           if( substr('$which_sim',0,2) == 'hl' ) {
              define tstart  $($t_inj/$Gamma/1000.)
              define tstart  (0)
              define tcrossZ $($sizeZ/3.e10/$Gamma/1000.)
              define tcrossR $($sizeR/3.e10/$Gamma/1000.)
           }
           
           ltype 3
           ctype grey50
           relocate ( $( ($tstart            - $fx1)*$dgdf+$gx1 ) $gy1 )
           draw     ( $( ($tstart            - $fx1)*$dgdf+$gx1 ) $gy2 )
           relocate ( $( ($tstart + $tcrossZ - $fx1)*$dgdf+$gx1 ) $gy1 )
           draw     ( $( ($tstart + $tcrossZ - $fx1)*$dgdf+$gx1 ) $gy2 )
           # (5/3 R)
           #ltype 1 
           #ctype 3
           #relocate ( $( ($tstart+1.6666*$tcrossR-$fx1)*$dgdf+$gx1 ) $gy1 )
           #draw     ( $( ($tstart+1.6666*$tcrossR-$fx1)*$dgdf+$gx1 ) $gy2 )
           # (5/3 R + Z)
           #ltype 4 
           #ctype 7
           #relocate ( $( ($tstart+1.6666*$tcrossR+$tcrossZ-$fx1)*$dgdf+$gx1 ) $gy1 )
           #draw     ( $( ($tstart+1.6666*$tcrossR+$tcrossZ-$fx1)*$dgdf+$gx1 ) $gy2 )
           
           ctype 2 
           ltype 0
        }

        if( $plot_seds_times ) {
           lweight 2
           do 9=1,4 { 
              ctype $cty_sed$9
              relocate ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+150) )
              draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+2500) )
	   }
           lweight 15
           do 9=1,4 { 
              ctype $cty_sed$9
              relocate ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+150) )
              draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+1000) )
              if( $flag_2panels == 0 ) { 
                 draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $($gy1+2000) )
              }
              if( $flag_2panels == 1 ) { 
                 relocate ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $(($gy1+$gy2)/2. + 750) )
                 draw     ( $( ($time$9 - $fx1)*$dgdf+$gx1 ) $(($gy1+$gy2)/2. - 750) )
              }
           }
           lweight 3
           ctype 2 
        }

        #-------------------------------------------------
        # Plotting inbox labels for energy bands
        #GF# the labels' plotting should be moved within each 'window' section
        #-------------------------------------------------
        expand 1.2
        expand 1.1
        expand 1.0
        
        define dxpos  3500
        define dxpos   500
       #define dxpos 15000
        define dypos   900
        define dypos  1000
        #CHECK 06/2012# define flag_2panels 1
        #CHECK 06/2012# if( substr('$which_sim',0,2) == 'hl' ){ define flag_2panels 0 }

	# GF 2013/05: ONLY UPDATED THE PORTION FOR SINGLE-PANEL L.C. PLOT
        if( $flag_2panels == 0 ) {

	   define 8 (1)
	   foreach 9 lcbands_vec {
	      define 8 $($8+1)
	      define r1 $range$91
	      define r2 $range$92
	      define u1 $units$91
	      define u2 $units$92

	      #echo $r1 $u1 $r2 $u2
              ctype $col_lc$9 
              relocate ($($gx1 + $dxpos) $($gy2 - $8*$dypos)) 
	      if( substr('$u1',0,0) == substr('$u2',0,0) ) {
	         putlabel 6 $(sprintf('%4.1f',$(1.0001*$r1)))" - "$(sprintf('%4.1f',$(1.0001*$r2))) $(sprintf('%s','$u2')) "("$band$9label")"
	      } else {
	         putlabel 6 $(sprintf('%4.1f',$(1.0001*$r1))) $(sprintf('%s','$u1'))" - "$(sprintf('%4.1f',$(1.0001*$r2))) $(sprintf('%s','$u2'))
	      }

	     #putlabel 4 $(sprintf('%s','$band$9label'))":"
	     #putlabel 4 $band$9label":"
             #relocate ( $xp $($gy2 - $8*$dypos)) 
	     #putlabel 6 $(sprintf('%4.1f',$(1.0001*$r1))) $(sprintf('%3s','$units$91'))" - "$(sprintf('%4.1f',$(1.0001*$r2))) $(sprintf('%3s','$units$92'))
	     #putlabel 6 $(sprintf('%4.1f',$(1.0001*$r1))) $(sprintf('%s','$u1'))"- "$(sprintf('%4.1f',$(1.0001*$r2))) $(sprintf('%s','$u2'))
	     #putlabel 6 $range$91 $units$91"-"$range$92 $units$92" ("$band$9label")"
	     #putlabel 6 $range21 $units21"-"$range22 $units22" "$band2label

	   }

        } else {

           define gyref $( ($gy1 + $gy2)/2.0 - 0 )

           # l.c. #2 (for Mrk421: soft X-ray)
           relocate ( $($gx1+$dxpos) $($gyref - 1*$dypos) )
           if( substr('$units21',0,0) == substr('$units22',0,0) ) {
              ctype $col_lc2 putlabel 6 $range21" - "$range22 $units22" "$band2label
           } else {
              ctype $col_lc2 putlabel 6 $range21 $units21"-"$range22 $units22" "$band2label
           }

           # l.c. #3 (for Mrk421: hard X-ray)
           relocate ( $($gx1+$dxpos) $($gyref - 2*$dypos) )
           if( substr('$units31',0,0) == substr('$units32',0,0) ) {
              ctype $col_lc3 putlabel 6 $range31" - "$range32 $units32" "$band3label
           } else {
              ctype $col_lc3 putlabel 6 $range31 $units31"-"$range32 $units32" "$band3label
           }

           # l.c. #4 
           #relocate ( $($gx1+$dxpos) $($gyref - 3*$dypos) )
           #if( substr('$units41',0,0) == substr('$units42',0,0) ) {
           #   ctype $col_lc4 putlabel 6 $range41" - "$range42 $units42" "$band4label
           #} else {
           #   ctype $col_lc4 putlabel 6 $range41 $units41"-"$range42 $units42" "$band4label
           #}

           define gyref $( $gy2 - 0 )

           # l.c. #1 (hsp) or #5 (ext) (for Mrk421: hard X-ray)
           relocate ( $($gx1+$dxpos) $($gyref - 1*$dypos) ) 
           if( $flag_ext ){
              if( substr('$units51',0,0) == substr('$units52',0,0) ) {
                 ctype $col_lc5 putlabel 6 $range51" - "$range52 $units52" "$band5label
              } else {
                 ctype $col_lc5 putlabel 6 $range51 $units51"-"$range52 $units52" "$band5label
              }
           } else {
              if( substr('$units11',0,0) == substr('$units12',0,0) ) {
                 ctype $col_lc1 putlabel 6 $range11" - "$range12 $units12" (Optical)"
              } else { 
                 ctype $col_lc1 putlabel 6 $range11 $units11"-"$range12 $units12" (Optical)"
              }
           }

           # l.c. #6 (for Mrk421: GeV)
           relocate ( $($gx1+$dxpos) $($gyref - 2*$dypos) ) 
           if( $flag_ext ){
              if( substr('$units61',0,0) == substr('$units62',0,0) ) {
                 ctype $col_lc6 putlabel 6 $range61" - "$range62 $units62" "$band6label
              } else {
                 ctype $col_lc6 putlabel 6 $range61 $units61"-"$range62 $units62" "$band6label
              }
           } else {
              if( substr('$units61',0,0) == substr('$units62',0,0) ) {
                 ctype $col_lc6 putlabel 6 $range61" - "$range62 $units62" (Fermi)"
              } else {
                 ctype $col_lc6 putlabel 6 $range61 $units61"-"$range62 $units62" (Fermi)"
              }
           }

           # l.c. #7 (for Mrk421: TeV)
           relocate ( $($gx1+$dxpos) $($gyref - 3*$dypos) ) 
           if( substr('$units71',0,0) == substr('$units72',0,0) ) {
              ctype $col_lc7 putlabel 6 $range71" - "$range72 $units72" "$band7label
           } else {
              ctype $col_lc7 putlabel 6 $range71 $units71"-"$range72 $units72" "$band7label
           }

        }

        ctype 2
        ltype 0
        expand 1.5

	realgsave "-q"
        #------------------------------------------------------------
        # top axis label and scale, in days
        define tzero_gx  $( int((0.0-$fx1)*$dgdf+$gx1) )
        if( $flag_ext ) {
           limits $($tplotmin/86.4) $($tplotmax/86.4) 0 1 
           ticksize 1.0 2.0 0 0 
           box 4 4 0 4 

           relocate ( $(($gx1+$gx2)/2.)  $($gy2+2000) )
           putlabel 5 "Time in days [obs. frame]"

           location $tzero_gx $gx2 $gy1 $gy2
           limits 0 $($tplotmax/86.4) 0 1 
           ticksize 1.0 2.0 0 0 
           box 4 4 1 4 
        } else {
           limits $($tplotmin/3.6) $($tplotmax/3.6) 0 1 
          #ticksize 1.0 3.0 0 0 
           ticksize 1.0 2.0 0 0 
           box 4 4 0 4 

           relocate ( $(($gx1+$gx2)/2.)  $($gy2+2000) )
           putlabel 5 "Time in hours [obs. frame]"

           location $tzero_gx $gx2 $gy1 $gy2
           limits 0 $($tplotmax/3.6) 0 1 
          #ticksize 1.0 3.0 0 0 
           ticksize 1.0 2.0 0 0 
           box 4 4 1 4 
        }
        realgrestore

##-------------------------------------------------------------------------------
# plot_lc1   <run code> <color> 
#           : plots ONE light curve in LUMINOSITY UNITS
plot_lc1 2

        reset_graph 
        location 5500 30000 4500 30000

        lweight 3 
        ctype 2 
        ltype 0 
        expand 1.5

        set_read_sim_gf $1
        define col_lc   $2

        echo "-------------------------------------------------------------"
        echo " Doing : "$which_sim

        #------------------------------------------------------------
        define band1label "(optical)"
        define band2label "(soft X)"
        define band3label "(hard X)"
        define band4label " "
        define band5label "(X-ray)"
        define band6label "(Fermi/LAT)"
        define band7label "(VHE)"
        if( $flag_ext ) { 
           define band1label " "
           define band2label "(R)"
           define band3label "(Swift/UVOT)"
           define band4label "(UV)"
           define band5label "(X-ray)"
           define band6label " "
           define band7label "(Fermi/LAT)"
        } 
        if( $flag_hl ) { 
           define band1label "(optical)"       #   1 -  3 eV
           define band2label "(soft X)"        #   2 -  4 keV
           define band3label "(hard X)"        #   9 - 15 keV
           define band4label " "               #  15 - 20 keV
           define band5label "(X-ray)"         #  20 - 60 keV
           define band6label "(Fermi/LAT)"     # 0.5 - 50 GeV
           define band7label "(VHE)"           #   1 - 10 TeV
           if( $flag_lc_alt == 1 ) { 
              define band2label "(soft X)"     # 0.1 -  1 keV *
              define band7label "(VHE)"        # 0.4 -  4 TeV * 
           }
           if( $flag_lc_alt == 2 ) { 
              define band7label "(soft X)"     # 0.1 -  1 keV *
           }
          #if( $flag_lc_alt ) { 
          #   define band1label "(optical)"    #   1 -  3  eV
          #   define band2label "(mid X)"      #   2 -  4 keV
          #   define band3label "(hard X)"     #   9 - 15 keV
          #   define band4label "(soft X)"     # 0.1 -  1 keV *
          #   define band5label "(VHE)"        # 0.4 -  4 TeV *
          #   define band6label "(Fermi/LAT)"  # 0.5 - 10 GeV * 
          #   define band7label "(high VHE)"   #   1 - 10 TeV
          #}
        }

        echo "+-----------------------------------------------------------"
        echo "| [1] "$band1label
        echo "| [2] "$band2label
        echo "| [3] "$band3label
        echo "| [4] "$band4label
        echo "| [5] "$band5label
        echo "| [6] "$band6label
        echo "| [7] "$band7label
        echo "|"
        define which_band ? <| Which band to plot : > 
        define 2 $which_band
        echo "+-----------------------------------------------------------"

        #----------------------------------------
        # time limits for X axes
        #----------------------------------------
        if( $flag_ext == 0 ) {
           define tplotmin (  -5)
           define tplotmax (  50)
           define tick_s   (   5)
           define tick_l   (  20)
        } else {
           define tplotmin ( -50)
           define tplotmax ( 950)
           define tick_s   (  50)
           define tick_l   ( 200)
           if( $flag_ext_nf ) { 
              define tplotmin (   0)
              define tplotmax (1300)
           }
        }

        #----------------------------------------
        # additional settings 
        #----------------------------------------
        define flag_2panels 0

        #----------------------------------------
        # reading the actual light curves
        #----------------------------------------
        data "$!XC_DATA/$!SIMDIR/lc_07_std.dat"
        if( $flag_lc_alt > 0 ) { data "$!XC_DATA/$!SIMDIR/lc_07_alt.dat" }
        define lum_scaling_factor read 10 2   
        echo "|" 
        echo "| LC FG scaling factor: "$lum_scaling_factor
        echo "+--------------------------------------"

        read < x 1 y1 2 y2 3 y3 4 y4 5 y5 6 y6 7 y7 8  ny1 9 ny2 10 ny3 11 ny4 12 ny5 13 ny6 14 ny7 15 >

        # scale time to 'ks'
        set x = x/1000.0
        set x = x - $t_inj/1000.0/$Gamma

        # reads energy ranges for each light curve
        do 8=1,7 {
           do 9=1,2 {
               define 7 $($9+2)
               define range$8$9 read $8 $7 
           }
        }

        # re-assigning arrays and ranges for the 'alt' case [THIS MUST BE MADE FLEXIBLE!]
        if( $flag_lc_alt == 1 ) {
           set y2  =  y4
           set ny2 = ny4
           set y7  =  y5
           set ny7 = ny5
        }
        if( $flag_lc_alt == 2 ) {
           set y7  =  y4
           set ny7 = ny4
        }

        #-----------------------------------------------------------

        #???
        set dimen(rge1) = 8
        set dimen(rge2) = 8
        set rge1[0] = 10
        set rge2[0] = 10
        do 9=1,2 {
           do 8=1,7{
              set rge$9[$8] = $range$8$9
           }
        }

        # read FG SED for foreground case
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        if( $flag_fg_case ) {
           data "$!XC_DATA/$!SIMDIR/lc_07_fg.dat"
           read < fg1 2 fg2 3 fg3 4 fg4 5 fg5 6 fg6 7 fg7 8 >
           define fg_scaling_factor read 9 2   #GF# NEW
           echo "| Parameters read from data file"
           echo "| LC FG scaling factor : "$fg_scaling_factor
           # define fg_scaling_factor ? { >>> FG Luminosity scaling factor : }
           do 9=1,7 {
              # set fg$9 = fg$9/$fg_scaling_factor
              # set y$9 = y$9 + fg$9[0]
              define fg$9  $( fg$9[0]/$fg_scaling_factor )
              set y$9 = y$9 + $fg$9
           }
        }
        
        # reads external radiation component for EC cases
        if( $flag_ext ) {
           data "$!XC_DATA/$!SIMDIR/blackbody.in"
           read < xdk 1 sp0 2 >

           set lxdk = lg(xdk)
           set lrge1=lg(rge1)
           set lrge2=lg(rge2)
           interp2 lxdk sp0 lrge1 sp1
           interp2 lxdk sp0 lrge2 sp2

           do 9=1,7{
            define dk$9 0
            define i 1
            while {xdk[$i] < rge2[$9]}{
              if (xdk[$i]>rge1[$9] && xdk[$i-1]<rge1[$9]){
                define dk$9 $($dk$9+(xdk[$i]-rge1[$9])*(sp0[$i]*sp1[$9])**0.5)
              }
              if (xdk[$i-1]>rge1[$9]){
                define dk$9 $($dk$9+(xdk[$i]-xdk[$($i-1)])*(sp0[$i]*sp0[$($i-1)])**0.5)
              }
            define i $($i+1)
            }
            define dk$9 $($dk$9+(rge2[$9]-xdk[$($i-1)])*(sp2[$9]*sp0[$($i-1)])**0.5)

            set y$9 = lg( 10.0**y$9 + $dk$9 )
           }
        }

        # scales flux and take logarithm
        do 9=1,7 { 
           set y$9  = y$9 - lg($lum_scaling_factor)
           set ly$9 = y$9
        }
        #-----------------------------------------------------------
        define smoothing_band_X  ? { >>>      Smoothing width : } 

        set lyX = ly$2
        set nyX = ny$2
        if( $smoothing_band_X > 0 ) { 
           mysmooth lyX lyXs $smoothing_band_X 
        } else { 
           set lyXs = lyX 
        } 
        set trial_ly = lyXs    if( x >= 0 ) 
        set trial_ny = nyX     if( x >= 0 ) 
        vecminmax trial_ly min max_lyX
        vecminmax trial_ny min max_nyX

        if( $which_band == 2 ) { 
           define min_ly   (43.9)
           define max_ly   (45.5)
           define max_nyX (1600) 
        }
        if( $which_band == 3 ) { 
           define min_ly   (43.9)
           define max_ly   (45.5)
           define max_nyX (1000) 
        }
        if( $which_band == 7 ) { 
           define min_ly   (43.9)
           define max_ly   (45.5)
           define max_nyX  (200) 
        }
        if( $flag_lc_alt == 1 ) { 
           if( $which_band == 2 ) { 
              define min_ly   (44.4)
              define max_ly   (46.0)
              define max_nyX  (6000) 
           }
           if( $which_band == 7 ) { 
              define min_ly   (44.4)
              define max_ly   (46.0)
              define max_nyX  (550) 
           }
        }

        #-----------------------------------------------------------
        window 1 -5 1 3:5
        limits $tplotmin $tplotmax 43.9 45.5
        limits $tplotmin $tplotmax $min_ly $max_ly
        ticksize $tick_s $tick_l 0 0 
        box 0 2 0 0

        #----- Plot light curve -----
        ctype $col_lc
        ltype 1 lweight 3
        histogram  x  lyXs  if( x <  0 ) 
        ltype 0 lweight 4
        histogram  x  lyXs  if( x >= 0 ) 
        lweight 3

        #-----------------------------------------------------------
        ctype 2 
        ltype 0 
        lweight 3 
        window 1 -5 1 1:2
        limits $tplotmin $tplotmax 0 $(1.1*$max_nyX)
        limits $tplotmin $tplotmax 0 200
        limits $tplotmin $tplotmax 0 $max_nyX
        ticksize $tick_s $tick_l 0 0 
        box 1 2 0 0
        if( $flag_ext_nf ) { 
           xlabel "Time since simulation start [ks, obs. frame]"
        } else {
           xlabel "Time since injection start [ks, obs. frame]"
        }

        #----- Plot light curve -----
        ctype $col_lc
        ltype 1 lweight 3
        histogram  x  nyX  if( x <  0 ) 
        ltype 0 lweight 4
        histogram  x  nyX  if( x >= 0 ) 
        lweight 3

##-------------------------------------------------------------------------------
## plot_all_lc1 
plot_all_lc1  

        define which_family ? < Which family of runs [hla|hlb|hlc|hld] : > 

        if( substr('$which_family',0,3) == 'hla' ) { 
           set subcases = < o1 r1 r2 r3 r4 r5 > 
           set subcases = < o1 r1       r4 r5 > 
        }
        if( substr('$which_family',0,3) == 'hlb' ) { 
           set subcases = < o1 r1 r2 > 
        }
        if( substr('$which_family',0,3) == 'hlc' ) { 
           set subcases = < o1 r1 r2 r3 r4 r5 > 
           set subcases = < o1 r1 r2       r5 > 
           set subcases = <    r1 r2       r5 > 
        }
        if( substr('$which_family',0,3) == 'hld' ) { 
           set subcases = < o1 r1 r2 r3 r4 r5 > 
           set subcases = < o1 r1 r2       r5 > 
        }

        define 1 $which_family
        define nc (1) 
        foreach 2 subcases {
           define nc $($nc+1)
           plot_lc1 $1_$2 $nc
        }

#-------------------------------------------------------------------------------
# sequence_of_seds_figs     : makes one PS file for each SED for a given run
sequence_of_seds_figs

        set_read_sim_gf

        define flag_zoom (0)

        if( $flag_ext ) { 
           data "$!XC_DATA/$!SIMDIR/blackbody.in"
           read < xfg 1 fg0 2 >
        }

        if( $flag_fg_case ) { 
           if( $flag_zoom ) { 
              data "$!XC_DATA/$!SIMDIR/sed_fg_zoom.dat"
           } else { 
              data "$!XC_DATA/$!SIMDIR/sed_fg.dat"
           }
           read < fg 2 >
           define fg_scaling_factor read 3 2   #GF# NEW
        }

        define mnemostring ? < string for file names [seq_seds_*] : > 
        define 8 $mnemostring
        do 9=1,40 {
           device postencap seq_seds_$8_$(sprintf('%02d',$9)).ps
           make_sed_box 
           plot_one_sed $9 "red2" 4
        }
        device x11

# sequence_of_seds_figs_bis : makes one PS file for each SED for a given run 
#                             WITH MW DATA and GREYED OUT PREVIOUS SEDs
#                             >>> THIS IS THE BEST FOR VIDEO CLIPS <<<
sequence_of_seds_figs_bis

        set_read_sim_gf

        define flag_zoom (0)

        #if( $flag_zoom ) { 
        #   data "$!XC_DATA/$!SIMDIR/seds_30_zoom.dat"
        #} else { 
        #   data "$!XC_DATA/$!SIMDIR/seds.dat"
        #}
        #
        #if( $flag_ext ) { 
        #   data "$!XC_DATA/$!SIMDIR/blackbody.in"
        #   read < xfg 1 fg0 2 >
        #}
        #
        #if( $flag_fg_case ) { 
        #   if( $flag_zoom ) { 
        #      data "$!XC_DATA/$!SIMDIR/sed_fg_zoom.dat"
        #   } else { 
        #      data "$!XC_DATA/$!SIMDIR/sed_fg.dat"
        #   }
        #   read < fg 2 >
        #   define fg_scaling_factor read 3 2   #GF# NEW
        #}

        define mnemostring ? < string for file names [seq_seds_*] : > 
        define 8 $mnemostring
        do 9=1,40 {
           device postencap seq_seds_$8_$(sprintf('%02d',$9)).ps
           make_sed_box 
           do 7=1,$($9-1) {
              plot_one_sed $7 "grey80" 2
           }
           plot_one_sed $9 "red2" 4
           limits $vmin $vmax $nlnmin $nlnmax
           plot_other_data_1510

           define time1 ( int( ($t_seds_start + $t_seds_dt*($9-1.) - $t_inj/$Gamma)/1000. ) )
           define time2 ( int( ($t_seds_start + $t_seds_dt* $9     - $t_inj/$Gamma)/1000. ) )  # = time11 + t_seds_dt/1000.
           define time_ks  $(0.5*($time1+$time2))
           define time_d   $(0.5*($time1+$time2)/86.4)
           define strTks $(sprintf('%6.1f',$(1.0001*$time_ks)))
           define strTd  $(sprintf('%6.2f',$(1.0001*$time_d)))
           #echo " t_seds_start    : "$t_seds_start
           #echo " t_inj : "$t_inj
           #echo " dt    : "$t_seds_dt
           #echo " strT  : "$strT 
           relocate ( $($gx1+1000) $($gy2-1500) ) 
           putlabel 6 "T = "$strTks" ks"
           relocate ( $($gx1+1000) $($gy2-3000) ) 
           putlabel 6 "T = "$strTd" d"
        }
        device x11

# sequence_of_seds_interactive : plots all SED of one run in one BOX
#                                ALTERNATING GREY AND RED 
sequence_of_seds_interactive 

        set_read_sim_gf
        define flag_zoom (0)

        #if( $flag_zoom ) { 
        #   data "$!XC_DATA/$!SIMDIR/seds_30_zoom.dat"
        #} else { 
        #   data "$!XC_DATA/$!SIMDIR/seds_30.dat"
        #}
        #
        #if( $flag_ext ) { 
        #   data "$!XC_DATA/$!SIMDIR/blackbody.in"
        #   read < xfg 1 fg0 2 >
        #}
        #
        #if( $flag_fg_case ) { 
        #   if( $flag_zoom ) { 
        #      data "$!XC_DATA/$!SIMDIR/sed_fg_zoom.dat"
        #   } else { 
        #      data "$!XC_DATA/$!SIMDIR/sed_fg.dat"
        #   }
        #   read < fg 2 >
        #   define fg_scaling_factor read 3 2   #GF# NEW
        #}

        make_sed_box 
        
        plot_one_sed 1 "red2" 3

        define go (1)
        define 9 (1)
        define time1 ( int( ($t_seds_start + $t_seds_dt*($9-1.) - $t_inj/$Gamma)/1000. ) )
        define time2 ( int( ($t_seds_start + $t_seds_dt* $9     - $t_inj/$Gamma)/1000. ) )  # = time11 + t_seds_dt/1000.
        define time_ks  $(0.5*($time1+$time2))
        define strTks $(sprintf('%6.1f',$(1.0001*$time_ks)))
        echo $time_ks

        do 9=2,40 {
           if( $go == -1 ) { return }
           if( $go == 1 ) {
              plot_one_sed $($9-1) "grey80" 2
              plot_one_sed $9      "red2" 3
              define time1 ( int( ($t_seds_start + $t_seds_dt*($9-1.) - $t_inj/$Gamma)/1000. ) )
              define time2 ( int( ($t_seds_start + $t_seds_dt* $9     - $t_inj/$Gamma)/1000. ) )  # = time11 + t_seds_dt/1000.
              define time_ks  $(0.5*($time1+$time2))
           } else {
              define time_ks  $($time_ks + $t_seds_dt/1000.)
           }
           define strTks $(sprintf('%6.1f',$(1.0001*$time_ks)))
           define go ? < This= $9 / Time[ks]= $strTks ... Next= $($9+1) [-1|0|1] : >
           #echo " Time[ks] = "$time_ks
           #define go ? < Next= $($9+1) [-1|0|1] : >
        }

        limits $vmin $vmax $nlnmin $nlnmax
        plot_other_data_1510

## make_sed_box
make_sed_box

        reset_graph   # SETTING LOCATION AT: 5500 30000 5500 30000
        # location  5500 30000 4500 30000
        # location  4500 31000 3500 31000
        location 4500 27500 7500 28000

        #MOVED# NOW THESE PARAMETERS ARE READ BY 'set_read_sim_gf' 
        #MOVED#   THAT IS CALLED ALWAYS BEFORE 'make_sed_box' ==> MAKE SURE THAT REMAINS TRUE
        #MOVED#
        #MOVED# data "$!XC_DATA/$!SIMDIR/main_parameters.dat"
        #MOVED# define t_inj  read 12 3 
        #MOVED# define Gamma  read 17 3

        if( $flag_zoom ) { 
           data "$!XC_DATA/$!SIMDIR/seds_zoom.dat"
           define t_seds_start       read 1 2
           define t_seds_end         read 1 3
           define t_seds_dt          read 1 5
           define sed_scaling_factor read 3 2   #GF# NEW

           define t_seds_start_obs $( $t_seds_start - $t_inj/$Gamma )
           echo "+--------------------------------------"
           echo "| Parameters UPDATED from ZOOM data file"
           echo "| "
           echo "|  t_start (SEDs)      : "$t_seds_start
           echo "|  t_end (SEDs)        : "$t_seds_end
           echo "|  dt (SEDs)           : "$t_seds_dt
           echo "|  SED scaling factor  : "$sed_scaling_factor
           echo "+--------------------------------------"
           echo "|  start time of SED #1: "$t_seds_start_obs
           echo "+--------------------------------------"
        } else { 
           data "$!XC_DATA/$!SIMDIR/seds.dat"
        }

        #-------------------------------------------------
        if( $flag_ext ) {
           define vmin  9.8
           define vmax 25.4
           define nlnmin  43.4
           define nlnmax  48.0
        } else {
           if( $flag_zoom ) { 
              define vmin 16.8
              define vmax 19.2
              define nlnmin  43.1
              define nlnmax  45.9
           } else { 
              define vmin 12.8
              define vmax 28.4
              define nlnmin  42.2 #42.6
              define nlnmax  45.8 #46.2
           }
        }

        #-------------------------------------------------
        # plot the axes in frequency (bottom) and flux (right) 
        #
        if( $flag_ext ) {
            limits $vmin $vmax $($nlnmin-$surf_1510) $($nlnmax-$surf_1510)
        } else {
            limits $vmin $vmax $($nlnmin-$surf_421)  $($nlnmax-$surf_421)
        }
        if( $flag_zoom ) { 
           ticksize 0.2 1 0.2 1 
        } else { 
           ticksize 1 3 0 0
        }
        box 1 4 4 2
        xlabel "log(\nu) [Hz]"
        relocate ( $($gx2 + 3500) $(($gy1+$gy2)/2.) )
        angle -90
        putlabel 5 "log(\nu F_\nu) [erg s^{-1} cm^{-2}]"
        angle 0

        #-------------------------------------------------
        # plot the data points
        limits $fx1 $fx2 $nlnmin $nlnmax

        if( $flag_ext ) {
           #plot_ned_data_1510
           plot_other_data_1510
        } else {  
           plot_ned_data_421
           plot_mw_data_421_jb
           plot_mw_data_421_gf
           plot_new_data_421
        }

        #-------------------------------------------------
        # plot the xlabel in eV (top) and ylabel in Luminosity (left)
        #
        limits $($vmin-14.384) $($vmax-14.384) $nlnmin $nlnmax
        if( $flag_zoom ) { 
           limits $($vmin-17.384) $($vmax-17.384) $nlnmin $nlnmax
           ticksize -1 10 0.2 1
        } else { 
           ticksize  1  3 0.2 1
        }
        ctype 2 
        ltype 0 
        expand 1.5
        box 4 2 1 4
        #ylabel "log(\nu L_\nu) [erg s^{-1}]"
        relocate ( $($gx1-3000) $(0.5*($gy1+$gy2)) ) 
        angle 90
        putlabel 5 "log(\nu L_\nu) [erg s^{-1}]"
        angle 0 

        limits $($vmin-14.384) $($vmax-14.384) $nlnmin $nlnmax

        relocate ( $(($gx1+$gx2)/2.)  $($gy2+2000) )
        if( $flag_zoom == 1 ) { 
           putlabel 5 "E [keV]"
        } else { 
           putlabel 5 "log(E) [eV]"
        }

## make_sed_box_larger_and_empty
make_sed_box_larger_and_empty

        reset_graph   # SETTING LOCATION AT: 5500 30000 5500 30000
        # location  5500 30000 4500 30000
        # location  4500 31000 3500 31000
        # location 4500 27500 7500 28000
        location 4000 28250 3250 30000

        #MOVED# NOW THESE PARAMETERS ARE READ BY 'set_read_sim_gf' 
        #MOVED#   THAT IS CALLED ALWAYS BEFORE 'make_sed_box' ==> MAKE SURE THAT REMAINS TRUE
        #MOVED#
        #MOVED# data "$!XC_DATA/$!SIMDIR/main_parameters.dat"
        #MOVED# define t_inj  read 12 3 
        #MOVED# define Gamma  read 17 3

        if( $flag_zoom ) { 
           data "$!XC_DATA/$!SIMDIR/seds_zoom.dat"
           define t_seds_start       read 1 2
           define t_seds_end         read 1 3
           define t_seds_dt          read 1 5
           define sed_scaling_factor read 3 2   #GF# NEW

           define t_seds_start_obs $( $t_seds_start - $t_inj/$Gamma )
           echo "+--------------------------------------"
           echo "| Parameters UPDATED from ZOOM data file"
           echo "| "
           echo "|  t_start (SEDs)      : "$t_seds_start
           echo "|  t_end (SEDs)        : "$t_seds_end
           echo "|  dt (SEDs)           : "$t_seds_dt
           echo "|  SED scaling factor  : "$sed_scaling_factor
           echo "+--------------------------------------"
           echo "|  start time of SED #1: "$t_seds_start_obs
           echo "+--------------------------------------"
        } else { 
           data "$!XC_DATA/$!SIMDIR/seds.dat"
        }

        #-------------------------------------------------
        if( $flag_ext ) {
           define vmin  9.8
           define vmax 25.4
           define nlnmin  43.4
           define nlnmax  48.0
        } else {
           if( $flag_zoom ) { 
              define vmin 16.8
              define vmax 19.2
              define nlnmin  43.1
              define nlnmax  45.9
           } else { 
              define vmin 12.8
              define vmax 28.4
              define nlnmin  42.2 #42.6
              # define nlnmax  45.8 #46.2
              define nlnmax  46.2 
           }
        }

        #-------------------------------------------------
        # plot the axes in frequency (bottom) and flux (right) 
        #
        if( $flag_ext ) {
            limits $vmin $vmax $($nlnmin-$surf_1510) $($nlnmax-$surf_1510)
        } else {
            limits $vmin $vmax $($nlnmin-$surf_421)  $($nlnmax-$surf_421)
        }
        if( $flag_zoom ) { 
           ticksize 0.2 1 0.2 1 
        } else { 
           ticksize 1 3 0 0
        }
        box 1 4 4 2
        xlabel "log(\nu) [Hz]"
        relocate ( $($gx2 + 3500) $(($gy1+$gy2)/2.) )
        angle -90
        putlabel 5 "log(\nu F_\nu) [erg s^{-1} cm^{-2}]"
        angle 0

        #-------------------------------------------------
        # plot the xlabel in eV (top) and ylabel in Luminosity (left)
        #
        limits $($vmin-14.384) $($vmax-14.384) $nlnmin $nlnmax
        if( $flag_zoom ) { 
           limits $($vmin-17.384) $($vmax-17.384) $nlnmin $nlnmax
           ticksize -1 10 0.2 1
        } else { 
           ticksize  1  3 0.2 1
        }
        ctype 2 
        ltype 0 
        expand 1.5
        box 4 2 1 4
        #ylabel "log(\nu L_\nu) [erg s^{-1}]"
        relocate ( $($gx1-3000) $(0.5*($gy1+$gy2)) ) 
        angle 90
        putlabel 5 "log(\nu L_\nu) [erg s^{-1}]"
        angle 0 

        limits $($vmin-14.384) $($vmax-14.384) $nlnmin $nlnmax
        relocate ( $(($gx1+$gx2)/2.)  $($gy2+2000) )
        if( $flag_zoom == 1 ) { 
           putlabel 5 "E [keV]"
        } else { 
           putlabel 5 "log(E) [eV]"
        }

# plot_one_sed <n> <color> <lweight> [<smoothing factor, DEF=5>]
plot_one_sed 34

        if( $flag_zoom ) { 
           data "$!XC_DATA/$!SIMDIR/seds_zoom.dat"
        } else { 
           data "$!XC_DATA/$!SIMDIR/seds.dat"
        }

        define sf local
	if( $?4 ) {
           define sf $4
	} else {
           define sf (5)
	}

        #define time11 ( int(($t_seds_start + $t_seds_dt*($1 + 1 - 1.))/1000.) )
        #define time12 ( int(($t_seds_start + $t_seds_dt* $1 + 1     )/1000.) )

        #-------------------------------------------------
        # Reads one SED
        #-------------------------------------------------
        verbose 0 
        read < x 1 y1 $($1+1) > 
        verbose 1 
        set y1 = y1 - lg($sed_scaling_factor)

        #-------------------------------------------------
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        # Additional SED components
        #-------------------------------------------------
        # separate foreground SED
        if( $flag_fg_case ) { 
           #if( $flag_zoom ) { 
           #   data "$!XC_DATA/$!SIMDIR/sed_fg_zoom.dat"
           #} else { 
           #   data "$!XC_DATA/$!SIMDIR/sed_fg.dat"
           #}
           #read < fg 2 >
           #define fg_scaling_factor read 3 2   #GF# NEW
           echo "| Parameters read from data file"
           echo "| SED FG scaling factor : "$fg_scaling_factor

           set y1  = y1 + fg/$fg_scaling_factor
           set lfg = lg(x*fg/$fg_scaling_factor)
           mysmooth lfg lfg_5 5
        }
     
        # black body SED
        if( $flag_ext ) { 
           #data "$!XC_DATA/$!SIMDIR/blackbody.in"
           #read < xfg 1 fg0 2 >

           set lx   = lg(x)
           set lxfg = lg(xfg)
           interp2 lxfg fg0 lx fg

           set y1  = lg( 10.0**y1 + fg )
           set lfg = lg(x*fg)
           mysmooth lfg lfg_5 5
        }
        #-------------------------------------------------
        
        #-------------------------------------------------
        # Converting into nFn and smoothing
        #-------------------------------------------------
        set lx  = lg(x) + 3
        set ly1 = lg(x) + y1 
        mysmooth ly1 ly1s $sf 

        #define cty_sed1 "deepskyblue2"
        #ctype $cty_sed1 histogram lx ly1s if( lx > lx[2] )
        ctype $2 
        lweight $3
        histogram lx ly1s if( lx > lx[2] )
        lweight 3 
        ctype 2 

#-------------------------------------------------------------------------------
# make_all_seds_figs  [<run code>]   [OBSOLETE]
make_all_seds_figs 01

        if( $?1 ) { 
           define which_case $1
        } else { 
           define which_case ? < Which case [ext|hl] : >
        }

        if( substr('$which_case',0,2) == 'ex' ) { 
           set names = < ext15 ext15_highgmin ext15ir ext25 ext_ssc ext15nf_bb ext15nf > 
        }
        if( substr('$which_case',0,2) == 'hl' ) { 
           set names = < hla1 hlb1 hlc1 hld1 > 
        }

        foreach 9 names { 
           device postencap test_seds_$9.ps
           plot_seds $9
        }
        device x11

##-------------------------------------------------------------------------------
# make_all_lc7_figs   [<run code>]   [OBSOLETE]
make_all_lc7_figs 01

        if( $?1 ) { 
           define which_case $1
        } else { 
           define which_case ? < Which case [ext|hl] : >
        }

        if( substr('$which_case',0,2) == 'ex' ) { 
           set names = < ext15 ext15_highgmin ext15ir ext25 ext_ssc ext15nf_bb ext15nf > 
        }
        if( substr('$which_case',0,2) == 'hl' ) { 
           set names = < hla1 hlb1 hlc1 hld1 > 
        }

        foreach 9 names {
           echo " "
           echo " "
           echo " "
           echo " "
           echo " "
           device postencap test_lc_$9.ps
           plot_lc7 $9
        }
        device x11

#-------------------------------------------------------------------------------
# plot_ff  [<run code>]  [<band 1>]  [<band 2>] 
#         : VHE flux (or X-ray) vs. X-ray flux plot
#         : bands are 1/2/3 1/2 || 10/20/30 10/20
plot_ff  03

        reset_graph
        #location 4500 31000 3500 31000

        #location 4000 28250 3250 30000 # current seds (2013.08.10)
        #location 4000 30000 3250 30000 # current lc   (2013.08.10)

        #location 4000 28250 3250 30000 # SEDs
        location 5500 30000 4500 29000 # LCs
        location 4000 28250 3250 30000 # SEDs
        location 5000 31000 3250 30000 # current lc   (2013.08.10)

        lweight 4
        expand 1.5
        ltype 0 
        ctype 2 

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }

        define flag_ask_bands (1)
        if( $?3 ) {
           define xband $2
           define gband $3
           define flag_ask_bands (0)
        }

        if( $flag_ask_bands ) {
           echo "+--------------------------------------"
           echo "  X-ray band : "
           echo "  [ 1] 0.1 -  1 keV "
           echo "  [ 2] 2   -  4 keV "
           echo "  [ 3] 9   - 15 keV "
           echo "     or "
           echo "  [10] 0.4 -  4 TeV "
           echo "  [20] 1   - 10 TeV "
           define xband ? <  Which X-ray band : >
           echo "+--------------------------------------"
           echo "  VHE band : "
           echo "  [ 1] 0.4 -  4 TeV "
           echo "  [ 2] 1   - 10 TeV "
           echo "     or "
           echo "  [10] 0.1 -  1 keV "
           echo "  [20] 2   -  4 keV "
           echo "  [30] 9   - 15 keV "
           define gband ? <  Which VHE band : >
        }

        #if( $xband == 4 ){
        #   data "$!XC_DATA/$!SIMDIR/lc_07_2_10.dat"
        #   read < x 1 y2 4 >   # CHECK COLUMN
        #} 
        if( $xband ==  1 ) { define idx2 4 } 
        if( $xband ==  2 ) { define idx2 2 }
        if( $xband ==  3 ) { define idx2 3 }
        if( $xband == 10 ) { define idx2 5 } 
        if( $xband == 20 ) { define idx2 7 }
        #
        if( $gband ==  1 ) { define idx7 5 } 
        if( $gband ==  2 ) { define idx7 7 }
        if( $gband == 10 ) { define idx7 4 } 
        if( $gband == 20 ) { define idx7 2 }
        if( $gband == 30 ) { define idx7 3 }

        # the 'alt' lc file actually includes all the X and gamma bands
        data "$!XC_DATA/$!SIMDIR/lc_07_alt.dat"
        read < x 1 y2 $($idx2+1) >
        read < x 1 y7 $($idx7+1) >

        define lum_scaling_factor read 10 2
        echo "| Parameters read from data file"
        echo "| Luminosity scaling factor : "$lum_scaling_factor

        set y2 = y2 - lg($lum_scaling_factor)
        set y7 = y7 - lg($lum_scaling_factor)

        foreach 8 < 2 7 > {
           do 9=1,2 {
               define row   $idx$8
               define place $($9+2)
               define range$8$9 read $row $place
               echo $8 $9 $range$8$9
           }
        }

        foreach 8 < 2 7 > {
           do 9=1,2 {
               define 6 "units$8$9"
               define 7 "range$8$9"

               define $7 $(1e0*$$7)  
               define $6 "keV"

               if( $$7 <  1.0e-2 ) { 
                  define $7 $(1e3*$$7)  
                  define $6 "eV"
               }
               if( $$7 >= 1.0e5 && $$7 < 1.0e8 ) { 
                  define $7 $(1e-6*$$7)
                  define $6 "GeV"
               }
               if( $$7 >= 1.0e8  ) { 
                  define $7 $(1e-9*$$7)
                  define $6 "TeV"
               }
           }
        }

        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        if( $flag_fg_case ) {
           if( $xband == 1 ) {
              data "$!XC_DATA/$!SIMDIR/lc_07_fg.dat"
           } else {
              data "$!XC_DATA/$!SIMDIR/lc_07_2_10_fg.dat" 
           }
           read < fg1 2 fg2 3 fg3 4 fg4 5 fg5 6 fg6 7 fg7 8 >
           define fg_scaling_factor read 9 2   #GF# NEW
           echo "| Parameters read from data file"
           echo "| LC FG scaling factor : "$fg_scaling_factor
           # define fg_scaling_factor ? { >>> FG Luminosity scaling factor : }
           do 9=1,7 {
              define fg$9  $( fg$9[0]/$fg_scaling_factor )
           }

           #LIN2LOG: TO FIX#
           set y2 = y2 + $fg2
           set y7 = y7 + $fg7
        }
        
        set x = x/1000.
        set x = x - $t_inj/1000.0/$Gamma

        # assuming constant dT
        define dx $(  (x[dimen(x)-1]-x[0])/(dimen(x)-1) )

        set y2 = y2
        set y7 = y7
        foreach 8 < 2 7 > { 
           set ly$8 = y$8
        }
        #LIN2LOG# after this point things should be ok because here it was converting to log anyway

        if( $xband >= 10 ) { 
           mysmooth ly2 ly2s 4
        } else {
           set ly2s = ly2
        }
        if( $gband <= 2 ) { 
           mysmooth ly7 ly7s 4
        } else {
           set ly7s = ly7
        }
        set ly2s = ly2s - $surf_421
        set ly7s = ly7s - $surf_421

        vecminmax ly2s  xmin xmax
        vecminmax ly7s ymin ymax
        define xr1 $($xmax-1.0)
        define xr2 $($xmax+0.2)
        define yr1 $($ymax-1.0)
        define yr2 $($ymax+0.2)
        if( substr('$which_sim',0,2) == 'hl' ) { 
           #limits -10 -9 -10.5 -9.5 
           define xr1 $($xmax-0.6) # ( -9.8) 
           define xr2 $($xmax+0.2) # ( -9.0) 
           define yr1 $($ymax-0.6) # (-10.3) 
           define yr2 $($ymax+0.2) # ( -9.5) 
        }
        limits $xr1 $xr2 $yr1 $yr2
        lweight 3 
        box
        xlabel log(\\nu F_\\nu) at [$range21 $units21 - $range22 $units22]
        ylabel log(\\nu F_\\nu) at [$range71 $units71 - $range72 $units72]

        #-----------------------------------------------------------
        # Trend lines and label
        lweight 4
        ctype grey59

	define xrm  ( 0.5*($xr1+$xr2) )
	define dxrm ( 0.5*($xr2-$xr1) )
	define yrm  ( 0.5*($yr1+$yr2) )

        #set linex=<$xr1 $xr2>
        #set liney=<$yr1 $yr2>
	define sl (1.0)
        set linex=<$xr1 $xr2>
        set liney=< $($yrm-$sl*$dxrm) $($yrm+$sl*$dxrm) >
        set linex=<$xr1 $xr2>
        set liney=<$yr1 $yr2>
        lweight 4
        ltype 2
        connect linex liney
        lweight 3
        ltype 0 
        relocate ( $($gx2 - 2500) $( $gy2 - 1500) ) putlabel 4 "1.0"

        #set linex=<$xr1 $(($xr1+$xr2)/2.)>
        #set liney=<$yr1 $yr2>
	define sl (0.5)
        set linex=<$xr1 $xr2>
        set liney=< $($yrm-$sl*$dxrm) $($yrm+$sl*$dxrm) >
        set linex=<$xr1 $(($xr1+$xr2)/2.)>
        set liney=<$yr1 $yr2>
        lweight 4
        ltype 2
        connect linex liney
        lweight 3
        ltype 0 
        relocate ( $($gx2 - 1500) $( 0.5*($gy1+$gy2) - 2500) ) putlabel 4 "0.5"

        #set linex=<$xr1 $xr2>
        #set liney=<$yr1 $(($yr1+$yr2)/2.)>
	define sl (2.0)
        set linex=<$xr1 $xr2>
        set liney=< $($yrm-$sl*$dxrm) $($yrm+$sl*$dxrm) >
        set linex=<$xr1 $xr2>
        set liney=<$yr1 $(($yr1+$yr2)/2.)>
        lweight 4
        ltype 2
        connect linex liney
        lweight 3
        ltype 0 
        relocate ( $( 0.5*($gx1+$gx2) - 1500) $( $gy2 - 1500) ) putlabel 4 "2.0"
        #-----------------------------------------------------------

        echo "-------------------------------------------------------------"
        echo ">*** Approximate flare peak time *** " 
        if( $flag_ext == 0 && $flag_hl == 0 ) { 
           echo ">  preferred value for FG  : 37.0"
           echo ">  preferred value for STD : 36.5 (38.0)"
           echo ">  preferred value for BS  : 44.0"
        }
        echo ">  "
        #echo ">  favorite value for hlb : 40.0"
        echo ">  preferred value for hla : 24.0  (21.5 for non-corrected (?))"
        echo ">  preferred value for hlc : 20.0"
        echo ">  preferred value for hld : 17.0"
        echo ">  Note: actual march 19 flare peak time is at around 30 ks " 
        echo "> "
        define lc_peak_time ? {>>> Approximate time for flare peak : }

        ptype 4 3
        define model 2   ## define 'model'
        if( $model == 4 ) {
           lweight 3
           ctype 2 connect ly2s ly7s   if( x <= 10)
           ctype 3 connect ly2s ly7s   if( x >  9.7 && x <= 12.0 )
           ctype 4 connect ly2s ly7s   if( x > 11.7 && x <= 14.0 )
           ctype 5 connect ly2s ly7s   if( x > 13.7 && x <= 16.0 )
           ctype 6 connect ly2s ly7s   if( x > 15.7 && x <= 18.0 )
           ctype 7 connect ly2s ly7s   if( x > 17.7 && x <= 20.0 )
           ctype 8 connect ly2s ly7s   if( x > 20.0 )
           ctype 2 
           ptype 4 0 
           points  ly2s ly7s if(x > 8 &&  x < 22)

        } else {

           define xref $( $lc_peak_time )  

           if( substr('$which_sim',0,2) == 'hl' ) { 
              define int_tref (5)
           } else {
              define int_tref (10)
           }
           do 9=1,6 {
              define 8 $($9-3)
              define tref $( $xref + $8*$int_tref ) 
              set ffx= ly2s
              set ffg= ly7s
              set tt = x 
              set ss = abs(x - $tref)
              sort < ss tt ffx ffg > 
              define tref$9 $( tt[0] ) 
              echo " == tref"$9 $tref $tref$9
           }
           
           define tmin local
           define tmin (-5)
           lweight 2 ctype 2 ltype 1 connect ly2s ly7s   if( x >= $tmin )
           lweight 3 ctype 7 ltype 0 connect ly2s ly7s   if( x >= $($tref5-0.001) && x <= $($tref6+0.001) && x >= 0.0 )
           lweight 6 ctype 6 ltype 0 connect ly2s ly7s   if( x >= $($tref4-0.001) && x <= $($tref5+0.001) && x >= 0.0 )
           lweight 7 ctype 5 ltype 0 connect ly2s ly7s   if( x >= $($tref3-0.001) && x <= $($tref4+0.001) && x >= 0.0 )
           lweight 7 ctype 3 ltype 0 connect ly2s ly7s   if( x >= $($tref2-0.001) && x <= $($tref3+0.001) && x >= 0.0 )
           lweight 6 ctype 4 ltype 0 connect ly2s ly7s   if( x >= $($tref1-0.001) && x <= $($tref2+0.001) && x >= 0.0 )
           lweight 3 ctype 2 ltype 0 connect ly2s ly7s   if(                         x <= $($tref1+0.001) && x >= 0.0 ) 
           ltype 0 

           ctype 1 ptype 4 3 points  ly2s ly7s   if( x < 69.0 && x >= $tmin )
           ctype 2 ptype 4 0 points  ly2s ly7s   if( x < 69.0 && x >= $tmin )

           ctype 2 
           ptype 4 3 
           expand 1.0
           if( substr('$which_sim',0,2) != 'hl' ) { 
           foreach t2lab < 10 20 30 > {
              set ffx= ly2s
              set ffg= ly7s
              set tt = x 
              set ss = abs(x - $t2lab)
              sort < ss tt ffx ffg > 
              #set xx = ly2s  if( x >= $($t2lab-0.5*$dx) && x <= $($t2lab+0.5*$dx) )
              #set yy = ly7s  if( x >= $($t2lab-0.5*$dx) && x <= $($t2lab+0.5*$dx) )
              set xx = ffx 
              set yy = ffg 
              relocate $( xx[0] ) $( yy[0] )
              echo $( tt[0] ) $( xx[0] ) $( yy[0] )
              dot 
              #relocate $( xx[0]+ ($fx2-$fx1)/30 ) $( yy[0] )
              lweight 2 
              draw $( xx[0]+ ($fx2-$fx1)/30 ) $( yy[0]-($fy2-$fy1)/30 )
              lweight 3
              putlabel 6 "T="$t2lab
           }
           }
           expand 1.5

        }

        #-----------------------------------------------------------
        # real data
        if( substr('$which_sim',0,2) == 'hl' || substr('$which_sim',0,2) == 'ex' ) { 
           echo "*** NOTE: Not plotting actual data "
        } else {
           define name "SAVE_x_and_tev_tev01_wrbr_hfreb2_pca_5_23_32"
           if( substr('$which_sim',0,2) == 'bs' || substr('$which_sim',0,2) == 'st' ) { 
              define drxte (0.0)
              define dtev  (0.0)
           } 
           if( substr('$which_sim',0,2) == 'fg' ) { 
              define drxte (-0.1) 
              define dtev  (0.0)
           } 
           plot_ff_tev $drxte $dtev
        }

        ctype 0
        
##-------------------------------------------------------------------------------
# make_all_ff_figs  < run codes > 
make_all_ff_figs 01 

        if( $?1 ) { 
           define which_runs ("$!1")
	   set names = < $1 >
        } else {
           define which_runs ? < codes of the runs to process : >
	   set names = < $which_runs > 
        }

        device postencap test_fluxflux_lowX_midX.ps
        plot_ff $1 1 20 
        device postencap test_fluxflux_lowX_highX.ps
        plot_ff $1 1 30
        device postencap test_fluxflux_midX_highX.ps
        plot_ff $1 2 30

        device postencap test_fluxflux_lowX_lowG_s4.ps
        plot_ff $1 1 1
        device postencap test_fluxflux_midX_lowG_s4.ps
        plot_ff $1 2 1
        device postencap test_fluxflux_highX_lowG_s4.ps
        plot_ff $1 3 1

        # device postencap test_fluxflux_lowX_highG_s4.ps
        # plot_ff $1 1 2
        # device postencap test_fluxflux_midX_highG_s4.ps
        # plot_ff $1 2 2
        # device postencap test_fluxflux_highX_highG_s4.ps
        # plot_ff $1 3 2

	dev x11

#-------------------------------------------------------------------------------
# prepare_nu_peak  [<run code>]
prepare_nu_peak  01

        reset_graph   # SETTING LOCATION AT: 5500 30000 5500 30000
        # location  5500 30000 4500 30000
        # location  4500 31000 3500 31000

        #lc7: location 5500 30000 4500 30000
        #location 4500 27500 7500 28000
        location 4000 28250 3250 30000

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }
	define 1 $which_sim
	#echo " check 1 : "$1
        
        data "$!XC_DATA/$!SIMDIR/seds.dat"

        if( substr('$which_sim',0,2) == 'ex' || substr('$which_sim',0,2) == 'hl' ) {
           #echo ">>>> Using given scaling factor "
        } else {
           define sed_scaling_factor ? <       SED scaling factor : >
        }

        define sf local
        define sf (4)

        read < seds_x_keV 1 >
        set seds_x_keV = lg(seds_x_keV)
        set seds_x_eV  = seds_x_keV + 3.0
	set seds_x_nu  = seds_x_eV  + 14.384
	do 9=1,5 { 
           read < y_in_1 $(1 + ($9-1)*6 + 1) \
                  y_in_2 $(1 + ($9-1)*6 + 2) \
                  y_in_3 $(1 + ($9-1)*6 + 3) \
                  y_in_4 $(1 + ($9-1)*6 + 4) \
                  y_in_5 $(1 + ($9-1)*6 + 5) \
                  y_in_6 $(1 + ($9-1)*6 + 6) >
	   do 8=1,6 {
	      define 7 $(($9-1)*6 + $8)
	      # echo $9 $8 $7
	      set seds_in_$7  = y_in_$8
	      set seds_nLn_$7 = seds_x_keV + seds_in_$7 - lg($sed_scaling_factor)
	   }
	}

	#-------------------------------------------------
	# making running-averaged SEDs
	#-------------------------------------------------
	define dn     (2)
	define base_w ($dn+1)

	do 9=1,30 {
	   set nn = $9-$dn,$9+$dn
	   set nn = nn   if( nn >= 1 && nn <= 30 )

	   set seds_nLn_av_$9 = 0.0*seds_x_nu
	   define n_av  (1)
	   define tot_w (0.0)
           
	   #echo " "
	   foreach 8 nn {
	      define n_av   ( $n_av + 1 )
	      define this_w ( 1.0 )
	      define this_w ( $base_w - abs($9 - $8) )
	      define this_w ( 2.0**( $base_w - abs($9 - $8) - 1.0 ) )
	      define tot_w  ( $tot_w + $this_w )
	      #echo $9 $8 $this_w $tot_w 
	      set seds_nLn_av_$9 = seds_nLn_av_$9 + $this_w*seds_nLn_$8
	   }
	   #echo " ["$9"] N_av = "$n_av"   ,  tot_w = "$tot_w
	   set seds_nLn_av_$9 = seds_nLn_av_$9/$tot_w
	}
	#-------------------------------------------------

	#-------------------------------------------------
	# smoothing SEDs
	#-------------------------------------------------
	do 9=1,30 {
           mysmooth seds_nLn_$9 seds_nLn_s_$9 $sf 
	   set seds_nLn_raw_$9 = seds_nLn_$9
	   set seds_nLn_$9     = seds_nLn_s_$9
           mysmooth seds_nLn_av_$9 seds_nLn_avs_$9 $sf 
	}

	set seds_t_n = 1,30
	set seds_times_n = seds_t_n
        set seds_t_1 = int( ($t_seds_start + $t_seds_dt*(seds_times_n-1.) - $t_inj/$Gamma)/100. )/10. 
        set seds_t_2 = int( ($t_seds_start + $t_seds_dt* seds_times_n     - $t_inj/$Gamma)/100. )/10. 
	set seds_t   = 0.5*( seds_t_1 + seds_t_2 )
	delete seds_t_1 
	delete seds_t_2
	
	set seds_peak1_x   = 0.0*seds_times_n 
	set seds_peak1_y   = 0.0*seds_times_n 
	set seds_peak2_x   = 0.0*seds_times_n 
	set seds_peak2_y   = 0.0*seds_times_n 
	set seds_peak1av_x = 0.0*seds_times_n 
	set seds_peak1av_y = 0.0*seds_times_n 
	set seds_peak2av_x = 0.0*seds_times_n 
	set seds_peak2av_y = 0.0*seds_times_n 
	do 9=1,30 {
	   #-------------------------------------------------
	   # calling peaks-finding routine for each SED
           #   find_sed_peaks  <nu>  <nLn>  <split_nu>
	   #-------------------------------------------------
           find_sed_peaks seds_x_nu seds_nLn_$9   20
	   set seds_peak1_x[$9-1] = $peak1_x
	   set seds_peak1_y[$9-1] = $peak1_y
	   set seds_peak2_x[$9-1] = $peak2_x
	   set seds_peak2_y[$9-1] = $peak2_y

           find_sed_peaks seds_x_nu seds_nLn_avs_$9 20
	   set seds_peak1av_x[$9-1] = $peak1_x
	   set seds_peak1av_y[$9-1] = $peak1_y
	   set seds_peak2av_x[$9-1] = $peak2_x
	   set seds_peak2av_y[$9-1] = $peak2_y
	}

	set seds_compton_dom    = seds_peak2_y   - seds_peak1_y 
	set seds_compton_dom_av = seds_peak2av_y - seds_peak1av_y 

	# echo " check 1 : "$1
        foreach 9 < seds_t     \
                    seds_x_eV  \
                    seds_x_keV \
                    seds_x_nu  \
                    seds_peak1_x   seds_peak1_y   \
                    seds_peak2_x   seds_peak2_y   \
                    seds_compton_dom              \
                    seds_peak1av_x seds_peak1av_y \
                    seds_peak2av_x seds_peak2av_y \
                    seds_compton_dom_av           > {
	   set $9_$1 = $9
	}

##-------------------------------------------------------------------------------
# plot_ic_peak_region_1   <n of sed>
plot_ic_peak_region_1 1

        reset_graph
        limits 23 28 43 46 
	box 1 2 0 0 

        ctype 5 
	connect seds_x_nu (seds_in_$1 + seds_x_keV) 

        ctype red2 
	connect seds_x_nu seds_nLn_$1 

        ctype orange
	#ltype 2 
	#connect seds_x_nu seds_nLn_$1av
	ltype 0
	connect seds_x_nu seds_nLn_avs_$1

	ptype 20 3 
	ctype darkorange
	relocate $(seds_peak2av_x[$1-1]) $(seds_peak2av_y[$1-1]) 
	dot 
	ptype 20 3 
	ctype 3
	relocate $(seds_peak2_x[$1-1])   $(seds_peak2_y[$1-1]) 
	dot

	ctype 2 

##-------------------------------------------------------------------------------
# plot_ic_peak_region
plot_ic_peak_region

        reset_graph
        limits 23 28 43 46 
	box 1 2 0 0 

        ctype 5 
	do 9=1,30 { 
	   connect seds_x_nu (seds_in_$9 + seds_x_keV) 
	}

        ctype red2 
	do 9=1,30 { 
	   connect seds_x_nu seds_nLn_$9 
	}

	ctype 2 

##-------------------------------------------------------------------------------
# plot_nu_peak_vs_Lpeak  [<run code>]   [<color>]
plot_nu_peak_vs_Lpeak  02

        if( $?2 ) { 
           define run_code $1
	   define cc       $2
	} else {
	   define cc "red2"
           if( $?1 ) { 
              define run_code $1
           } else { 
              define run_code ? < run code [e.g. hlc1] : > 
           }
	}
        
	prepare_nu_peak $run_code
	define 9 $run_code

	echo "+-------------------------------------------------"
	echo "| [1]                smoothed SEDs "
	echo "| [2] box-averaged & smoothed SEDs "
	define which_peak_estimate ?  <|        Which peak estimate [1|2] : > 

	if( $which_peak_estimate == 1 ) { 
	   set p1x = seds_peak1_x_$9  
	   set p1y = seds_peak1_y_$9
	   set p2x = seds_peak2_x_$9  
	   set p2y = seds_peak2_y_$9
	} else {
	   set p1x = seds_peak1av_x_$9
	   set p1y = seds_peak1av_y_$9
	   set p2x = seds_peak2av_x_$9
	   set p2y = seds_peak2av_y_$9
	}

	reset_graph

        location 4000 30000 10000 23000 

	define vrange (1.95)
        define vmin1   16.0
        define vmax1  ($vmin1 + $vrange)

        define vmin2   24.2
        define vmax2  ($vmin2 + $vrange)

        define nlnmin  43.8
        define nlnmax  45.8
        ticksize 0.2 0.5 0.2 1.0

        #-------------------------------------------------
        lweight 3
        expand 1.5
        ltype 0 
        ctype 2

        #-------------------------------------------------
        # left box : synchrotron peak
	window -2 1 1 1
        limits $vmin1 $vmax1 $nlnmin $nlnmax
        box 1 2 0 0 

	ctype 2 
	ltype 1 
	connect p1x p1y

	expand 1.01
	ctype $cc
	ltype 0
	ptype 20 3 
	points  p1x p1y

	expand 1.2
	ctype 2 
	ptype 20 0 
	relocate $(p1x[0]) $(p1y[0])
	dot

	expand 1.5
	ctype 2 

        #-------------------------------------------------
        # right box : IC peak
	window -2 1 2 1
        limits $vmin2 $vmax2 $nlnmin $nlnmax
        box 1 0 0 2 

	ctype 2 
	ltype 1 
	connect p2x p2y

	expand 1.01
	ctype $cc
	ltype 0
	ptype 20 3 
	points  p2x p2y

	expand 1.2
	ctype 2 
	ptype 20 0 
	relocate $(p2x[0]) $(p2y[0])
	dot

	expand 1.5
	ctype 2 
        #-------------------------------------------------

	window 1 1 1 1 
        relocate ( $(0.5*($gx1+$gx2)) $($gy1-2500) ) 
        putlabel 5 "log(\nu) [Hz]"
        relocate ( $($gx1-3000) $(0.5*($gy1+$gy2)) ) 
        angle 90
        putlabel 5 "log(\nu L_\nu) [erg s^{-1}]"
        angle 0 

	echo "+-------------------------------------------------"

##-------------------------------------------------------------------------------
# plot_peaks_vs_time  [<run code>]   [<color>]
plot_peaks_vs_time  02

        if( $?2 ) { 
           define run_code $1
	   define cc       $2
	} else {
	   define cc "red2"
           if( $?1 ) { 
              define run_code $1
           } else { 
              define run_code ? < run code [e.g. hlc1] : > 
           }
	}
        
	prepare_nu_peak $run_code
	define 9 $run_code

	echo "+-------------------------------------------------"
	echo "| [1]                smoothed SEDs "
	echo "| [2] box-averaged & smoothed SEDs "
	define which_peak_estimate ?  <|        Which peak estimate [1|2] : > 

	set pt = seds_t_$9
	if( $which_peak_estimate == 1 ) { 
	   set p1x = seds_peak1_x_$9  
	   set p1y = seds_peak1_y_$9
	   set p2x = seds_peak2_x_$9  
	   set p2y = seds_peak2_y_$9
	   set pcd = seds_compton_dom_$9
	} else {
	   set p1x = seds_peak1av_x_$9
	   set p1y = seds_peak1av_y_$9
	   set p2x = seds_peak2av_x_$9
	   set p2y = seds_peak2av_y_$9
	   set pcd = seds_compton_dom_av_$9
	}

	reset_graph

        #location 4000 30000 10000 23000 
        location 5000 29250  3250 30000  # 'plot_seds'

	#----------------------------------------
	define tmin   (-1.0)
	define tmax   (44.0)

	define vrange (1.8)
        define v1min   16.2
        define v1max  ($v1min + $vrange)

        define v2min   24.2
        define v2max  ($v2min + $vrange)

        #define cdmin  -1.0 
        #define cdmin  -0.95
        #define cdmax   0.1
        define cdmin  -1.10
        define cdmax  -0.10
	#----------------------------------------

        #-------------------------------------------------
        lweight 3
        expand 1.5
        ltype 0 
        ctype 2

        #-------------------------------------------------
        # box #1 : synchrotron peak
        #-------------------------------------------------
	window 1 -3 1 1
        limits $tmin $tmax $($v1min-17.384) $($v1max-17.384)
        ticksize 0 0 -1 5 
        box 4 4 0 2 
        limits $tmin $tmax $v1min $v1max
        ticksize 1.0 5.0 0 0 
        box 1 2 0 4 
	xlabel "Time [ks, obs. frame]"
	expand 1.5
	ylabel "log(\nu_{p,sy})"
	expand 1.5

	ctype 2 
	ltype 1 
	connect pt p1x

	expand 1.5
	ctype $cc
	ltype 0
	ptype 20 3 
	points  pt p1x

        limits $tmin $tmax 44.5 45.5 
	ctype 5
	ltype 0
	ptype 20 3 
	points  pt p1y

	expand 1.5
	ctype 2 

        #-------------------------------------------------
        # box #2 : IC peak
        #-------------------------------------------------
	window 1 -3 1 2
        limits $tmin $tmax $v2min $v2max
        ticksize 1.0 5.0 0 0 
        box 0 2 0 0 
	expand 1.5
	ylabel "log(\nu_{p,IC})"
	expand 1.5

	ctype 2 
	ltype 1 
	connect pt p2x

	expand 1.5
	ctype $cc
	ltype 0
	ptype 20 3 
	points  pt p2x

        limits $tmin $tmax 43.7 44.7 
	ctype 5
	ltype 0
	ptype 20 3 
	points  pt p2y

	expand 1.5
	ctype 2 

        #-------------------------------------------------
        # box #3 : Compton dominance
        #-------------------------------------------------
	window 1 -3 1 3
        limits $tmin $tmax $cdmin $cdmax
        ticksize 1.0 5.0 0 0 
        box 0 2 0 0 
	expand 1.25
	ylabel "log(L_{p,IC}/L_{p,sy})"
	expand 1.5

	ctype 2 
	ltype 1 
	connect pt pcd

	expand 1.5
	ctype $cc
	ltype 0
	ptype 20 3 
	points  pt pcd

	expand 1.5
	ctype 2 

        #-------------------------------------------------

	vecminmax pcd a b 

	define _cd1 $(sprintf('%6.3f',$(1.00001*$(pcd[0])            + 1.0e-5)))
	define _cd2 $(sprintf('%6.3f',$(1.00001*$(pcd[dimen(pcd)-1]) + 1.0e-5)))
	define _cd3 $(sprintf('%6.3f',$(1.00001*$a                   + 1.0e-5)))
	define _cd4 $(sprintf('%6.3f',$(1.00001*$b                   + 1.0e-5)))
	echo "+-------------------------------------------------------------------------------"
	echo "| Compton Dom. (initial, final, min, max) : "$_cd1" , "$_cd2" , "$_cd3" , "$_cd4
	echo "+-------------------------------------------------------------------------------"

##-------------------------------------------------------------------------------
## find_sed_peaks  <nu>  <nLn>  <split_nu>
find_sed_peaks 3

	# It uses fitx fity
	set tmpx1  = $1   if( $1 <= $3 )
	set tmpy1  = $2   if( $1 <= $3 ) 
	set tmpx2  = $1   if( $1 >  $3 )
	set tmpy2  = $2   if( $1 >  $3 ) 

	vecminmax $1 dum1 dum2
	define dx $( ($dum2-$dum1)/(dimen($1)-1) )
	set spl_x1 = tmpx1[0],tmpx1[dimen(tmpx1)-1],($dx/2.0)
	spline tmpx1 tmpy1 spl_x1 spl_y1

	set spl_x2 = tmpx2[0],tmpx2[dimen(tmpx2)-1],($dx/2.0)
	spline tmpx2 tmpy2 spl_x2 spl_y2

        set tmpx = spl_x1	
        set tmpy = spl_y1	
	sort < tmpy tmpx > 
	define peak1_x $(tmpx[dimen(tmpx)-1])
	define peak1_y $(tmpy[dimen(tmpx)-1])
	
        set tmpx = spl_x2	
        set tmpy = spl_y2	
	sort < tmpy tmpx > 
	define peak2_x $(tmpx[dimen(tmpx)-1])
	define peak2_y $(tmpy[dimen(tmpx)-1])

	delete tmpx
	delete tmpy
	
ppp2
	set spl_x = -1.0*spl_x
	set spl_x_s = spl_x
	set spl_y_s = spl_y
	sort < spl_y_s spl_x_s > 
	set spl_x_s = reverse(spl_x_s)
	set spl_y_s = reverse(spl_y_s)

	define dcf_peak_x $(spl_x_s[0])
	define dcf_peak_y $(spl_y_s[0])

#-------------------------------------------------------------------------------
## read_electrons_parameters  [<run code>]
##                           NOTE: calls 'set_read_sim_gf' within
read_electrons_parameters 01

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }
        
        #----------------------------------------
        data "$!XC_DATA/$!SIMDIR/times.dat"
        read < elec_n 1 elec_t1 2 elec_t2 3 elec_tm 4 elec_dt 5 > 

        foreach 9 < t1 t2 tm > {
           set elec_$9_obs = (elec_$9 - $t_inj)/$Gamma
        }
        set elec_dt_obs = elec_dt/$Gamma
        stats elec_dt_obs mean_dt sigma_dt dum

        echo "----------------------------------------"
        echo "  N_times = "$(dimen(elec_dt))
        echo " <dT_obs> = "$mean_dt"  ("$sigma_dt")"
        echo "----------------------------------------"

        set elec_idx_tmp = elec_n - 1     if( elec_tm_obs >= 0 ) 
        set elec_t1_tmp  = elec_t1_obs    if( elec_tm_obs >= 0 ) 
        set elec_t2_tmp  = elec_t2_obs    if( elec_tm_obs >= 0 ) 
        set elec_tm_tmp  = elec_tm_obs    if( elec_tm_obs >= 0 ) 
        set elec_dt_tmp  = elec_dt_obs    if( elec_tm_obs >= 0 ) 
        if( elec_tm_tmp[0] <= $(0.50*elec_dt_tmp[0]) ) {
           define idx_t0 $(elec_idx_tmp[0]) 
        } else {
           define idx_t0 $(elec_idx_tmp[0]-1) 
        }
        echo " idx for t=0 : "$idx_t0"  (t[idx] = "$(elec_tm_obs[$idx_t0])"  [ "$(elec_t1_obs[$idx_t0])" - "$(elec_t2_obs[$idx_t0])" ]"
        echo "----------------------------------------"

        #foreach vip_time < 0 100 200 300 400 500 600 > 
        foreach vip_time < -10 0 10 20 30 40 > {
             define vip_idx $( int( ($vip_time*1e3 - elec_tm_obs[$idx_t0])/$mean_dt + 0.5 ) + $idx_t0 )
             echo "  T = "$(sprintf('%7.2f',$($vip_time*1.000001+1e-7)))" ks   ==>  i="$(sprintf('%3d',$vip_idx))"   "$(sprintf('%8.4f',$(elec_tm_obs[$vip_idx]/1e3)))"  [ "$(sprintf('%8.4f',$(elec_t1_obs[$vip_idx]/1e3)))" - "$(sprintf('%8.4f',$(elec_t2_obs[$vip_idx]/1e3)))" ]"
        }

##-------------------------------------------------------------------------------
## set_electrons_zones
set_electrons_zones

                       echo "------------------------------------------------------------"
                       echo " Select one or two (max, for now) "
		       echo " NOTE: delay is only applied to cases flagged with a '2'."
                       echo "   --Z---     --R---"
        define flag_01_01 ? < * top     ,  core    , 01_01 [0|1|2] : > 
        define flag_01_06 ? < * top     ,  2/3 out , 01_06 [0|1|2] : > 
        define flag_16_01 ? < * middle  ,  core    , 16_01 [0|1|2] : > 
        define flag_16_06 ? < * middle  ,  2/3 out , 16_06 [0|1|2] : > 
        echo "------------------------------------------------------------"

        # define flag_01_06 ? <  top    , center 01_06 [0|1] : > 
        # define flag_16_06 ? <  middle , center 16_06 [0|1] : > 
        # define flag_01_01 ? <  top    , outer  01_01 [0|1] : > 
        # define flag_16_01 ? <  middle , outer  16_01 [0|1] : > 

##-------------------------------------------------------------------------------
# electrons_peak_evolution  [<sim. code>]   (with plot)
electrons_peak_evolution  101

        reset_graph
        #location 4000 28250 3250 30000 # SEDs
        location 4000 30000 3250 30000 # LCs

        # calls 'set_read_sim_gf' within
        if( $?1 ) { 
           read_electrons_parameters $1
        } else {
           read_electrons_parameters
        }
        
        echo "------------------------------------------------------------"
        echo " Select one or two (max, for now) "
        echo "   --Z---     --R---"
        echo " [1] top     ,  core    "
        echo " [2] top     ,  2/3 out "
        echo " [3] middle  ,  core    "
        echo " [4] middle  ,  2/3 out "
        define ecode ? < Which zone : >

        if( $ecode == 1 ) { define 1 "01_01" }
        if( $ecode == 2 ) { define 1 "01_06" }
        if( $ecode == 3 ) { define 1 "16_01" }
        if( $ecode == 4 ) { define 1 "16_06" }

        #define nc (-1)
        set pn = 0.0*elec_n
        set pt = 0.0*elec_n
        set px = 0.0*elec_n
        set py = 0.0*elec_n

        do 9=1,dimen(elec_n) {
           define nc ($9) 
           set pn[$9-1] = $9

           #define 7 $(sprintf('%03d',$nc))
           #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_$!(sprintf('%03d',$7)).dat"
           #read < x_$1 1 y_$1 2 >

           data "$!XC_DATA/$!SIMDIR/electrons/fnt_gamma.dat"
           read < x_$1 1 >

	   define Ngamma (dimen(x_$1))
	   define n2read ($nc)
           data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_all_spectra.dat"
	   lines $( ($n2read-1)*$Ngamma + 1 + 1 ) $( $n2read*$Ngamma + 1 ) 
           verbose 0
           read < y_$1 1 >
           verbose 1

           set lx_$1 = lg(x_$1+1)
           set ly_$1 = lg(y_$1) + 3.0*lx_$1

           set _x = lx_$1
           set _y = ly_$1

           sort < _y _x >
           #echo "  "$9"  "$(sprintf('%9.1f',$(elec_tm[$9-1]*1.0001))) $(sprintf('%8.5f',$(_x[dimen(_x)-1]))) $(sprintf('%8.5f',$(_y[dimen(_x)-1])))

           set pt[$9-1] = elec_tm[$9-1]
           set px[$9-1] = _x[dimen(_x)-1]
           set py[$9-1] = _y[dimen(_y)-1]

           #lweight 4 
           #connect lx_$1 ly_$1
        }

        set pt = (pt - $t_inj)/$Gamma

	#----------------------------------------
        reset_graph 
        limits -5 62 4.7 5.7 
        limits -5 82 3.7 5.7 
        ticksize 0 0 -1 0 
        box

        ltype 1 
        ctype grey50
        connect (pt/1.e3) px  
        expand 0.75
        ptype 20 3 
        if( $ecode == 1 ) { ctype red3 }
        if( $ecode == 2 ) { ctype green3 }
        if( $ecode == 3 ) { ctype blue }
        points (pt/1.e3) px
        ctype 2 
        ltype 0 

	echo "----------------------------------------"
	echo "  Results stored in arrays pt, px, py   "
	echo "----------------------------------------"

##-------------------------------------------------------------------------------
# plot_electrons_lc   [< gamma values >]
#                   hlc1 : 0.3e5 0.6e5   1.51e5   1.09e5 3.64e5
##                  hlc2 : ?
#                   hld1 : 2.0e5 4.0e5   1.51e5   1.09e5 3.64e5
##                  hld2 : 2.0e5 4.0e5   0.70e5   0.48e5 1.59e5 
##                  hld3 : 2.0e5 4.0e5   0.36e5   0.22e5 0.74e5   1.0e5 
#                   hld4 : 2.0e5 4.0e5   0.48e5   0.31e5 1.02e5 
#                3 X-ray : 7.97e4          2.38e5          4.83e5
#                6 X-ray : 4.49e4 1.42e5   2.01e5 2.84e5   4.26e5 5.49e5
## 0.1= 4.652 , 1.0= 5.152 , 0.316= 4.902  // 2.0= 5.302 , 4.0= 5.453 , 2.828= 5.377  // 9.0= 5.629 , 15.0= 5.740 , 11.61= 5.684
##      4.49e4       1.42e5         7.97e4 //      2.01e5       2.84e5         2.38e5 //      4.26e5        5.49e5         4.83e5
## In the order in which they are listed in the plot, the \gammas correspond to
##   + g_max   of the injection
##   + g_3peak of the injection 
##   + g_3peak of the steady distribution
##   + rough theoretical value of \gamma_eq  (acc.   vs. cooling) 
##   + rough theoretical value of \gamma_esc (escape vs. cooling).
plot_electrons_lc 101

        reset_graph
        #location 4000 28250 3250 30000 # SEDs
        location 4000 30000 3250 30000 # LCs

        # calls 'set_read_sim_gf' within
        read_electrons_parameters 
        set_electrons_zones

        if( $?1 ) {
           set gammavec = < $1 > 
        } else {
           define gammavar ? < Gamma values  : > 
           set gammavec = < $gammavar > 
        }

	echo " [1] scaled to baseline "
	echo " [2] scaled to top "
	echo " [3] NOT scaled "
	define plot_type ? < Select : > 

        set electrons_colors = < 'blue3' 'deepskyblue' 'forestgreen' 'orange' 'red3' 'magenta2' 'grey60' 'black' >

        foreach 9 < "01_01" "01_06" "16_01" "16_06" > { 
           define 8 $flag_$9
           define sp$8 $9
        }
        
        #---------------------------------------------------------------------
	define tplotmax (60.0)
	define tplotmax (40.0)
        if( $plot_type == 1 ) { 
	   limits $tplotmin $tplotmax $(lg(0.8))  $(lg(13.)) 
           ticksize $tick_s $tick_l -1.0 5
           define str_ylabel "N(\gamma) [scaled to baseline]"
	}
        if( $plot_type == 2 ) { 
	   limits $tplotmin $tplotmax $(lg(0.08)) $(lg(1.3)) 
           ticksize $tick_s $tick_l -1.0 5
           define str_ylabel "N(\gamma) [scaled to peak]"
	}
        if( $plot_type == 3 ) { 
	   limits $tplotmin $tplotmax 5 9.3
           ticksize $tick_s $tick_l -1 10
           define str_ylabel "\gamma^3 N(\gamma)"
	}

        # if( substr('$which_sim',0,2) == 'hl' ) { 
        #    if( $g_exp == 1 ) { limits  2.8 6.8 -8.0 -1.0 }
        #    if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
        #    if( $g_exp == 3 ) { limits  1.5 6.8 5.3 9.3 }
        #    if( $g_exp == 3 ) { limits  2.8 6.8 5.3 9.3 }
        # }
        # if( substr('$which_sim',0,3) == 'ext' ) { 
        #    if( $g_exp == 2 ) { limits -0.2 6.5 4.0 10.5 }
        #    if( $g_exp == 3 ) { limits -0.2 6.5 4.0 10.5 }
        # }

	box 1 2 0 0
        xlabel "Time since injection start [ks, obs. frame]"
        ylabel $str_ylabel

        #--------------------
        define check_how_many $( $flag_01_06 + $flag_16_06 + $flag_01_01 + $flag_16_01 )
        echo $check_how_many

        foreach 6 < "01_01" "01_06" "16_01" "16_06" > { 
           echo "   flag for "$6" : "$flag_$6
           if( $flag_$6 > 0 ) {
              if( $flag_$6 == 1 ) { 
                 define eltype (0) 
                 define dt     (0)
              }
              if( $flag_$6 == 2 ) { 
                 define eltype (2) 
                 define dt     $t_delay
              }
              if( $check_how_many <= 2 ) { define eltype (-1) } 
              SUB_plot_electron_lc $6 gammavec $eltype
           }
        }

        ctype 2 
        ltype 0 
        lweight 3 

        #-------------------------------------------------
        # legend
        #-------------------------------------------------
        expand 1.2
        expand 1.0

        define dgy $(1000*$expand)
        if( $plot_type == 1 ) { 
           define glabels_gx0 $($gx2-6000)
           define glabels_gy0 $($gy2-1000-0.5*$dgy)
           define glabels_sign (0)
        } 
        if( $plot_type == 2 ) {
           define glabels_gx0 $($gx2-6000)
           define glabels_gy0 $($gy2-1000-0.5*$dgy)
           define glabels_sign (0)
        } 
        if( $plot_type == 3 ) {
           define glabels_gx0 $($gx2-6000)
           define glabels_gy0 $($gy2-1000-0.5*$dgy)
           define glabels_sign (0)
        } 

        #define leg_str "ks"
        #if( $t_delay != 0 ) {
        #   define leg_str "ks *"
        #}
        define ngamma $(dimen(gammavec)) 
        define flag_legend (1)
        if( $flag_legend ) {
           do 9=0,dimen(gammavec)-1 { 
              ctype $(electrons_colors[$9]) 
              define this_gg $(gammavec[$9])

              relocate ( $glabels_gx0 $($glabels_gy0 + ($glabels_sign*$ngamma - $9)*$dgy) ) 
              putlabel 6 "\gamma ="$(sprintf('%8.2e',$this_gg)) #" "$leg_str
           }
           expand 1.5
        }

        ctype 0
        expand 1.5
        lweight 3 
        #------------------------------------------------------------

        echo "+--------------------------------------------------------"
        echo "|                          -- Z --  -- R --"
        echo "| Y/N flag for zone 01,01 (top    , core    ) : "$flag_01_01
        echo "| Y/N flag for zone 01,06 (top    , 2/3 out ) : "$flag_01_06
        echo "| Y/N flag for zone 16,01 (middle , core    ) : "$flag_16_01
        echo "| Y/N flag for zone 16,06 (middle , 2/3 out ) : "$flag_16_06
        echo "+--------------------------------------------------------"
        echo "| Gamma and colors "
        print '   %10.4e  %3.0f  %-s\n'  < gammavec gammaindexvec electrons_colors > 
        echo "+--------------------------------------------"

## SUB_plot_electron_lc  <zone code>  <gamma VECTOR>  <ltype>
SUB_plot_electron_lc 3

        echo " Entering SUB_plot_electron_lc : "$1

        set gammavec1 = $2 - 1
        set gammaindexvec = gammavec1*0 

        #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_001.dat"
        #verbose 0 
        #read < gg_vec 1 >
        #verbose 1
        #define first_gg  $(gg_vec[0])
        #define last_gg   $(gg_vec[dimen(gg_vec)-1]) 

        #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_gamma.dat"
        data "$!XC_DATA/$!SIMDIR/electrons/fnt_gamma.dat"
        read < gg_vec 1 >
        define first_gg  $(gg_vec[0])
        define last_gg   $(gg_vec[dimen(gg_vec)-1]) 

        #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_all_gamma.dat"
        data "$!XC_DATA/$!SIMDIR/electrons/fnt_all_gamma.dat"
        define n_gamma_files read 1 3
	define n_gamma_values $($n_gamma_files - 1)
        read < gg_all 1 >
	
        data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_all_spectra.dat"
       #verbose 0 
        read < ngg_all 1 >
       #verbose 1
        if( $plot_type == 3 ) {
	   set ngg_all = ngg_all*gg_all**3.0
	}

        define nc (-1)
        foreach 9 gammavec1 {
           define nc $($nc+1) 
           if( $9 <= $last_gg && $9 >= $first_gg ) {
              define 8 $( int( 2 + (lg($9) + lg(5.0))/lg(1.1)) )
              echo "  (gamma-1) = "$(sprintf('%10.4e',float($9)))"   ==>  i="$(sprintf('%3d',$8))"   "$(sprintf('%10.4e',float($(gg_vec[$8]))))" ["$(sprintf('%10.4e',float($(gg_vec[$8-1]))))" - "$(sprintf('%10.4e',float($(gg_vec[$8+1]))))"]"
              set gammaindexvec[$nc] = $8
           } else {
              echo "  (gamma-1) = "$(sprintf('%10.4e',float($9)))"   : INVALID BECAUSE OUTSIDE OF SIMULATED GAMMA RANGE "
              set gammaindexvec[$nc] = -1
           }
        }

        define nc (-1)
	define 4 (0)
        foreach 9 gammaindexvec {
        if( $9 > 0 ) {

           define nc $($nc+1) 
	   define 4 $($4+1)
	   set dimen(lgg_$4)  = $n_gamma_values
	   set dimen(lngg_$4) = $n_gamma_values

	   do 5=1,$n_gamma_values {
	      set lgg_$4[$5-1]  = lg( gg_all[$(1 + 200*($5-1) + $9)])
	      set lngg_$4[$5-1] = lg(ngg_all[$(1 + 200*($5-1) + $9)])
	   }
	   set test_lngg = lngg_$4  if( elec_tm_obs > -10e3 )
	   vecminmax test_lngg _min _max
	   if( $plot_type == 1 ) { set lngg_$4 = lngg_$4 - $_min }
	   if( $plot_type == 2 ) { set lngg_$4 = lngg_$4 - $_max }

           if( $3 < 0 ) { 
              if( ( $nc % 2 ) == 0 ) {
                 ltype 0
              } else {
                 ltype 2
              }
           } else {
              ltype $3
           }
           ctype $(electrons_colors[$nc])
           lweight 4 
           connect (elec_tm_obs/1000.) lngg_$4

          #define 6 $which_sim
          #set lx_$6_$1_$7 = lx_$1
          #set ly_$6_$1_$7 = ly_$1
          #delete x_$6_$1_$7
          #delete y_$6_$1_$7
        }
        }

        ctype 2 
        ltype 0
        lweight 3 

##-------------------------------------------------------------------------------
# plot_electrons        [<observed times in ks, up to 9 values>]
plot_electrons 101

        plot_electrons_1box $1

##-------------------------------------------------------------------------------
## plot_electrons_1box   [<observed times in ks, up to 9 values>]
plot_electrons_1box 101

        reset_graph
        #location 4000 28250 3250 30000 # SEDs
        location 4000 30000 3250 30000 # LCs

        # calls 'set_read_sim_gf' within
        read_electrons_parameters 

        set_electrons_zones

        define t_delay ? < Delay to add to the SECOND set [ks] : > 
        define g_exp   ? <                g^2*N or g^3*N [2|3] : > 
        echo "------------------------------------------------------------"
        
        if( $?1 ) {
           set timesvec = < $1 > 
        } else {
           define timesvar ? < Times (in ks) : > 
           set timesvec = < $timesvar > 
        }

        #set electrons_colors = < 'blue3' 'deepskyblue' 'forestgreen' 'orange' 'red3' 'magenta2' 'grey60' 'black' >
        set electrons_colors = < 'blue3' 'deepskyblue' 'forestgreen' 'orange' 'red3' 'magenta2' 'grey60' 'black' 'brown' >

        foreach 9 < "01_01" "01_06" "16_01" "16_06" > { 
           define 8 $flag_$9
           define sp$8 $9
        }
        
        #---------------------------------------------------------------------
        limits -0.5 5.5 4 8.5
        if( substr('$which_sim',0,2) == 'hl' ) { 
           if( $g_exp == 1 ) { limits  2.8 6.8 -8.0 -1.0 }
           if( $g_exp == 2 ) { limits  1.5 6.8  1.0  4.2 }
           if( $g_exp == 3 ) { limits  1.8 6.8  4.3  9.3 } #GF: extended, used when fitting
           if( $g_exp == 3 ) { limits  1.5 6.8  5.3  9.3 } #GF: "standard" frame for paper
           if( $g_exp == 3 ) { limits  2.8 6.8  5.3  9.3 } #GF: "zoom" frame for paper
           if( $g_exp == 3 ) { limits  2.8 6.6  5.3  9.3 } #GF: "zoom" frame for paper
           if( $g_exp == 3 ) { limits  2.8 6.6  5.3  9.6 } #GF: "zoom" frame for paper, taller because of hld4b # 2015.05.20: THIS ONE!
          #if( $g_exp == 3 ) { limits  2.8 6.6  3.3  7.6 } #GF: "zoom" frame for paper, taller because of hld4b

          #if( $g_exp == 3 ) { limits  2.3 6.1  6.1 10.6 } #GF: playing
          #if( $g_exp == 3 ) { limits  2.3 6.6  5.3  9.6 } #GF: "zoom" frame for paper, taller because of hld4b
          #if( $g_exp == 3 ) { limits  2.3 6.6  3.3  7.6 } #GF: for 'hlh'
          #if( $g_exp == 3 ) { limits  2.3 6.6  6.3 10.6 } #GF: for 'hlk'
        }
        if( substr('$which_sim',0,3) == 'ext' ) { 
           if( $g_exp == 2 ) { limits -0.2 6.5 4.0 10.5 }
           if( $g_exp == 3 ) { limits -0.2 6.5 4.0 10.5 }
        }

        ticksize -1 10 -1 10
        notation -2 2 -2 2 
        if( substr('$which_sim',0,2) == 'hl' ) { 
           box 1 2 0 0 
        } else {
           box 1 2 4 0 
        }
        xlabel "\gamma    [electron energy in units of m_{e}c^2]"
        ylabel "\gamma^"$g_exp" N(\gamma)"

        #--------------------
        define check_how_many $( $flag_01_06 + $flag_16_06 + $flag_01_01 + $flag_16_01 )
        echo $check_how_many

        foreach 6 < "01_01" "01_06" "16_01" "16_06" > { 
           echo "   flag for "$6" : "$flag_$6
           if( $flag_$6 > 0 ) {
              if( $flag_$6 == 1 ) { 
                 define eltype (0) 
                 define dt     (0)
              }
              if( $flag_$6 == 2 ) { 
                 define eltype (2) 
                 define dt     $t_delay
              }
              if( $check_how_many <= 2 ) { define eltype (-1) } 
              set timesvec1 = timesvec - $dt
              SUB_plot_electron_spectra $6 timesvec1 $eltype
              ##if( $flag_$6 == 1 ) { define eltype 0 } 
              ##if( $flag_$6 == 2 ) { define eltype 2 } 
              ##SUB_plot_electron_spectra $6 timesvec $eltype
              ##ltype 0 
           }
        }

        ctype 2 
        ltype 0 
        lweight 3 

        #-------------------------------------------------
        # Times legend
        #-------------------------------------------------
        expand 1.2
        expand 1.0

        define dgy $(1000*$expand)
        if( $g_exp == 1 ) { 
           define tlabels_gx0 $($gx1+1600)
           define tlabels_gy0 $($gy1+1000)
           define tlabels_sign (1)
        } 
        if( $g_exp == 2 ) { 
           define tlabels_gx0 $($gx1+1600)
           define tlabels_gy0 $($gy1+1000)
           define tlabels_sign (1)
        } 
        if( $g_exp == 3 ) { 
           define tlabels_gx0 $($gx1+900)
           define tlabels_gy0 $($gy2-1000-0.5*$dgy)
           define tlabels_sign (0)
        } 
        #echo $expand

        define leg_str "ks"
        if( $t_delay != 0 ) {
           define leg_str "ks *"
        }
        define ntimes $(dimen(timesvec)) 
        define flag_legend (1)
        if( $flag_legend ) {
           do 9=0,dimen(timesvec)-1 { 
              ctype $(electrons_colors[$9]) 
              define this_t $(timesvec[$9])

              #  $(sprintf('%7.2f',$(elec_tm_obs[$8]/1e3+0.0001)))
	      #  $(sprintf('%7.2f',$(elec_t1_obs[$8]/1e3+0.0001)))
	      #  $(sprintf('%7.2f',$(elec_t2_obs[$8]/1e3+0.0001)))

              relocate ( $tlabels_gx0 $($tlabels_gy0 + ($tlabels_sign*$ntimes - $9)*$dgy) ) 
              putlabel 6 "T ="$(sprintf('%5.1f',$($this_t*1.0001+0.00001)))" "$leg_str
             #putlabel 6 "T="$(sprintf('%5.1f',$($this_t*1.0001+0.00001)))" ("$(sprintf('%5.1f',$(elec_tm_obs[timesindexvec[$9]]/1e3+0.0001)))") "$leg_str
             #putlabel 6 "T="$(sprintf('%5.1f',$($this_t*1.0001+0.00001)))" ("$(sprintf('%5.1f',$(elec_tm_obs[timesindexvec[$9]]/1e3+0.0001)))")"
           }
           expand 1.5
        }

        ctype 0
        expand 1.5
        lweight 3 
        #------------------------------------------------------------

        realgsave -q
        if( substr('$which_sim',0,2) == 'hl' ) { 
           SUB_plot_alternate_axis
        } else {
           box 4 4 0 4 
        }
        realgrestore

        #------------------------------------------------------------

        echo "+--------------------------------------------------------"
        echo "|                          -- Z --  -- R --"
        echo "| Y/N flag for zone 01,01 (top    , core    ) : "$flag_01_01
        echo "| Y/N flag for zone 01,06 (top    , 2/3 out ) : "$flag_01_06
        echo "| Y/N flag for zone 16,01 (middle , core    ) : "$flag_16_01
        echo "| Y/N flag for zone 16,06 (middle , 2/3 out ) : "$flag_16_06
        echo "+--------------------------------------------------------"
        echo "| Time (ks) and colors "
        print '   %5.1f  %3.0f  %-s\n'  < timesvec timesindexvec electrons_colors > 
        echo "+--------------------------------------------"


# mark_special_energies
##              + also finds the peak of the latest g3N 
##                and of the latest plotted Qe (from plot_Qe)
mark_special_energies

        gamma_estimates

	#echo " check $which_sim : "$which_sim
	#echo $(strlen('$which_sim')) 
        #if( substr('$which_sim',0,4) == 'hlc1'  ) { define i  (1) } 
        #if( substr('$which_sim',0,4) == 'hlc5'  ) { define i  (3) } 
        if( substr('$which_sim',0,4) == 'hlc1'  ) { 
	   define i  (1) 
           if( substr('$which_sim',0,5) == 'hlc1b' ) { define i  (3) }   #GF: 2014.01.22
	}
        if( substr('$which_sim',0,4) == 'hlc2'  ) { define i  (2) } 
        if( substr('$which_sim',0,4) == 'hld1'  ) { 
	   define i  (4) 
           if( substr('$which_sim',0,5) == 'hld1b' ) { define i  (5) }   #GF: UPDATE
	}
        if( substr('$which_sim',0,4) == 'hld2'  ) { define i  (6) } 
        if( substr('$which_sim',0,4) == 'hld3'  ) { define i  (7) } 
        #if( substr('$which_sim',0,4) == 'hld4'  ) { define i  (8) } 
        #if( substr('$which_sim',0,4) == 'hld5'  ) { define i  (9) } 
        if( substr('$which_sim',0,4) == 'hld4'  ) { 
	   define i  (8) 
           if( substr('$which_sim',0,5) == 'hld4b' ) { define i  (9) }   #GF: 2014.01.22
	}
        if( substr('$which_sim',0,4) == 'hle1'  ) { define i (10) } 
        if( substr('$which_sim',0,4) == 'hlf1'  ) { define i (11) } 
        if( substr('$which_sim',0,4) == 'hlg1'  ) { define i (12) }
        if( substr('$which_sim',0,4) == 'hlh1'  ) { define i (13) } 
        if( substr('$which_sim',0,4) == 'hli1'  ) { define i (14) } 
        if( substr('$which_sim',0,4) == 'hlj1'  ) { define i (15) } 
        if( substr('$which_sim',0,4) == 'hlh2'  ) { define i (16) } 
        if( substr('$which_sim',0,4) == 'hli2'  ) { define i (17) } 
        if( substr('$which_sim',0,4) == 'hlj2'  ) { define i (18) } 

	define gamma_inj_cut $(inj_gmax[$i-1])
	define gamma_eq      $(g_acc_cool[$i-1])
	define gamma_esc     $(g_esc_cool[$i-1]) 
	define gamma_cut     $(g3N_cutoff[$i-1]) 
	
	echo "+----------------------------------------"
	echo "| g_inj_max  = "$(sprintf('%9.3e',$(1.0000001*$gamma_inj_cut + 1.0e-5)))
	echo "| g3N_cutoff = "$(sprintf('%9.3e',$(1.0000001*$gamma_cut     + 1.0e-5)))
	echo "| "
	echo "| g_acc_cool = "$(sprintf('%9.3e',$(1.0000001*$gamma_eq      + 1.0e-5)))
	echo "| g_esc_cool = "$(sprintf('%9.3e',$(1.0000001*$gamma_esc     + 1.0e-5)))
	echo "+----------------------------------------"

	define yy  (5.5) 
	define yy  ($fy1 + 0.05*($fy2-$fy1))
	define dyy (       0.25*($fy2-$fy1))
	define dxx (       0.25*($fx2-$fx1))

	#---------------------------------------
	# last spectrum (steady state spectrum)
	#---------------------------------------
        set tmpx = fitx	
        set tmpy = fity	
	sort < tmpy tmpx > 
	define peakx_g3N $(tmpx[dimen(tmpx)-1])
	define peaky_g3N $(tmpy[dimen(tmpx)-1])
	
	ltype 1 
	lweight 3
	ctype green4 
	relocate $peakx_g3N          $peaky_g3N
	draw     $peakx_g3N        $($yy + 1.25*$dyy)
	draw     $(lg($gamma_cut)) $($yy + 1.0*$dyy)
	draw     $(lg($gamma_cut))   $yy
	#ltype 0 
	#lweight 5
	#draw     $(lg($gamma_cut)) $($yy + 0.5*$dyy)

	# arrow-shaped end
	ltype 0 
	lweight 5
	relocate $(lg($gamma_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_cut)) $($yy + 1.0*$dyy)
	relocate $(lg($gamma_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_cut) + 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)
	relocate $(lg($gamma_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_cut) - 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)

	ctype 2 

	#---------------------------------------
	# injected spectrum
	#---------------------------------------
        set tmpx = qinj_x
        set tmpy = qinj_y
	sort < tmpy tmpx > 
	define peakx_g3Qe $(tmpx[dimen(tmpx)-1])
	define peaky_g3Qe $(tmpy[dimen(tmpx)-1])
	
	ltype 1 
	lweight 3
	ctype 2 
	relocate $peakx_g3Qe             $peaky_g3Qe
	draw     $peakx_g3Qe           $($yy + 1.25*$dyy)
	draw     $(lg($gamma_inj_cut)) $($yy + 1.0*$dyy)
	draw     $(lg($gamma_inj_cut))   $yy
	#ltype 0 
	#lweight 5
	#draw     $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)

	# arrow-shaped end
	ltype 0 
	lweight 5
	relocate $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_inj_cut)) $($yy + 1.0*$dyy)
	relocate $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_inj_cut) + 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)
	relocate $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_inj_cut) - 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)

	ctype 2 

	echo "+----------------------------------------"
	echo "| g3p of last g3N = "$(sprintf('%5.3f',$peakx_g3N))
	echo "| g3p of last Qe  = "$(sprintf('%5.3f',$peakx_g3Qe))
	echo "+----------------------------------------"

	#---------------------------------------
	# \gamma_eq and \gamma_esc
	#---------------------------------------
	define yytop $($yy + 0.45*$dyy)

	ltype 0
	lweight 5
	ctype 7
	relocate $(lg($gamma_eq))  $yytop
	ctype magenta3
	draw     $(lg($gamma_eq))  $yy
	ctype blue2
	relocate $(lg($gamma_esc)) $yytop
	draw     $(lg($gamma_esc)) $yy

	ltype 0
	ctype 2 
	lweight 3

# mark_special_energies_v2
##              + also finds the peak of the latest g3N 
##                and of the latest plotted Qe (from plot_Qe)
mark_special_energies_v2

        gamma_estimates

	echo " check $which_sim : "$which_sim
	echo " check its strlen : "$(strlen('$which_sim')) 

        #if( substr('$which_sim',0,4) == 'hlc1'  ) { define i  (1) } 
        #if( substr('$which_sim',0,4) == 'hlc5'  ) { define i  (3) } 
        if( substr('$which_sim',0,4) == 'hlc1'  ) { 
	   define i  (1) 
	   if( $(strlen('$which_sim')) >= 5 ) {
              if( substr('$which_sim',0,5) == 'hlc1b' ) { define i  (2) }   #GF: 2014.01.22
	   }
	}
        if( substr('$which_sim',0,4) == 'hlc2'  ) { define i  (3) } 
        if( substr('$which_sim',0,4) == 'hld1'  ) { 
	   define i  (4) 
	   if( $(strlen('$which_sim')) >= 5 ) {
              if( substr('$which_sim',0,5) == 'hld1b' ) { define i  (5) }   #GF: UPDATE
	   }
	}
        if( substr('$which_sim',0,4) == 'hld2'  ) { define i  (6) } 
        if( substr('$which_sim',0,4) == 'hld3'  ) { define i  (7) } 
        #if( substr('$which_sim',0,4) == 'hld4'  ) { define i  (8) } 
        #if( substr('$which_sim',0,4) == 'hld5'  ) { define i  (9) } 
        if( substr('$which_sim',0,4) == 'hld4'  ) { 
	   define i  (8) 
	   if( $(strlen('$which_sim')) >= 5 ) {
              if( substr('$which_sim',0,5) == 'hld4b' ) { define i  (9) }   #GF: UPDATE
	   }
	}
        if( substr('$which_sim',0,4) == 'hle1'  ) { define i (10) } 
        if( substr('$which_sim',0,4) == 'hlf1'  ) { define i (11) } 
        if( substr('$which_sim',0,4) == 'hlg1'  ) { define i (12) } 
        if( substr('$which_sim',0,4) == 'hlh1'  ) { define i (13) } 
        if( substr('$which_sim',0,4) == 'hli1'  ) { define i (14) } 
        if( substr('$which_sim',0,4) == 'hlj1'  ) { define i (15) } 
        if( substr('$which_sim',0,4) == 'hlh2'  ) { define i (16) } 
        if( substr('$which_sim',0,4) == 'hli2'  ) { define i (17) } 
        if( substr('$which_sim',0,4) == 'hlj2'  ) { define i (18) } 

	define gamma_inj_cut $(inj_gmax[$i-1])
	define gamma_eq      $(g_acc_cool[$i-1])
	define gamma_esc     $(g_esc_cool[$i-1]) 
	define gamma_cut     $(g3N_cutoff[$i-1]) 
	
	echo "+----------------------------------------"
	echo "| g_inj_max  = "$(sprintf('%9.3e',$(1.0000001*$gamma_inj_cut + 1.0e-5)))
	echo "| g3N_cutoff = "$(sprintf('%9.3e',$(1.0000001*$gamma_cut     + 1.0e-5)))
	#echo "| "
	#echo "| g_acc_cool = "$(sprintf('%9.3e',$(1.0000001*$gamma_eq      + 1.0e-5)))
	#echo "| g_esc_cool = "$(sprintf('%9.3e',$(1.0000001*$gamma_esc     + 1.0e-5)))
	echo "+----------------------------------------"

	#GF: HACK
	set gamma_eq_vec  = < $(g_acc_cool_1[$i-1]) $(g_acc_cool_2[$i-1]) $(g_acc_cool_3[$i-1]) $(g_acc_cool_4[$i-1]) >
	set gamma_esc_vec = < $(g_esc_cool_1[$i-1]) $(g_esc_cool_2[$i-1]) $(g_esc_cool_3[$i-1]) $(g_esc_cool_4[$i-1]) >
	vecminmax gamma_eq_vec  eq1  eq2 
	vecminmax gamma_esc_vec esc1 esc2 

	set gamma_eq_vec  = 1.0000001*gamma_eq_vec  + 1.0e-5
	set gamma_esc_vec = 1.0000001*gamma_esc_vec + 1.0e-5
	set lg_gamma_eq_vec  = lg(gamma_eq_vec)
	set lg_gamma_esc_vec = lg(gamma_esc_vec)

        define print_noheader 1
        write standard "#   acc-cool   esc-cool      acc-cool esc-cool"
	print '   %9.3e  %9.3e      %7.3f  %7.3f\n'  < gamma_eq_vec gamma_esc_vec lg_gamma_eq_vec lg_gamma_esc_vec >
        define print_noheader 0
	echo " eq.  (min,max) : "$(lg($eq1)) $(lg($eq2))
	echo " esc. (min,max) : "$(lg($esc1)) $(lg($esc2))

	define gamma_eq  (sqrt($eq1*$eq2))
	define gamma_esc (sqrt($esc1*$esc2))

	define yy  (5.5) 
	define yy  ($fy1 + 0.05*($fy2-$fy1))
	define dyy (       0.25*($fy2-$fy1))
	define dxx (       0.25*($fx2-$fx1))

	#---------------------------------------
	# last spectrum (steady state spectrum)
	#---------------------------------------
        set tmpx = fitx	
        set tmpy = fity	
	sort < tmpy tmpx > 
	define peakx_g3N $(tmpx[dimen(tmpx)-1])
	define peaky_g3N $(tmpy[dimen(tmpx)-1])
	
	ltype 1 
	lweight 3
	ctype green4 
	relocate $peakx_g3N          $peaky_g3N
	draw     $peakx_g3N        $($yy + 1.25*$dyy)
	draw     $(lg($gamma_cut)) $($yy + 1.0*$dyy)
	#draw     $(lg($gamma_cut))   $yy
	#ltype 0 
	#lweight 5
	#draw     $(lg($gamma_cut)) $($yy + 0.5*$dyy)

	# arrow-shaped end
	ltype 0 
	lweight 5
	relocate $(lg($gamma_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_cut)) $($yy + 1.0*$dyy)
	relocate $(lg($gamma_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_cut) + 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)
	relocate $(lg($gamma_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_cut) - 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)

	ctype 2 

	#---------------------------------------
	# injected spectrum
	#---------------------------------------
        set tmpx = qinj_x
        set tmpy = qinj_y
	sort < tmpy tmpx > 
	define peakx_g3Qe $(tmpx[dimen(tmpx)-1])
	define peaky_g3Qe $(tmpy[dimen(tmpx)-1])
	
	ltype 1 
	lweight 3
	ctype 2 
	relocate $peakx_g3Qe             $peaky_g3Qe
	draw     $peakx_g3Qe           $($yy + 1.25*$dyy)
	draw     $(lg($gamma_inj_cut)) $($yy + 1.0*$dyy)
	#draw     $(lg($gamma_inj_cut))   $yy
	#ltype 0 
	#lweight 5
	#draw     $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)

	# arrow-shaped end
	ltype 0 
	lweight 5
	relocate $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_inj_cut)) $($yy + 1.0*$dyy)
	relocate $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_inj_cut) + 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)
	relocate $(lg($gamma_inj_cut)) $($yy + 0.5*$dyy)
	draw     $(lg($gamma_inj_cut) - 0.06*$dxx) $($yy + 0.5*$dyy + 0.1*$dyy)

	ctype 2 

	echo "+----------------------------------------"
	echo "| g3p of last g3N = "$(sprintf('%5.3f',$peakx_g3N))
	echo "| g3p of last Qe  = "$(sprintf('%5.3f',$peakx_g3Qe))
	echo "+----------------------------------------"

	#---------------------------------------
	# \gamma_eq and \gamma_esc
	#---------------------------------------
	define yytop $($yy + 0.45*$dyy)
	set shade_eq_x  = < $(lg($eq1))  $(lg($eq1))  $(lg($eq2))  $(lg($eq2))  $(lg($eq1))  >
	set shade_esc_x = < $(lg($esc1)) $(lg($esc1)) $(lg($esc2)) $(lg($esc2)) $(lg($esc1)) >
	set shade_y     = < $yy $yytop $yytop $yy $yy >

	lweight 3 
	angle 45
	ctype orchid
	shade 50 shade_eq_x  shade_y
	ctype royalblue2
	shade 50 shade_esc_x shade_y
	ctype 2
	angle 0

	ltype 0
	lweight 4
	ctype magenta3
	relocate $(lg($eq1))  $yytop
	draw     $(lg($eq1))  $yy
	relocate $(lg($eq2))  $yytop
	draw     $(lg($eq2))  $yy
	ctype blue2
	relocate $(lg($esc1)) $yytop
	draw     $(lg($esc1)) $yy
	relocate $(lg($esc2)) $yytop
	draw     $(lg($esc2)) $yy
	#relocate $(lg($gamma_eq))  $($yy + 0.5*$dyy)
	#draw     $(lg($gamma_eq))    $yy
	#relocate $(lg($gamma_esc)) $($yy + 0.5*$dyy)
	#draw     $(lg($gamma_esc))   $yy

	ltype 0
	ctype 2 
	lweight 3

## get_x_range : uses fitx and fity
get_x_range 

	define drop ? < What factor below the max (e.g. 10) : >

	vecminmax fity a b 
	set yr = fity - $b
	set xx = fitx  if( yr >= $(1.1*lg(1./$drop)) )
	set yy = yr    if( yr >= $(1.1*lg(1./$drop)) )

	echo " Size of filtered array : "$(dimen(xx))

	set xx2 = xx   if( yy <= $(0.9*lg(1./$drop)) )
	set yy2 = yy   if( yy <= $(0.9*lg(1./$drop)) )

	print < xx2 yy2 >

	set x1 = fitx  if( yr >= $(1.1*lg(1./$drop)) )
	set y1 = fity  if( yr >= $(1.1*lg(1./$drop)) )
	set x2 = fitx  if( yr >= $(1.0*lg(1./$drop)) )
	set y2 = fity  if( yr >= $(1.0*lg(1./$drop)) )

	echo " log(drop) = "$(lg($drop)) 

## gamma_estimates
gamma_estimates

	data characteristics_electron_energies.dat
	#read < case 1.s BB 2 r_acc 3 r_esc 4 inj_gmax 5 inj_p 6 lg_chi 7 g3N_gp 8 g3N_p 9 supexp_alpha 10 g_ref 11 g3N_ref 12 > 
	#define which_cx ? <| Which superexp CX value [1|2] : >
	define which_cx (2)
	echo "| Which U/U estimate: "
	define which_uu ? <| 1=start, 2=end, 3=min, 4=max [1|2|3|4] : >

	read < case 1.s ZZ 2 BB 3 r_acc 4 r_esc 5 inj_gmax 6 inj_p 7 dLp1 8 dLp2 9 dLp3 10 dLp4 11 >
	if( $which_cx == 2 ) {
	   read < g3N_cx 12 g3N_p 13 g3N_f 14 g3N_cutoff 15 g3N_K 16 >
	} else {
	   read < g3N_cx 17 g3N_p 18 g3N_f 19 g3N_cutoff 20 g3N_K 21 >
	}

	set inj_g3N_gp = (3.0 - inj_p)*inj_gmax 

	foreach 9 < 1 2 3 4 > {
	   set chi$9 = 10.0**dLp$9
	   set one_over_one_plus_chi$9 = 1.0/(1.0 + chi$9)
	}

	define tcool_ref (7.738e8)
	foreach 9 < 1 2 3 4 > {
	   set g_acc_cool_$9 = $tcool_ref/BB**2.0/(1.0 + chi$9)/(r_acc*ZZ/3.0e10) 
	   set g_esc_cool_$9 = $tcool_ref/BB**2.0/(1.0 + chi$9)/(r_esc*ZZ/3.0e10) 
	}
	
	set g_acc_cool = g_acc_cool_$which_uu
	set g_esc_cool = g_esc_cool_$which_uu

	#set g3N_gp_exp    = g3N_cutoff* (3.0 - g3N_p)
	set g3N_gp_supexp = g3N_cutoff*((3.0 - g3N_p)/g3N_cx)**(1.0/g3N_f)

	set supexp_to_acc_cool = g3N_cutoff/g_acc_cool_$which_uu
	set supexp_to_esc_cool = g3N_cutoff/g_esc_cool_$which_uu

        define print_noheader 1
        write standard "#---------------------------------------------------------------------------------------------------------------"
        write standard "# "
       #write standard "#                           g3N fit @END (sup.exp.)         log(L/L)       theoretical           gmax_supexp"
        write standard "# case      inj_g3p         g3N fit @END (sup.exp.)         log(L/L)         g_theo            g3N_cut/g_theo "
        write standard "#                     ------------------------------------            ---------------------  -------------------"
        write standard "#                        p     g_cutoff      g3p      f                acc-cool   esc-cool    acc-cool esc-cool"

        write standard "#                              (= g_eq) "
        write standard "# "
	print '  %-6s  %9.2e   %6.3f  %9.2e  %9.2e  %5.3f   %7.3f   %9.2e  %9.2e   %7.3f  %7.3f\n' \
	     < case \
	       inj_g3N_gp \
	       g3N_p g3N_cutoff g3N_gp_supexp \
	       g3N_f \
	       dLp$which_uu \
	       g_acc_cool g_esc_cool \
	       supexp_to_acc_cool supexp_to_esc_cool > 

        write standard "#---------------------------------------------------------------------------------------------------------------"
        define print_noheader 0

SUB_electrons_slope 2 

           #define 9 $1"_"$2"_"$3
	   define xwin local
	   define xwin (10)

           foreach vec < x1 x2 y1 y2 dx dy > { set $vec local }
           set x1 = pop(-$xwin,$1)
           set x2 = pop($xwin,$1)
	   #print < $1 x1 x2 > 
           set y1 = pop(-$xwin,$2)
           set y2 = pop($xwin,$2)
           set dx = x2 - x1
           set dy = y2 - y1
           set p3 = dy/dx
           #set pp = 3 - p3
           set pp = $g_exp - p3
        
           set _eref = < 1e3 3e3 1e4 3e4 >
           set _eref = < 1e2 3e2 1e3 3e3 6e3 1e4 3e4 1e5 >  # for KK
           set _eref = < 2e2 4e2 1e3 2e3 4e3 1e4 2e4 >  # for KK
           #set _eref = < 10 30 1e2 3e2 1e3 3e3 >  # for external
           set _lg_eref = lg(_eref)

           echo "--------------------------------------------------"
           echo "   dum_xr    dum_x    dum_y   dum_p3   dum_pp "
           foreach 9 _lg_eref {
              set dum_x  = x1
              set dum_y  = y1
              set dum_xr = abs(x1 - $9)
              set dum_p3 = p3
              set dum_pp = pp
              sort < dum_xr dum_x dum_y dum_p3 dum_pp >
              echo "   "$(sprintf('%6.4f',$($9*1.0001))) $(sprintf('%8.4f',$(dum_x[0]))) $(sprintf('%8.4f',$(dum_y[0]))) $(sprintf('%8.4f',$(dum_p3[0]*1.0001))) $(sprintf('%8.4f',$(dum_pp[0])))
           }
           echo "--------------------------------------------------"

## SUB_electrons_energy_content lg_gg lg_N
##         + returns variables : $lg_Ne_dens 
##                               $lg_Ee_dens 
##                               $lg_Ne      
##                               $lg_Ee      
SUB_electrons_energy_content 2

           define mec2  (8.187104e-7)

           #foreach vec < x1 x2 y1 y2 xx yy dx > { set $vec local }
          #set x1 = pop(-1,$1)
          #set x2 = pop(1,$1)
          #set y1 = pop(-1,$2)
          #set y2 = pop(1,$2)

           set x1 = $1
	   set dx = lg( (10.0**x1 - 1.0)*(1.1 - 1.0) )

           set y1 = $2

           set xx = x1
           set yy = y1

           set dNe_dens = yy + dx 
           set dEe_dens = lg($mec2) + xx + yy + dx 
           set dNe_dens = 10.0**dNe_dens
           set dEe_dens = 10.0**dEe_dens

           define lg_Ne_dens $(lg(sum(dNe_dens)))
           define lg_Ee_dens $(lg(sum(dEe_dens)))
           define lg_Ne      $($lg_volume_Z_slice + $lg_Ne_dens)
           define lg_Ee      $($lg_volume_Z_slice + $lg_Ee_dens)

           #echo " electron energy content : "$(sprintf('%9.3e',$(10.0**$lg_Ee_dens)))"   "$(sprintf('%8.4f',$($lg_Ee*1.0001)))"   "$(sprintf('%9.3e',$(10.0**$lg_Ee)))

## SUB_electrons_energy_content lg_gg lg_N
##         + returns variables : $lg_Ne_dens 
##                               $lg_Ee_dens 
##                               $lg_Ne      
##                               $lg_Ee      
SUB_electrons_energy_content_OLD 2

           define mec2  (8.187104e-7)

           foreach vec < x1 x2 y1 y2 xx yy dx > { set $vec local }
           set x1 = pop(-1,$1)
           set x2 = pop(1,$1)
           set y1 = pop(-1,$2)
           set y2 = pop(1,$2)

           set xx = 0.5*(x1 + x2)
           set yy = 0.5*(y1 + y2)
           set dx = lg(10.0**x2 - 10.0**x1)

           set dNe_dens = yy + dx 
           set dEe_dens = lg($mec2) + xx + yy + dx 
           set dNe_dens = 10.0**dNe_dens
           set dEe_dens = 10.0**dEe_dens

           define lg_Ne_dens $(lg(sum(dNe_dens)))
           define lg_Ee_dens $(lg(sum(dEe_dens)))
           define lg_Ne      $($lg_volume_Z_slice + $lg_Ne_dens)
           define lg_Ee      $($lg_volume_Z_slice + $lg_Ee_dens)

           #echo " electron energy content : "$(sprintf('%9.3e',$(10.0**$lg_Ee_dens)))"   "$(sprintf('%8.4f',$($lg_Ee*1.0001)))"   "$(sprintf('%9.3e',$(10.0**$lg_Ee)))

##--------------------------------------------------
SUB_plot_alternate_axis

        define save_expand local
        define save_expand $expand

        expand 1.2
        ctype slategray4

        #------------------------------------------------------------
        # Alternate axis with emitted photon energies in keV 
        #------------------------------------------------------------
        #OBSOLETE# systemcall  egrep B_field "$!XC_DATA/$!SIMDIR/main_parameters.dat" > /tmp/sm_read.tmp 
        #OBSOLETE# data "/tmp/sm_read.tmp"
        #OBSOLETE# define _B read 1 3

        define _d $Gamma

        define ekev1 (   0.01)
        define ekev2 (100.0)
        #GF TODO: add check for not exceeding the actual plot box
        #         and trim the ekev range if necessary

        define _fac $( lg(2.8e6*$Bfield*$_d/2.418e17) ) 
        define ex1 $( 0.5*(lg($ekev1) - $_fac) ) 
        define ex2 $( 0.5*(lg($ekev2) - $_fac) ) 

        define newgx1 $( int( ($gx2-$gx1)/($fx2-$fx1)*($ex1 - $fx1) + $gx1 ) )
        define newgx2 $( int( ($gx2-$gx1)/($fx2-$fx1)*($ex2 - $fx1) + $gx1 ) )

        location $newgx1 $newgx2 $gy1 $($gy2-3000)

        notation -1 2 -4 4 
        limits $(lg($ekev1)) $(lg($ekev2)) 0 1 
        box 4 4 1 4 
        notation -4 4 -4 4 

        relocate ( $(0.5*($gx1+$gx2)) $($gy2+1800) ) 
        putlabel 5 "E_{photons} [kev]"

        expand $save_expand
        ctype black

##-------------------------------------------------------------------------------
# plot_electrons_2boxes [<observed times in ks, up to 8 values>]
plot_electrons_2boxes 101

        reset_graph
        location 4000 30000 10000 23000 

        # calls 'set_read_sim_gf' within
        read_electrons_parameters 

        set_electrons_zones

        define t_delay ? < Delay to add to the SECOND set [ks] : > 
        define g_exp   ? <                g^2*N or g^3*N [2|3] : > 
        echo "------------------------------------------------------------"
        
        if( $?1 ) { 
           set timesvec = < $1 > 
        } else {
           define timesvar ? < Times (in ks) : > 
           set timesvec = < $timesvar > 
        }

        set electrons_colors = < 'blue3' 'deepskyblue' 'forestgreen' 'orange' 'red3' 'magenta2' 'grey60' 'black' >

        foreach 9 < "01_01" "01_06" "16_01" "16_06" > { 
           define 8 $flag_$9
           define sp$8 $9
        }
        
        #---------------------------------------------------------------------
        limits -0.5 5.5 4 8.5
        if( substr('$which_sim',0,2) == 'hl' ) { 
           if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
           if( $g_exp == 3 ) { limits  1.5 6.8 5.3 9.3 }
           if( $g_exp == 3 ) { limits  2.8 6.8 5.3 9.3 } #GF: "zoom" frame for paper
        }
        if( substr('$which_sim',0,3) == 'ext' ) { 
           if( $g_exp == 2 ) { limits -0.2 6.5 4.0 10.5 }
           if( $g_exp == 3 ) { limits -0.2 6.5 4.0 10.5 }
        }

        ticksize -1 10 -1 10
        notation -2 2 -2 2 
        window -2 1 1 1 
        box 1 2 0 0
        #xlabel "\gamma"
        ylabel "\gamma^"$g_exp" N(\gamma)"

        define dt1 (0)
        set timesvec1 = timesvec - $dt1
        define eltype 0
        SUB_plot_electron_spectra $sp1 timesvec1 $eltype
        set timesindexvec1 = timesindexvec

        #-------------------------------------------------
        # Times legend
        #-------------------------------------------------
        expand 1.2
        expand 0.75
        expand 1.0

        define dgy $(1000*$expand)
        if( $g_exp == 2 ) { 
           define tlabels_gx0 $($gx1+1600)
           define tlabels_gy0 $($gy1+1000)
           define tlabels_sign (1)
        } 
        if( $g_exp == 3 ) { 
           define tlabels_gx0 $($gx1+1200)
           define tlabels_gy0 $($gy2-1000-0.5*$dgy)
           define tlabels_sign (0)
        } 
        echo $expand

        define ntimes $(dimen(timesvec)) 
        define flag_legend (1)
        if( $flag_legend ) {
           do 9=0,dimen(timesvec)-1 { 
              ctype $(electrons_colors[$9]) 
              define this_t $(timesvec[$9])

              relocate ( $tlabels_gx0 $($tlabels_gy0 + ($tlabels_sign*$ntimes - $9)*$dgy) ) 
              putlabel 6 "T ="$(sprintf('%5.1f',$($this_t*1.0001+0.00001)))" ks"
           }
           expand 1.5
        }

        ctype 0
        expand 1.5
        lweight 3 
        #------------------------------------------------------------

        #------------------------------

        #------------------------------
        window -2 1 2 1 
        box 1 0 0 2

        define dt2 $t_delay
        set timesvec2 = timesvec - $dt2
        define eltype 0
        SUB_plot_electron_spectra $sp2 timesvec2 $eltype
        set timesindexvec2 = timesindexvec
        #------------------------------

        notation -4 4 -4 4 
        window 1 1 1 1 
        xlabel "\gamma    [electron energy in units of m_{e}c^2]"

        echo "+--------------------------------------------"
        echo "| Colors for time (ks) and indices "
        print '   %-15s   %5.1f    %3.0f    %5.1f    %3.0f\n'  < electrons_colors timesvec1 timesindexvec1 timesvec2 timesindexvec2 > 
        echo "+--------------------------------------------"

## SUB_plot_electron_spectra  <zone code>  <times VECTOR>  <ltype>
SUB_plot_electron_spectra 3

        echo " Entering SUB_plot_electron_spectra : "$1

        set tvec local
        set x_$1  local
        set y_$1  local
        set lx_$1 local
        set ly_$1 local

        set tvec = $2

        define nc (-1)
        set timesindexvec = timesvec*0 

        define last_tm  $(elec_tm_obs[dimen(elec_tm_obs)-1]/1e3) 
        foreach 9 tvec {
           define nc $($nc+1) 
           if( $9 <= $last_tm ) {
              define 8 $( int( ($9*1e3 - elec_tm_obs[$idx_t0])/$mean_dt + 0.5 ) + $idx_t0 )
              echo "  T = "$(sprintf('%7.2f',$($9*1.000001+1e-7)))" ks   ==>  i="$(sprintf('%3d',$8))"   "$(sprintf('%7.2f',$(elec_tm_obs[$8]/1e3+0.0001)))"   [ "$(sprintf('%7.2f',$(elec_t1_obs[$8]/1e3+0.0001)))" - "$(sprintf('%7.2f',$(elec_t2_obs[$8]/1e3+0.0001)))" ]"
              set timesindexvec[$nc] = $8
           } else {
              echo "  T = "$(sprintf('%7.2f',$($9*1.000001+1e-7)))" ks : INVALID BECAUSE LARGER THAN MAX. SIMULATED TIME"
              set timesindexvec[$nc] = -1
           }
        }

        define nc (-1)
        foreach 9 timesindexvec {
           if( $9 > 0 ) {

           define nc $($nc+1) 
           define 7 $(sprintf('%03d',$($9+1)))

           #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_$!(sprintf('%03d',$7)).dat"
          #verbose 0 
           #read < x_$1 1 y_$1 2 >
          #verbose 1

           #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_gamma.dat"
           data "$!XC_DATA/$!SIMDIR/electrons/fnt_gamma.dat"
           read < x_$1 1 >

	   define Ngamma (dimen(x_$1))
	   define n2read ($7)
           data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_all_spectra.dat"
	   lines $( ($n2read-1)*$Ngamma + 1 + 1 ) $( $n2read*$Ngamma + 1 ) 
           verbose 0
           read < y_$1 1 >
           verbose 1

           set lx_$1 = lg(x_$1+1)
           set ly_$1 = lg(y_$1) + $g_exp*lx_$1
           #set ly_$1 = lg(y_$1) + 3.0*lx_$1

           set ly1_$1 = lg(y_$1)

           #OPTIONAL# SUB_electrons_slope lx_$1 ly_$1
           SUB_electrons_slope lx_$1 ly_$1

           SUB_electrons_energy_content lx_$1 ly1_$1
           echo " electron energy content : "$(sprintf('%9.3e',$(10.0**$lg_Ee_dens)))"   "$(sprintf('%8.4f',$($lg_Ee*1.0001)))"   "$(sprintf('%9.3e',$(10.0**$lg_Ee)))

           if( $3 < 0 ) { 
              if( ( $nc % 2 ) == 0 ) {
                 ltype 0
              } else {
                 ltype 2
              }
           } else {
              ltype $3
           }
           ctype $(electrons_colors[$nc])
           lweight 4 
           connect lx_$1 ly_$1

           define 6 $which_sim
           set lx_$6_$1_$7 = lx_$1
           set ly_$6_$1_$7 = ly_$1
           delete x_$6_$1_$7
           delete y_$6_$1_$7
        }
        }

	set fitx = lx_$1
	set fity = ly_$1
	set fitw = 0*fitx + 0.1

	vecminmax fity dum fity_max
	set tmp_fity = fity   if( fity >= $($fity_max - lg(10.0)) )
	set tmp_fitx = fitx   if( fity >= $($fity_max - lg(10.0)) )
	echo " X-range : "$(tmp_fitx[0]) $(tmp_fitx[dimen(tmp_fitx)-1]) 
	# ONLY USEFUL WHEN FITTING
       #relocate $(tmp_fitx[0])                 $(tmp_fity[0]) 
       #draw     $(tmp_fitx[dimen(tmp_fitx)-1]) $(tmp_fity[dimen(tmp_fitx)-1]) 

        ctype 2 
        ltype 0
        lweight 3 

##-------------------------------------------------------------------------------
# plot_Qe  
##           : reads/plots from file the injected electron spectrum Q(\gamma)
plot_Qe 

        #data electrons_Q_pl_exp_cutoff.dat
        data "$!XC_DATA/$!SIMDIR/electrons/electrons_Q_pl_exp_cutoff.dat"
        read < lg_gg 1 lg_dQ 3 >

        #GF: these parameters should already be set by 'set_sim_read_gf'... but let's reread them for safety.
        data "$!XC_DATA/$!SIMDIR/electrons/electrons_Q_pl_exp_cutoff.dat"
        define zz read 6 3 
        define nz read 7 3 
        echo $zz $nz

        SUB_electrons_energy_content lg_gg lg_dQ
        echo " electron energy content : "$(sprintf('%9.3e',$(10.0**$lg_Ee_dens)))"   "$(sprintf('%8.4f',$($lg_Ee*1.0001)))"   "$(sprintf('%9.3e',$(10.0**$lg_Ee)))

        #define _dt (11.1e3)
        define _dt $($zz/$nz/3e10)

        set lg_g3Q = $g_exp*lg_gg + lg_dQ + lg($_dt)

	# injected spectrum
        set tmpx = lg_gg
        set tmpy = lg_g3Q
	sort < tmpy tmpx > 
	define peakx_g3Q $(tmpx[dimen(tmpx)-1])
	define peaky_g3Q $(tmpy[dimen(tmpx)-1])
	set tmpx = lg_gg   if( lg_g3Q >= $($peaky_g3Q-1.0) )
	define max_gg1 $( tmpx[dimen(tmpx)-1] )
	set tmpx = lg_gg   if( lg_g3Q >= $($peaky_g3Q-1.75) )
	define max_gg2 $( tmpx[dimen(tmpx)-1] )
	
        ctype 2 
        ltype 1 
        if( substr('$which_sim',0,3) == 'hla' ) { 
           lweight 3 
           connect lg_gg lg_g3Q
	} else {
           lweight 1 
           connect lg_gg lg_g3Q
           lweight 3 
           connect lg_gg lg_g3Q  if( lg_gg <= $max_gg2 )
           lweight 5 
           connect lg_gg lg_g3Q  if( lg_gg <= $max_gg1 )
           lweight 3 
	}

	#GF: This 'ref' stuff is not really used.
	#GF: It was used to make an added existing+injected electron distribution, 
	#GF: but it was not well coded and I subsequently commented out where it plots it.
        ##data "$!XC_DATA/$!SIMDIR/electrons/fnt_01_01_$!(sprintf('%03d',$idx_t0)).dat"
        #data "$!XC_DATA/$!SIMDIR/electrons/fnt_01_01_$!(sprintf('%03d',$($idx_t0+1))).dat"
        #read < xref 1 yref 2 >

        data "$!XC_DATA/$!SIMDIR/electrons/fnt_gamma.dat"
        read < xref 1 >
	define Ngamma (dimen(xref))
	define n2read ($idx_t0+1)
	echo " n2read = "$n2read"  , Ngamma = "$Ngamma
        data "$!XC_DATA/$!SIMDIR/electrons/fnt_01_01_all_spectra.dat"
	lines $( ($n2read-1)*$Ngamma + 1 + 1 ) $( $n2read*$Ngamma + 1 ) 
        verbose 0
        read < yref 1 >
        verbose 1

        set lg_xref = lg(xref+1)
        set lg_yref = lg(yref) + $g_exp*lg_xref

        interp_gf lg_gg lg_g3Q lg_xref lg_g3Q_interp
        set lg_g3Q_added = lg( 10.0**lg_yref + 10.0**lg_g3Q_interp )

        ctype 5 
        ltype 0 
        #connect lg_xref lg_g3Q_added
        ltype 0 
        ctype 2 

	set qinj_x = lg_gg
	set qinj_y = lg_g3Q

#-------------------------------------------------------------------------------
## compute_logpara
compute_logpara

	# WORKING HERE 
	define    p_test ? <           p : >
	define gmax_test ? < g_max [lin] : >
	define   x0_test ? < g_ref [log] : >
	define   k0_test ? <   K_0 [log] : >

	echo " " 
	echo " NOTE: assuming g_exp= "$g_exp
	echo " "

	set lx_test=1,7,0.01
	#set ly_test = 3.0*lx_test + ($k0_test-3.0*$x0_test) - $p_test*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax_test
	#set ly_test = $k0_test + (3.0 - $p_test)*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax_test
	set ly_test = $k0_test + ($g_exp - $p_test)*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax_test

## compute_pl_expcutoff 
compute_pl_expcutoff 

	define    p_test ? <           p : >
	define gmax_test ? < g_max [lin] : >
	define   x0_test ? < g_ref [log] : >
	define   k0_test ? <   K_0 [log] : >

	echo " " 
	echo " NOTE: assuming g_exp= "$g_exp
	echo " "

	set lx_test=1,7,0.01
	#set ly_test = 3.0*lx_test + ($k0_test-3.0*$x0_test) - $p_test*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax_test
	#set ly_test = $k0_test + (3.0 - $p_test)*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax_test
	set ly_test = $k0_test + ($g_exp - $p_test)*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax_test

## compute_pl_superexpcutoff 
compute_pl_superexpcutoff 

	define     p_test ? <           p : >
	define  gmax_test ? < g_max [lin] : >
	define alpha_test ? <       alpha : >
	define    x0_test ? < g_ref [log] : >
	define    k0_test ? <   K_0 [log] : >

	echo " " 
	echo " NOTE: assuming g_exp= "$g_exp
	echo " "

	set lx_test=1,7,0.01
	#set ly_test = $k0_test + (3.0 - $p_test)*(lx_test - $x0_test) - 0.43429*((10.0**lx_test)/$gmax_test)**$alpha_test
	set ly_test = $k0_test + ($g_exp - $p_test)*(lx_test - $x0_test) - 0.43429*((10.0**lx_test)/$gmax_test)**$alpha_test
	define cx (2.0)
	set ly_test = $k0_test + ($g_exp - $p_test)*(lx_test - $x0_test) - 0.43429*($cx/$alpha_test)*((10.0**lx_test)/$gmax_test)**$alpha_test

	#define gp_test $( ((3.0 - $p_test)/$alpha_test)**(1./$alpha_test)*$gmax_test )
	define gp_test $( (($g_exp - $p_test)/$alpha_test)**(1./$alpha_test)*$gmax_test )
	echo " gp_test = "$(sprintf('%10.4e',$gp_test))

## compute_pl_expcutoff2 
compute_pl_expcutoff2

	define     p_test ? <             p : >
	define gmax1_test ? < g_max_1 [lin] : >
	define gmax2_test ? < g_max_2 [lin] : >
	define    x0_test ? <   g_ref [log] : >
	define    k0_test ? <     K_0 [log] : >

	echo " " 
	echo " NOTE: assuming g_exp= "$g_exp
	echo " "

	set lx_test=1,7,0.01
	#set ly_test = 3.0*lx_test + ($k0_test-3.0*$x0_test) - $p_test*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax_test
	#set ly_test = $k0_test + (3.0 - $p_test)*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax1_test - 0.43429*(10.0**lx_test)/$gmax2_test
	set ly_test = $k0_test + ($g_exp - $p_test)*(lx_test - $x0_test) - 0.43429*(10.0**lx_test)/$gmax1_test - 0.43429*(10.0**lx_test)/$gmax2_test

## conversion_factor_for_supexp 
conversion_factor_for_supexp 

	define slope_p ?  < spectral slope p : >
	define g3p     ?  < gamma_peak (g3N) : >

	echo " " 
	echo " NOTE: assuming g_exp= "$g_exp
	echo " "

	set supexp_alpha = 1.0,3.5,0.25
	set conversion_factor = (supexp_alpha/($g_exp - $slope_p))**(1.0/supexp_alpha)
	set gmax = $g3p*conversion_factor

	print '   %6.3f   %8.4f   %11.4e\n' < supexp_alpha conversion_factor gmax > 

## gamma_max_parameters_check
gamma_max_parameters_check

	data gamma_max_analysis.dat
	read < case 1.s BB 2 r_acc 3 r_esc 4 inj_gmax 5 inj_p 6 lg_chi 7 g3N_gp 8 g3N_p 9 supexp_alpha 10 g_ref 11 g3N_ref 12 > 

	define tcool_ref (7.738e8)
	set g3N_gp = 10.0**g3N_gp

	set inj_g3N_gp = (3.0 - inj_p)*inj_gmax 

	set one_plus_chi = (1 + 10.0**lg_chi)
	#set tcool = $tcool_ref/BB/BB

	set g_acc_cool = ($tcool_ref/BB/BB)/one_plus_chi/(1e16/3e10*r_acc) 
	set g_esc_cool = ($tcool_ref/BB/BB)/one_plus_chi/(1e16/3e10*r_esc) 

	set g3N_gmax_exp    = g3N_gp/(3.0 - g3N_p)
	set g3N_gmax_supexp = g3N_gp*(supexp_alpha/(3.0 - g3N_p))**(1.0/supexp_alpha)
	set supexp_to_acc_cool = g3N_gmax_supexp/g_acc_cool
	set supexp_to_esc_cool = g3N_gmax_supexp/g_esc_cool
        define print_noheader 1
        write standard "# "
        write standard "#                           g3N @END                 theoretical                                            gmax_supexp"
        write standard "#                     --------------------    -------------------------     gmax        gmax     alpha  -------------------"
        write standard "# case      inj_gp        p         gp           acc-cool    esc-cool       exp.       sup.exp.          acc-cool esc-cool"
        write standard "# "
	print '  %-6s  %10.3e   %6.3f   %10.3e     %10.3e  %10.3e    %10.3e  %10.3e  %4.2f   %7.3f  %7.3f\n' \
	     < case  inj_g3N_gp g3N_p g3N_gp g_acc_cool g_esc_cool g3N_gmax_exp g3N_gmax_supexp supexp_alpha supexp_to_acc_cool supexp_to_esc_cool > 

        define print_noheader 0

## plot_kk_electrons
plot_kk_electrons

	data kk2006_f2_Ngamma.dat
	read < kk_lx 1 kk_ly 2 >
	set kk_ly = 3.0*kk_lx + kk_ly
	mysmooth kk_ly kk_ly_s 20 

	reset_graph
	limits 1.5 5.5 5.5 11.5
	ticksize -1 0 -1 0 
	box

	ctype red2
	connect kk_lx kk_ly_s
	ctype 2 

	SUB_electrons_slope kk_lx  kk_ly_s

        set _x = kk_lx
        set _y = kk_ly_s
        sort < _y _x >

        echo " peak of g3N at : "$(_x[dimen(_x)-1])"  (y = "$(_y[dimen(_y)-1])" )"

##-------------------------------------------------------------------------------
# sequence_of_electrons_2boxes_figs
#                       : it makes one PS file for EACH time step
#               [CHECK IF HARD-CODED PARAMETERS ARE STILL VALID FOR ALL c/d CASES]
sequence_of_electrons_2boxes_figs

        # calls 'set_read_sim_gf' within
        read_electrons_parameters 

        set_electrons_zones
        define t_delay ? <  Delay to add to the second set [ks]: > 
        define g_exp   ? <                g^2*N or g^3*N [2|3] : > 
        echo "------------------------------------------------------------"

        define mnemostring ? < string for file names [seq_elec_*] : > 

        foreach 8 < "01_01" "01_06" "16_01" "16_06" > { 
           define 7 $flag_$8
           define sp$7 $8
        }
           
        define dn $( int( ($t_delay*1e3)/$mean_dt + 0.5 ) )
        echo " index shift : "$dn

        if( substr('$which_sim',0,3) == 'ext' ) { define nframes (200) }
        if( substr('$which_sim',0,3) == 'hla' ) { define nframes (66) }
        if( substr('$which_sim',0,3) == 'hlc' ) { define nframes (90) }
        if( substr('$which_sim',0,3) == 'hld' ) { define nframes (90) }
        if( substr('$which_sim',0,3) == 'hlh' ) { define nframes (300) }

        define 8 $mnemostring
        define nc (0)

	if( $idx_t0 >= 4 ) {
	   define iseq1 ($idx_t0-4)
	} else {
	   define iseq1 $idx_t0
	}
        define iseq2 ($idx_t0+$nframes) 
        
        do 9=$iseq1,$iseq2 {

           define nc $($nc+1)
           device postencap seq_elec_$8_$(sprintf('%03d',$nc)).ps

           ##define n1 $9
           ##define n2 $($9-$dn)
           define n1 $($9+1)
           define n2 $($9+1-$dn)

           reset_graph
           location 4000 30000 10000 26000 
           
           notation -2 2 -2 2 
           #---------------------------------------------------------------------
           if( substr('$which_sim',0,2) == 'hl' ) { 
              if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
              if( $g_exp == 3 ) { limits  1.5 6.8 5.0 9.1 }
              if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
              if( $g_exp == 3 ) { limits  1.5 6.8 5.3 9.3 }
              if( $g_exp == 3 ) { limits  2.8 6.8 5.3 9.3 }
           }
           if( substr('$which_sim',0,3) == 'ext' ) { 
              if( $g_exp == 2 ) { limits -0.2 6.5 4.0 10.5 }
              if( $g_exp == 3 ) { limits -0.2 6.5 4.0 10.5 }
           }

           ticksize -1 10 -1 10

           #------------------------------
           window -2 1 1 1 
           box 1 2 0 0
           ylabel "\gamma^"$g_exp" N(\gamma)"
           
           #plot_one_elec $sp1 $($n1-1) "gray30" 4 
           plot_one_elec $sp1 $n1 "red2" 4 
           define strT $(sprintf('%5.1f',$(elec_tm_obs[$9-1]/1.e3)))
           relocate ( $($gx1+1000) $($gy2-1500) ) 
           putlabel 6 "T = "$strT" ks"
           #------------------------------
           
           #------------------------------
           window -2 1 2 1 
           box 1 0 0 2
           
           plot_one_elec $sp2 $n2 "orange" 4 
           #------------------------------
           
           notation -4 4 -4 4 
           window 1 1 1 1 
           xlabel "\gamma    [electron energy in units of m_{e}c^2]"

        }
        device x11

# sequence_of_electrons_2boxes
#               [CHECK IF HARD-CODED PARAMETERS ARE STILL VALID FOR ALL c/d CASES]
sequence_of_electrons_2boxes

        # calls 'set_read_sim_gf' within
        read_electrons_parameters 

        set_electrons_zones
        define t_delay ? <  Delay to add to the second set [ks]: > 
        define g_exp   ? <                g^2*N or g^3*N [2|3] : > 
        echo "------------------------------------------------------------"

        foreach 8 < "01_01" "01_06" "16_01" "16_06" > { 
           define 7 $flag_$8
           define sp$7 $8
        }
           
        define dn $( int( ($t_delay*1e3)/$mean_dt + 0.5 ) )
        echo " index shift : "$dn

        if( substr('$which_sim',0,3) == 'ext' ) { define nframes (200) }
        if( substr('$which_sim',0,3) == 'hla' ) { define nframes (66) }
        if( substr('$which_sim',0,3) == 'hlc' ) { define nframes (90) }
        if( substr('$which_sim',0,3) == 'hld' ) { define nframes (90) }
        if( substr('$which_sim',0,3) == 'hlh' ) { define nframes (300) }

        ##define 8 $mnemostring
        define nc (0)
        
        #---------------------------------------------------------------------
        reset_graph
        location 4000 30000 10000 26000 
        notation -2 2 -2 2 
        ticksize -1 10 -1 10
        if( substr('$which_sim',0,2) == 'hl' ) { 
           if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
           if( $g_exp == 3 ) { limits  1.5 6.8 5.0 9.1 }
           if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
           if( $g_exp == 3 ) { limits  1.5 6.8 5.3 9.3 }
           if( $g_exp == 3 ) { limits  2.8 6.8 5.3 9.3 }
        }
        if( substr('$which_sim',0,3) == 'ext' ) { 
           if( $g_exp == 2 ) { limits -0.2 6.5 4.0 10.5 }
           if( $g_exp == 3 ) { limits -0.2 6.5 4.0 10.5 }
        }
        window 1 1 1 1 
        xlabel "\gamma    [electron energy in units of m_{e}c^2]"

        #------------------------------
        window -2 1 1 1 
        box 1 2 0 0
        ylabel "\gamma^"$g_exp" N(\gamma)"
        
        window -2 1 2 1 
        box 1 0 0 2
        #------------------------------    

	if( $idx_t0 >= 4 ) {
	   define iseq1 ($idx_t0-4)
	} else {
	   define iseq1 $idx_t0
	}
        define iseq2 ($idx_t0+$nframes) 
        
        #do 9=$($idx_t0-4),$($idx_t0+$nframes) 
	define go (1)
        do 9=$iseq1,$iseq2 {

           define nc $($nc+1)

	   define go ? < go [0|1] : >
	   page
	   if( $go == 0 || substr('$go',0,1) == 'q' ) { 
	      ctype 2 
	      return 
	   } 

           define n1 $($9+1)
           define n2 $($9+1-$dn)
           
           #------------------------------
           window -2 1 1 1 
           box 1 2 0 0
           
           relocate ( $($gx1+1000) $($gy2-1500) ) 
	   lweight 5
	   ctype "white"
           putlabel 6 "T="$prev_strT" ks"

           if( $nc > 2 ) { plot_one_elec $sp1 $($n1-2) "white" 5 }
           if( $nc > 1 ) { plot_one_elec $sp1 $($n1-1) "grey60" 4 }

           plot_one_elec $sp1 $n1 "red2" 4 
           define strT $(sprintf('%5.2f',$(elec_tm_obs[$9-1]/1.e3)))
           relocate ( $($gx1+1000) $($gy2-1500) ) 
	   lweight 3
	   ctype 2 
           putlabel 6 "T="$strT" ks"
	   define prev_strT $strT
           #------------------------------
           
           #------------------------------
           window -2 1 2 1 
           box 1 0 0 2
           
           if( $nc > 2 ) { plot_one_elec $sp2 $($n2-2) "white" 5 }
           if( $nc > 1 ) { plot_one_elec $sp2 $($n2-1) "grey60" 4 }
           plot_one_elec $sp2 $n2 "orange" 4 
           #------------------------------
           
        }

        notation -4 4 -4 4 
        #device x11

# sequence_of_electrons_1box  [< sim. code>]
#               [CHECK IF HARD-CODED PARAMETERS ARE STILL VALID FOR ALL c/d CASES]
sequence_of_electrons_1box 01

        # calls 'set_read_sim_gf' within
        if( $?1 ) { 
           read_electrons_parameters $1
        } else {
           read_electrons_parameters
        }

        set_electrons_zones
        define t_delay ? <  Delay to add to the second set [ks]: > 
        define g_exp   ? <                g^2*N or g^3*N [2|3] : > 
        echo "------------------------------------------------------------"

        foreach 8 < "01_01" "01_06" "16_01" "16_06" > { 
           define 7 $flag_$8
           define sp$7 $8
        }
           
        define dn $( int( ($t_delay*1e3)/$mean_dt + 0.5 ) )
        echo " index shift : "$dn

        if( substr('$which_sim',0,3) == 'ext' ) { define nframes (200) }
        if( substr('$which_sim',0,3) == 'hla' ) { define nframes (66) }
        if( substr('$which_sim',0,3) == 'hlc' ) { define nframes (90) }
        if( substr('$which_sim',0,3) == 'hld' ) { define nframes (90) }
        if( substr('$which_sim',0,3) == 'hlh' ) { define nframes (300) }

        ##define 8 $mnemostring
        define nc (0)
        
        #---------------------------------------------------------------------
        reset_graph
        location 4000 30000  3250 30000 # LCs

        notation -2 2 -2 2 
	window 1 1 1 1
        ticksize -1 10 -1 10

        if( substr('$which_sim',0,2) == 'hl' ) { 
           if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
           if( $g_exp == 3 ) { limits  1.5 6.8 5.0 9.1 }
           if( $g_exp == 2 ) { limits  1.5 6.8 1.0 4.2 }
           if( $g_exp == 3 ) { limits  1.5 6.8 5.3 9.3 }
           if( $g_exp == 3 ) { limits  2.8 6.8 5.3 9.3 }
        }
        if( substr('$which_sim',0,3) == 'ext' ) { 
           if( $g_exp == 2 ) { limits -0.2 6.5 4.0 10.5 }
           if( $g_exp == 3 ) { limits -0.2 6.5 4.0 10.5 }
        }
        if( substr('$which_sim',0,2) == 'hl' ) { 
           box 1 2 0 0 
        } else {
           box 1 2 4 0 
        }
        xlabel "\gamma    [electron energy in units of m_{e}c^2]"
        ylabel "\gamma^"$g_exp" N(\gamma)"

        realgsave -q
        if( substr('$which_sim',0,2) == 'hl' ) { 
           SUB_plot_alternate_axis
        } else {
           box 4 4 0 4 
        }
        realgrestore
        notation -2 2 -2 2 

        #------------------------------    
	if( $idx_t0 >= 4 ) {
	   define iseq1 ($idx_t0-4)
	} else {
	   define iseq1 $idx_t0
	}
        define iseq2 ($idx_t0+$nframes) 
        
        #do 9=$($idx_t0-4),$($idx_t0+$nframes) 
	define go (1)
        do 9=$iseq1,$iseq2 {

           define nc $($nc+1)

	   define go ? < go [0|1] : >
	   page
	   if( substr('$go',0,1) == 'q' ) { 
	      ctype 2 
	      return 
	   } 
	   if( $go == 0 ) { 
	      ctype 2 
	      return 
	   } 

           define n1 $($9+1)
           define n2 $($9+1-$dn)
           
           #------------------------------
           box 1 2 0 0
           
           relocate ( $($gx1+1000) $($gy2-1500) ) 
	   lweight 5
	   ctype "white"
           putlabel 6 "T="$prev_strT" ks"

           if( $nc > 2 ) { plot_one_elec $sp1 $($n1-2) "white" 5 }
           if( $nc > 1 ) { plot_one_elec $sp1 $($n1-1) "grey60" 4 }

           plot_one_elec $sp1 $n1 "red2" 4 
           define strT $(sprintf('%5.2f',$(elec_tm_obs[$9-1]/1.e3)))
           relocate ( $($gx1+1000) $($gy2-1500) ) 
	   lweight 3
	   ctype 2 
           putlabel 6 "T="$strT" ks"
	   define prev_strT $strT
           #------------------------------
           
        }

        notation -4 4 -4 4 
        #device x11

## plot_one_elec [code] [index] [color] [lweight]
plot_one_elec 4

        define 7 $(sprintf('%03d',$2))

        #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_$!(sprintf('%03d',$7)).dat"
        #read < x_$1 1 y_$1 2 >

        data "$!XC_DATA/$!SIMDIR/electrons/fnt_gamma.dat"
        read < x_$1 1 >

	define Ngamma (dimen(x_$1))
	define n2read ($7)
        data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_all_spectra.dat"
	lines $( ($n2read-1)*$Ngamma + 1 + 1 ) $( $n2read*$Ngamma + 1 ) 
        verbose 0
        read < y_$1 1 >
        verbose 1

        set lx_$1 = lg(x_$1+1)
        set ly_$1 = lg(y_$1) + $g_exp*lx_$1
        #set ly_$1 = lg(y_$1) + 3.0*lx_$1

        lweight $4
        ltype 0
        ctype $3
        connect lx_$1 ly_$1
        ctype 2 
        ltype 0
        lweight 3 

#-------------------------------------------------------------------------------
# plot_energy_content
#               + calls 'compute_sequence_of_electrons_energy_content'
plot_energy_content

        reset_graph
        location 6000 28000 3250 31000

        compute_sequence_of_electrons_energy_content
        # calls 'read_electrons_parameters' 
        #       |
        #       +----> calls 'set_read_sim_gf' within
	#
	# It defines these arrays: 
        #     enecont_n               n
        #     enecont_tm              t_obs
        #     enecont_lg_Ee_dens      lg(Ue)
        #     enecont_lg_Ee           Ee
        #     enecont_diff_Ee_40      delta(Ee) [1e40]
        #     enecont_lg_Le           abs(Le)
        #     enecont_shock_lg_Ee     Ee_shock (gain)
        #     enecont_pickup_lg_Ee    Ee_pickup (gain)
        #     enecont_lg_Eloss_sy     Ee_sync (loss)
        #     enecont_escape_lg_Ee    Ee_escape (loss)
        #     enecont_net_Ee_40       Net Ee [1e40]
	#
	# And:
        #     enecont_shock_lg_Ne_dens  ,  enecont_shock_lg_Ne   ,  enecont_shock_Ne_40
        #     enecont_shock_lg_Ee_dens  ,  enecont_shock_lg_Ee   ,  enecont_shock_Ee_40
        #     enecont_lg_Ne_dens        ,  enecont_lg_Ne 
        #     enecont_lg_Ee_dens        ,  enecont_lg_Ee         ,  enecont_Ee_40
        #                                  enecont_escape_lg_Ne  ,  enecont_escape_Ne_40 
        #                                  enecont_escape_lg_Ee  ,  enecont_escape_Ee_40 
	#
        #     enecont_diff_Ee_40
        #     enecont_lg_Le
        #     enecont_Le_40
        #     enecont_lg_Eloss_sy
        #     enecont_losses_lg_Ee = 40.0 : escape , Eloss_sy
        #     enecont_gains_lg_Ee  = 40.0 : shock_Ee , pickup_Ee 

        lweight 3 
        ctype 2 
        ltype 0 
        expand 1.5

        define tick_s   (   5)
        define tick_l   (  10)
        define tplotmin ( -36)
        define tplotmax (  40)
        define tplotmin (  -6)
        define tplotmax (  20)
       #define tplotmin (  -1)
       #define tplotmax (   3)
       #define tick_s   ( 0.2)
       #define tick_l   (   1)

	define one_or_many_panels ? < One or multiple panels [1|2] : >

        define lab_dx (4000)

	if( $one_or_many_panels == 1 ) {
           
           window 1 1 1 1 
           limits $tplotmin $tplotmax 44.8 45.2
           ticksize $tick_s $tick_l 0.05 0.15
           limits $tplotmin $tplotmax 41.2 45.2  # panel 4
           ticksize $tick_s $tick_l 0.1 0.5      # panel 4
           box 1 2 0 0 
           xlabel "Time [ks, obs. frame]"
           
           #-----------------------------------------------------------
           # electron spectrum actual energy content
           #-----------------------------------------------------------
           set lg_Ee_change = 40 + lg(abs(enecont_diff_Ee_40))
           ctype 5 
           histogram  (enecont_tm/1.0e3)  enecont_lg_Ee
           if( ($tplotmax - $tplotmin) < 15.0 ) { 
              points  (enecont_tm/1.0e3)  enecont_lg_Ee
           }
           ctype 6 
           histogram  (enecont_tm/1.0e3)  lg_Ee_change
           ctype 2 
           
           #-----------------------------------------------------------
           # gains (shock+pickup) and losses (cooling+escape)
           #-----------------------------------------------------------
           # ctype 3 
           # histogram    (enecont_tm/1.0e3)  enecont_losses_lg_Ee
           # ctype green4
           # histogram    (enecont_tm/1.0e3)  enecont_gains_lg_Ee
           # ctype 2 
           
           #-----------------------------------------------------------
           # losses (cooling and escape)
           #-----------------------------------------------------------
           ctype red
           histogram   (enecont_tm/1.0e3)  enecont_lg_Eloss_sy
           ctype 7
           histogram   (enecont_tm/1.0e3)  enecont_escape_lg_Ee
           if( ($tplotmax - $tplotmin) < 15.0 ) { 
              points   (enecont_tm/1.0e3)  enecont_lg_Eloss_sy
           }
           ctype 2 
           
           #-----------------------------------------------------------
           # gains (shock and pickup injection)
           #-----------------------------------------------------------
           ctype gray40
           histogram  (enecont_tm/1.0e3)  enecont_shock_lg_Ee
           ctype green2
           histogram  (enecont_tm/1.0e3)  enecont_pickup_lg_Ee
           if( ($tplotmax - $tplotmin) < 15.0 ) { 
              points  (enecont_tm/1.0e3)  enecont_shock_lg_Ee
           }
           ctype 2 

	} else {

           window 1 -4 1 1:4 
           limits $tplotmin $tplotmax 0 1
           ctype 7 
           ltype 1 
           relocate 0 0 
           draw 0 1 
           ctype 2 
           ltype 0
           
           #-----------------------------------------------------------
           # panel 1 : electron spectrum actual energy content
           #-----------------------------------------------------------
           window 1 -4 1 1 
           limits $tplotmin $tplotmax 44.8 45.2
           ticksize $tick_s $tick_l 0.05 0.15
           limits $tplotmin $tplotmax 43.2 45.2  # panel 4
           ticksize $tick_s $tick_l 0.1 0.5      # panel 4
           box 1 4 4 4 
           xlabel "Time [ks, obs. frame]"
           
           expand 1.25
           box 4 2 0 0 
           relocate ( $($gx1 - $lab_dx) $(0.5*($gy1+$gy2)) )
           angle 90 
           #putlabel 5 "E_{electrons}"
           putlabel 5 "\int E*N(E)"
           angle 0 
           expand 1.5
           
           set lg_Ee_change = 40 + lg(abs(enecont_diff_Ee_40))
           ctype 5 
           histogram  (enecont_tm/1.0e3)  enecont_lg_Ee
           if( ($tplotmax - $tplotmin) < 15.0 ) { 
              points  (enecont_tm/1.0e3)  enecont_lg_Ee
           }
           ctype 6 
           histogram  (enecont_tm/1.0e3)  lg_Ee_change
           ctype 2 
           
           #-----------------------------------------------------------
           # panel 2 : gains (shock+pickup) and losses (cooling+escape)
           #-----------------------------------------------------------
           window 1 -4 1 2 
           limits $tplotmin $tplotmax 39.5 44.5
           limits $tplotmin $tplotmax 43.1 45.5
           ticksize $tick_s $tick_l 0.25 1 
           limits $tplotmin $tplotmax 43.2 45.2  # panel 4
           ticksize $tick_s $tick_l 0.1 0.5      # panel 4
           
           expand 1.25
           box 0 2 0 0 
           angle 90 
           relocate ( $($gx1 - 1.1*$lab_dx) $(0.5*($gy1+$gy2)) ) ctype red    putlabel 5 "tot. losses"
           relocate ( $($gx1 - 0.8*$lab_dx) $(0.5*($gy1+$gy2)) ) ctype green4 putlabel 5 "tot. gains"
           angle 0 
           expand 1.5
           
           #ctype 3 
           #histogram (enecont_tm/1e3)  enecont_lg_diff_Ee  if( enecont_lin_diff_Ee_40 < 0 )
           #if( ($tplotmax - $tplotmin) < 15.0 ) { 
           #   points  (enecont_tm/1e3)  enecont_lg_diff_Ee  if( enecont_lin_diff_Ee_40 < 0 )
           #}
           ctype 3 
           histogram    (enecont_tm/1.0e3)  enecont_losses_lg_Ee
           ctype green4
           histogram    (enecont_tm/1.0e3)  enecont_gains_lg_Ee
           ctype 2 
           
           #-----------------------------------------------------------
           # panel 3 : losses (cooling and escape)
           #-----------------------------------------------------------
           window 1 -4 1 3 
           limits $tplotmin $tplotmax 43.9 45.1
           ticksize $tick_s $tick_l 0.05 0.25
           limits $tplotmin $tplotmax 43.2 45.2  # panel 4
           ticksize $tick_s $tick_l 0.1 0.5      # panel 4
           
           expand 1.25
           box 0 2 0 0 
           angle 90 
           relocate ( $($gx1 - 1.1*$lab_dx) $(0.5*($gy1+$gy2)) ) ctype red putlabel 5 "synchro"
           relocate ( $($gx1 - 0.8*$lab_dx) $(0.5*($gy1+$gy2)) ) ctype 7   putlabel 5 "escape"
           angle 0 
           ctype 2 
           expand 1.5
           
           ctype red
           histogram   (enecont_tm/1.0e3)  enecont_lg_Eloss_sy
           ctype 7
           histogram   (enecont_tm/1.0e3)  enecont_escape_lg_Ee
           if( ($tplotmax - $tplotmin) < 15.0 ) { 
              points   (enecont_tm/1.0e3)  enecont_lg_Eloss_sy
           }
           ctype 2 
           
           #-----------------------------------------------------------
           # panel 4 : gains (shock and pickup injection)
           #-----------------------------------------------------------
           window 1 -4 1 4 
           limits $tplotmin $tplotmax 43.2 45.2
           ticksize $tick_s $tick_l 0.1 0.5  
           
           expand 1.25
           box 0 2 0 0 
           angle 90 
           relocate ( $($gx1 - 1.1*$lab_dx) $(0.5*($gy1+$gy2)) ) ctype gray40 putlabel 5 "shock"
           relocate ( $($gx1 - 0.8*$lab_dx) $(0.5*($gy1+$gy2)) ) ctype green2 putlabel 5 "pickup"
           angle 0 
           ctype 2 
           expand 1.5
           
           ctype gray40
           histogram  (enecont_tm/1.0e3)  enecont_shock_lg_Ee
           ctype green2
           histogram  (enecont_tm/1.0e3)  enecont_pickup_lg_Ee
           if( ($tplotmax - $tplotmin) < 15.0 ) { 
              points  (enecont_tm/1.0e3)  enecont_shock_lg_Ee
           }
           ctype 2 
	}

        #----------------------------------------
        set tmp_all_tm       = enecont_tm                         
        set tmp_all_Ee       = 10.0**(enecont_lg_Ee - 40.0)       
        set tmp_all_diff_Ee  = enecont_diff_Ee_40                 
        set tmp_all_shock    = 10.0**(enecont_shock_lg_Ee  - 40.0)
        set tmp_all_pickup   = 10.0**(enecont_pickup_lg_Ee - 40.0)
        set tmp_all_Eloss_sy = 10.0**(enecont_lg_Eloss_sy  - 40.0)
        set tmp_all_escape   = 10.0**(enecont_escape_lg_Ee - 40.0)
	set tmp_all_TOTAL    = tmp_all_pickup + tmp_all_shock - (tmp_all_Eloss_sy + tmp_all_escape)
	#set tmp_all_TOTAL    = tmp_all_pickup + tmp_all_shock - (tmp_all_Eloss_sy + tmp_all_escape) - tmp_all_diff_Ee

        define print_noheader 1
        write standard "#                                    +                      +                      +" 
        write standard "#      tm         Ee      diff_Ee    |  shock      pickup   |  Eloss_sy    escape  |     NET "
        write standard "#                                    +----------------------+----------------------+ "
        print '   %9.2e  %9.2e  %9.2e    %9.2e  %9.2e    %9.2e  %9.2e    %9.2e\n'  \
	       < tmp_all_tm tmp_all_Ee tmp_all_diff_Ee tmp_all_shock tmp_all_pickup tmp_all_Eloss_sy tmp_all_escape tmp_all_TOTAL >
        define print_noheader 0

        #----------------------------------------
        set tmp_post_tm       = enecont_tm                            if( enecont_tm >= 0.0 && enecont_tm < 1.0e4 ) 
        set tmp_post_Ee       = 10.0**(enecont_lg_Ee - 40.0)          if( enecont_tm >= 0.0 && enecont_tm < 1.0e4 ) 
        set tmp_post_diff_Ee  = enecont_diff_Ee_40                    if( enecont_tm >= 0.0 && enecont_tm < 1.0e4 ) 
        set tmp_post_shock    = 10.0**(enecont_shock_lg_Ee  - 40.0)   if( enecont_tm >= 0.0 && enecont_tm < 1.0e4 ) 
        set tmp_post_pickup   = 10.0**(enecont_pickup_lg_Ee - 40.0)   if( enecont_tm >= 0.0 && enecont_tm < 1.0e4 ) 
        set tmp_post_Eloss_sy = 10.0**(enecont_lg_Eloss_sy  - 40.0)   if( enecont_tm >= 0.0 && enecont_tm < 1.0e4 ) 
        set tmp_post_escape   = 10.0**(enecont_escape_lg_Ee - 40.0)   if( enecont_tm >= 0.0 && enecont_tm < 1.0e4 ) 
	set tmp_post_TOTAL    = tmp_post_pickup + tmp_post_shock - (tmp_post_Eloss_sy + tmp_post_escape)
	#set tmp_post_TOTAL    = tmp_post_pickup + tmp_post_shock - (tmp_post_Eloss_sy + tmp_post_escape) - tmp_post_diff_Ee

        set tmp_post_fractional_loss = tmp_post_diff_Ee/tmp_post_Ee
        set tmp_post_cumul_diff_Ee   = cumulate(tmp_post_diff_Ee)
        set tmp_post_cumul_shock     = cumulate(tmp_post_shock)
        set tmp_post_cumul_pickup    = cumulate(tmp_post_pickup)
        set tmp_post_cumul_Eloss_sy  = cumulate(tmp_post_Eloss_sy)
        set tmp_post_cumul_escape    = cumulate(tmp_post_escape)
        set tmp_post_cumul_TOTAL     = cumulate(tmp_post_TOTAL)

        define lastidx $(dimen(tmp_post_tm)-1)
        echo "+---------------------------------------"
        echo "| POST INJECTION "
        echo "| sum(diff_Ee)  = "$(sprintf('%9.2e',$(tmp_post_cumul_diff_Ee[$lastidx]*1e40)))
        echo "| "
        echo "| sum(shock)    = "$(sprintf('%9.2e',$(tmp_post_cumul_shock[$lastidx]*1e40)))
        echo "| sum(pickup)   = "$(sprintf('%9.2e',$(tmp_post_cumul_pickup[$lastidx]*1e40)))
        echo "| "
        echo "| sum(Eloss_sy) = "$(sprintf('%9.2e',$(tmp_post_cumul_Eloss_sy[$lastidx]*1e40)))
        echo "| sum(escape)   = "$(sprintf('%9.2e',$(tmp_post_cumul_escape[$lastidx]*1e40)))
        echo "| "
        echo "| sum(NET_TOTAL)= "$(sprintf('%9.2e',$(tmp_post_cumul_TOTAL[$lastidx]*1e40)))

        #----------------------------------------
        set tmp_pre_tm        = enecont_tm                             if( enecont_tm >= -1.0e4 && enecont_tm < 0.0 && enecont_diff_Ee_40 < 0.0 )
        set tmp_pre_Ee        = 10.0**(enecont_lg_Ee - 40.0)           if( enecont_tm >= -1.0e4 && enecont_tm < 0.0 && enecont_diff_Ee_40 < 0.0 )
        set tmp_pre_diff_Ee   = enecont_diff_Ee_40                     if( enecont_tm >= -1.0e4 && enecont_tm < 0.0 && enecont_diff_Ee_40 < 0.0 )
        set tmp_pre_shock     = 10.0**(enecont_shock_lg_Ee  - 40.0)    if( enecont_tm >= -1.0e4 && enecont_tm < 0.0 && enecont_diff_Ee_40 < 0.0 )
        set tmp_pre_pickup    = 10.0**(enecont_pickup_lg_Ee - 40.0)    if( enecont_tm >= -1.0e4 && enecont_tm < 0.0 && enecont_diff_Ee_40 < 0.0 )
        set tmp_pre_Eloss_sy  = 10.0**(enecont_lg_Eloss_sy  - 40.0)    if( enecont_tm >= -1.0e4 && enecont_tm < 0.0 && enecont_diff_Ee_40 < 0.0 )
        set tmp_pre_escape    = 10.0**(enecont_escape_lg_Ee - 40.0)    if( enecont_tm >= -1.0e4 && enecont_tm < 0.0 && enecont_diff_Ee_40 < 0.0 )
	set tmp_pre_TOTAL     = tmp_pre_pickup + tmp_pre_shock - (tmp_pre_Eloss_sy + tmp_pre_escape)
	#set tmp_pre_TOTAL     = tmp_pre_pickup + tmp_pre_shock - (tmp_pre_Eloss_sy + tmp_pre_escape) - tmp_pre_diff_Ee

        set tmp_pre_fractional_loss = tmp_pre_diff_Ee/tmp_pre_Ee
        set tmp_pre_cumul_diff_Ee   = cumulate(tmp_pre_diff_Ee)
        set tmp_pre_cumul_shock     = cumulate(tmp_pre_shock)
        set tmp_pre_cumul_pickup    = cumulate(tmp_pre_pickup)
        set tmp_pre_cumul_Eloss_sy  = cumulate(tmp_pre_Eloss_sy)
        set tmp_pre_cumul_escape    = cumulate(tmp_pre_escape)
        set tmp_pre_cumul_TOTAL     = cumulate(tmp_pre_TOTAL)

        define lastidx $(dimen(tmp_pre_tm)-1)
        echo "+---------------------------------------"
        echo "| PRE INJECTION "
        echo "| sum(diff_Ee)  = "$(sprintf('%9.2e',$(tmp_pre_cumul_diff_Ee[$lastidx]*1e40)))
        echo "| "
        echo "| sum(shock)    = "$(sprintf('%9.2e',$(tmp_pre_cumul_shock[$lastidx]*1e40)))
        echo "| sum(pickup)   = "$(sprintf('%9.2e',$(tmp_pre_cumul_pickup[$lastidx]*1e40)))
        echo "| "
        echo "| sum(Eloss_sy) = "$(sprintf('%9.2e',$(tmp_pre_cumul_Eloss_sy[$lastidx]*1e40)))
        echo "| sum(escape)   = "$(sprintf('%9.2e',$(tmp_pre_cumul_escape[$lastidx]*1e40)))
        echo "| "
        echo "| sum(NET_TOTAL)= "$(sprintf('%9.2e',$(tmp_pre_cumul_TOTAL[$lastidx]*1e40)))
        echo "+---------------------------------------"

	echo "|  blue    : electron energy content "
	echo "|  cyan    : electron energy content CHANGE "
	echo "| "
	echo "|  gray    : gain, shock  injected energy "
	echo "|  green   : gain, pickup injected energy "
	echo "| "
	echo "|  red     : loss, synchrotron radiation "
	echo "|  magenta : loss, escape "
        echo "+---------------------------------------"

# compute_sequence_of_electrons_energy_content
#             : computes energy content from electron spectra fnt_* files
#               [CHECK IF HARD-CODED PARAMETERS ARE STILL VALID FOR ALL c/d CASES]
##            : calls
##               + read_electrons_parameters 
##               + SUB_electrons_energy_content 
compute_sequence_of_electrons_energy_content

        # calls 'set_read_sim_gf' within
        read_electrons_parameters 

        echo "----------------------------------------"
        echo "  [1] 01_01" 
        echo "  [2] 01_06" 
        echo "  [3] 16_01" 
        echo "  [4] 16_06" 
        define which_zone ? < Which zone : >
        if( $which_zone == 1 ) { define 1 "01_01" }
        if( $which_zone == 2 ) { define 1 "01_06" }
        if( $which_zone == 3 ) { define 1 "16_01" }
        if( $which_zone == 4 ) { define 1 "16_06" }
        if( $which_zone == 1 || $which_zone == 3 ) { define k_r (1) }
        if( $which_zone == 2 || $which_zone == 4 ) { define k_r (6) }

        #--------------------------------------------------
        # if( substr('$which_sim',0,3) == 'ext' ) { define nframes (200) }
        # if( substr('$which_sim',0,3) == 'hla' ) { define nframes (66) }
        # if( substr('$which_sim',0,3) == 'hlc' ) { define nframes (90) }
        # if( substr('$which_sim',0,3) == 'hld' ) { define nframes (90) }
        #define nframes $(dimen(elec_tm)-20)
        define frame1 (  5)
        define frame2 (250)
        define nframes $($frame2 - $frame1 + 1)

        set dimen(template_vec) = $nframes
        foreach 9  < "enecont_n" \
                     "enecont_tm" "enecont_t1" "enecont_t2" \
                     "enecont_lg_Ne_dens" "enecont_lg_Ne" \
                     "enecont_lg_Ee_dens" "enecont_lg_Ee" \
                     "enecont_diff_Ee_40" "enecont_lg_diff_Ee" "enecont_lg_Le" \
                     "enecont_Eloss_tm" "enecont_lg_Eloss_sy" > {

            set $9 = template_vec
	}

        #--------------------------------------------------
        define time_interval $time_dZ
	define lg_volume_R_ring ( $lg_volume_R_ring_basic + lg(2.0*$k_r - 1.0) )
        # $lg_volume_Z_slice is defined in 'set_read_sim_gf'

        data "$!XC_DATA/$!SIMDIR/Eloss_sy_$!1.dat"
        read < eloss_tm 2 eloss_dt 3 lg_eloss_sy 5 >
        set eloss_tm_obs = (eloss_tm - $t_inj)/$Gamma

	# The value in Eloss_sy are defined over the volume of the ring, not the full slice.
	# It is also already multiplied by a 'dt'.
	# Assuming that the Eloss_sy per cm^3 is approximately the same over all rings, this
	#  value can be rescaled to the full slice volume, and then made to be a rate by
	#  dividing it by the time interval associated with it.

	set lg_eloss_sy_dens_rate = lg_eloss_sy - $lg_volume_R_ring - lg(eloss_dt)
	set lg_eloss_sy_dens      = lg_eloss_sy_dens_rate + lg($time_interval)
	set lg_eloss_sy           = lg_eloss_sy_dens      + $lg_volume_Z_slice

        #--------------------------------------------------
        if( substr('$which_sim',0,4) == 'hla1' ) { 
           define shock_lg_Ne_dens_rate  $(lg(9.716e-5))
           define shock_lg_Ee_dens_rate  $(lg(1.433e-7))
           define pickup_lg_norm         $(lg(1.0e-20)) 
        }
        if( substr('$which_sim',0,4) == 'hlb1' ) { 
           define shock_lg_Ne_dens_rate  $(lg(2.121e-7))
           define shock_lg_Ee_dens_rate  $(lg(1.698e-8))
           define pickup_lg_norm         $(lg(1.0e-20)) 
        }
        if( substr('$which_sim',0,4) == 'hlc1' ) { 
           define shock_lg_Ne_dens_rate  $(lg(1.779e-4))
           define shock_lg_Ee_dens_rate  $(lg(8.489e-7))
           define pickup_lg_norm         $(lg(8.0e-4)) 
        }
        if( substr('$which_sim',0,4) == 'hlc2' ) { 
           define shock_lg_Ne_dens_rate  $(lg(1.779e-4))
           define shock_lg_Ee_dens_rate  $(lg(8.489e-7))
           define pickup_lg_norm         $(lg(5.0e-4))
        }
        #if( substr('$which_sim',0,4) == 'hlc5' ) 
        if( substr('$which_sim',0,0) == 'hlc1b' ) {     #GF: 2014.01.22
           define shock_lg_Ne_dens_rate  $(lg(2.135e-4))
           define shock_lg_Ee_dens_rate  $(lg(1.019e-6))
           define pickup_lg_norm         $(lg(8.0e-4))
        }
        if( substr('$which_sim',0,4) == 'hld1' ) { 
           define shock_lg_Ne_dens_rate  $(lg(1.166e-5))
           define shock_lg_Ee_dens_rate  $(lg(2.716e-7))
           define pickup_lg_norm         $(lg(8.0e-4)) 
        }
        if( substr('$which_sim',0,5) == 'hld1b' ) {      #GF: UPDATE
           define shock_lg_Ne_dens_rate  $(lg(1.166e-5))
           define shock_lg_Ee_dens_rate  $(lg(2.716e-7))
           define pickup_lg_norm         $(lg(8.0e-4)) 
        }
        if( substr('$which_sim',0,4) == 'hld4' ) { 
           define shock_lg_Ne_dens_rate  $(lg(1.457e-5))
           define shock_lg_Ee_dens_rate  $(lg(3.395e-7))
           define pickup_lg_norm         $(lg(3.33e-4)) 
        }
        #if( substr('$which_sim',0,4) == 'hld5' ) 
        if( substr('$which_sim',0,0) == 'hld4b' ) {       #GF: 2014.01.22 
           define shock_lg_Ne_dens_rate  $(lg(2.915e-5))
           define shock_lg_Ee_dens_rate  $(lg(6.791e-7))
           define pickup_lg_norm         $(lg(3.33e-4)) 
        }
        #--------------------------------------------------
        # prepare arrays for 'pick-up' (Gaussian with <g>=100, sigma=10
        #--------------------------------------------------
        define pickup_lg_Ne_dens_rate $( $pickup_lg_norm )
        define pickup_lg_Ne_dens      $( $pickup_lg_Ne_dens_rate +  lg($time_interval) )
        define pickup_lg_Ne           $( $pickup_lg_Ne_dens      + $lg_volume_Z_slice )

        define pickup_lg_Ee_dens_rate $( $pickup_lg_norm +  lg(8.187e-5) )          # 8.187e-05 is the factor for <g>=100, sigma=10
        define pickup_lg_Ee_dens      $( $pickup_lg_Ee_dens_rate +  lg($time_interval) )
        define pickup_lg_Ee           $( $pickup_lg_Ee_dens      + $lg_volume_Z_slice )

        define pickup_lg_Linj         $( $pickup_lg_Ee_dens_rate + $lg_volume_Z_slice )
        #define pickup_lg_Linj         $($pickup_lg_norm +  lg(4.822e42))           # 48.6832 = 4.822e48??  Shouldn't this be 4.822e42?

        set enecont_pickup_lg_Ne_dens = 0.0*template_vec + $pickup_lg_Ne_dens
        set enecont_pickup_lg_Ne      = 0.0*template_vec + $pickup_lg_Ne
        set enecont_pickup_lg_Ee_dens = 0.0*template_vec + $pickup_lg_Ee_dens
        set enecont_pickup_lg_Ee      = 0.0*template_vec + $pickup_lg_Ee
        set enecont_pickup_Ne_10      = 10.0**(enecont_pickup_lg_Ne - 10.0)
        set enecont_pickup_Ee_40      = 10.0**(enecont_pickup_lg_Ee - 40.0)

        #--------------------------------------------------
        # prepare arrays for 'shock injection'
        #    CHECK IF HARD-CODED PARAMETERS ARE STILL VALID FOR ALL c/d CASES]
        #--------------------------------------------------
	define shock_duration ($time_interval)
	set dummy_0 = 0.0*template_vec
	set dummy_1 = 0.0*template_vec + 1
	set tmpdt  = elec_dt                                if( elec_n >= $frame1 && elec_n <= $frame2 ) 
	set tmp1a  = elec_t1 - $t_inj                       if( elec_n >= $frame1 && elec_n <= $frame2 ) 
	set tmp2a  = elec_t2 - $t_inj                       if( elec_n >= $frame1 && elec_n <= $frame2 ) 
	set tmp1b  = ($t_inj + $shock_duration) - elec_t1   if( elec_n >= $frame1 && elec_n <= $frame2 ) 
	set tmp2b  = ($t_inj + $shock_duration) - elec_t2   if( elec_n >= $frame1 && elec_n <= $frame2 ) 
	set test1a = ( tmp1a > 0 ) ? dummy_1 : dummy_0
	set test2a = ( tmp2a > 0 ) ? dummy_1 : dummy_0
	set test1b = ( tmp1b > 0 ) ? dummy_1 : dummy_0
	set test2b = ( tmp2b > 0 ) ? dummy_1 : dummy_0
	set test   = 1*test1a + 2*test2a + 4*test1b + 8*test2b
	set shock_dt = 0.0*template_vec + 1e-50
	do 9=0,dimen(template_vec)-1 {
	   if( test[$9] == 15 ){ set shock_dt[$9] = tmpdt[$9] }
	   if( test[$9] == 14 ){ set shock_dt[$9] = tmp2a[$9] }
	   if( test[$9] ==  7 ){ set shock_dt[$9] = tmp1b[$9] }
	}

	set vec_lg_Ne_dens_rate      = 0*template_vec + $shock_lg_Ne_dens_rate
	set vec_lg_Ee_dens_rate      = 0*template_vec + $shock_lg_Ee_dens_rate
        set enecont_shock_lg_Ne_dens = vec_lg_Ne_dens_rate + lg(shock_dt)
        set enecont_shock_lg_Ne      = enecont_shock_lg_Ne_dens + $lg_volume_Z_slice 
        set enecont_shock_lg_Ee_dens = vec_lg_Ee_dens_rate + lg(shock_dt)
        set enecont_shock_lg_Ee      = enecont_shock_lg_Ee_dens + $lg_volume_Z_slice 
        set enecont_shock_Ne_10      = 10.0**(enecont_shock_lg_Ne - 10.0)
        set enecont_shock_Ee_40      = 10.0**(enecont_shock_lg_Ee - 40.0)

	foreach 9 < dummy_0 dummy_1 tmpdt tmp1a tmp2a tmp1b tmp2b test1a test2a test1b test2b test \
                    vec_lg_Ne_dens_rate vec_lg_Ee_dens_rate > { delete $9 } 

        #--------------------------------------------------
	# actual energy content from electron N(\gamma)
        #--------------------------------------------------
        define 8 (-1)
	define g1_factor  (1.1)
        define prev_lg_Ee (0.0)
        do 9=$frame1,$frame2 {

           define 8 $($8+1)

           #data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_$!(sprintf('%03d',$9)).dat"
           #verbose 0
           #read < x_$1 1 y_$1 2 >
           #verbose 1

           data "$!XC_DATA/$!SIMDIR/electrons/fnt_gamma.dat"
           read < x_$1 1 >

	   define Ngamma (dimen(x_$1))
	   define n2read ($9)
           data "$!XC_DATA/$!SIMDIR/electrons/fnt_$!1_all_spectra.dat"
	   lines $( ($n2read-1)*$Ngamma + 1 + 1 ) $( $n2read*$Ngamma + 1 ) 
           verbose 0
           read < y_$1 1 >
           verbose 1

           set lx_$1 = lg(x_$1 + 1)
           set ly_$1 = lg(y_$1)

           SUB_electrons_energy_content lx_$1 ly_$1
           # returns $lg_Ne $lg_Ne_dens
           # returns $lg_Ee $lg_Ee_dens
	   echo $(10.0**$lg_Ne_dens)

           define diff_Ee_40 $( 10.0**($lg_Ee-40.0) - 10.0**($prev_lg_Ee-40.0) )
           if( $diff_Ee_40 > 0 ) { 
              define lg_diff_Ee $(40.0 + lg($diff_Ee_40))
              define str "up"
           } else {
              define lg_diff_Ee $(40.0 + lg(-1.0*$diff_Ee_40))
              define str "  "
           }

           ##define time_interval $($sizeZ/$nz/3e10)
           ##define time_interval $time_dZ
           define lg_Le         $($lg_diff_Ee - lg($time_interval))

           #echo "[ "$(sprintf('%4d',$9))" ] "$(sprintf('%8.1f',$(1.0001*elec_tm_obs[$9])))" ks :   "$(sprintf('%9.3e',$(10.0**$lg_Ee_dens)))"   "$(sprintf('%9.3e',$(10.0**$lg_Ee)))"    "$(sprintf('%9.3e',$(10.0**$lg_diff_Ee)))" "$str"  "$(sprintf('%9.3e',$(10.0**$lg_Le)))

           set enecont_n[$8]          = int($9)
           set enecont_tm[$8]         = elec_tm_obs[$9]
           set enecont_t1[$8]         = elec_t1_obs[$9]
           set enecont_t2[$8]         = elec_t2_obs[$9]
           set enecont_lg_Ne_dens[$8] = $lg_Ne_dens
           set enecont_lg_Ne[$8]      = $lg_Ne
           set enecont_lg_Ee_dens[$8] = $lg_Ee_dens
           set enecont_lg_Ee[$8]      = $lg_Ee
           set enecont_diff_Ee_40[$8] = $diff_Ee_40
           set enecont_lg_diff_Ee[$8] = $lg_diff_Ee
           set enecont_lg_Le[$8]      = $lg_Le

           #set enecont_lg_Eloss_sy[$8]= lg_eloss_sy[$9] + lg($time_interval)
           set enecont_lg_Eloss_sy[$8]= lg_eloss_sy[$9]    # lg_eloss_sy is already integrated over time and full-slice volume
           set enecont_Eloss_tm[$8]   = eloss_tm_obs[$9]   # it's supposed to match the regular 'tm', prepared just for checks.

           #echo "[ "$(sprintf('%4i',$9))" ] "$(sprintf('%8.1f',$(1.0001*elec_tm_obs[$9])))" ks :   "$(sprintf('%9.3e',$(10.0**$lg_Ee_dens)))"   "$(sprintf('%8.4f',$($lg_Ee*1.0001)))"    "$(sprintf('%9.3e',$(10.0**$lg_Ee)))"   "$(sprintf('%9.3e',$(10.0**$diff_lg_Ee)))" "$str

           define prev_lg_Ee $lg_Ee
        }

        set enecont_Ee_40        = 10.0**(enecont_lg_Ee - 40.0)
        set enecont_Le_40        = 10.0**(enecont_lg_Le - 40.0)
        set enecont_diff_Ee_40   = enecont_diff_Ee_40            ##GF: ???

        #--------------------------------------------------
	# escape
        #--------------------------------------------------
        define f_esc $(1.0/$n_z/$r_esc)
        set enecont_escape_fraction = 0.0*template_vec + $f_esc

        set enecont_escape_lg_Ne = enecont_lg_Ne + lg(enecont_escape_fraction)
        set enecont_escape_lg_Ee = enecont_lg_Ee + lg(enecont_escape_fraction) 
        set enecont_escape_Ne_10 = 10.0**(enecont_escape_lg_Ne - 10.0)
        set enecont_escape_Ee_40 = 10.0**(enecont_escape_lg_Ee - 40.0)

        #--------------------------------------------------
	# total net gains/losses
        #--------------------------------------------------
	set enecont_losses_lg_Ee = 40.0 + lg( enecont_escape_Ee_40 + 10.0**(enecont_lg_Eloss_sy - 40.0))
	set enecont_gains_lg_Ee  = 40.0 + lg( enecont_shock_Ee_40  + enecont_pickup_Ee_40 )

	set enecont_net_Ee_40    = 10.0**(enecont_gains_lg_Ee-40.0) - 10.0**(enecont_losses_lg_Ee-40.0) 
        set enecont_diff_Ee      = 1.0e40*10.0**enecont_diff_Ee_40

        define print_noheader 1
	write   "/tmp/SMdum" "gugug"   # JUST TO RESET THE OUTPUT FILE NAME AND AVOID APPENDING
        define outfile "enecont_"$which_sim"_"$1".dat"
        define fmt "  %5d  %9.1f   %9.4f  %9.4f   %10.3e  %9.4f   %9.4f  %9.4f   %9.4f  %9.4f   %11.4e"
        write   $outfile "# lg(Volume_Z_slice) = "$(sprintf('%7.4f',$lg_volume_Z_slice))
        write   $outfile "# lg(Volume_R_ring)  = "$(sprintf('%7.4f',$lg_volume_R_ring))
        write   $outfile "# dt                 = "$(sprintf('%11.2f',$time_interval))
        write   $outfile "#                                                                    ------- GAINS ------    ------ LOSSES -----            "
        write   $outfile "#    n      t_obs         Ee      lg(Ue)       d(Ee)      abs(Le)    Ee_shock   Ee_pickup    Ee_sync   Ee_escape     Net Ee "
        write   $outfile "#                                                        d(Ee)/dt                                                           "
        write   $outfile "#                                              1e40                                                                   1e40  "
        write   $outfile "#                                                                                                                           "
        print + $outfile '$!fmt\n' < enecont_n  enecont_tm  \
                                     enecont_lg_Ee  enecont_lg_Ee_dens  enecont_diff_Ee_40  enecont_lg_Le \
                                     enecont_shock_lg_Ee enecont_pickup_lg_Ee \
                                     enecont_lg_Eloss_sy enecont_escape_lg_Ee \
                                     enecont_net_Ee_40 >
        define print_noheader 0
	echo "+------------------------------------------------------------"
	write standard "| done with : compute_sequence_of_electrons_energy_content"
	echo "|  Printed the results in "$outfile
	echo "+------------------------------------------------------------"

## plot_enecont_old
plot_enecont_old

        reset_graph
        location 4000 29000 3250 30000

        lweight 3 
        ctype 2 
        ltype 0 
        expand 1.5

        define tplotmin ( -36)
        define tplotmax (  40)
        define tick_s   (   5)
        define tick_l   (  10)

        #----------------------------------------
        limits $tplotmin $tplotmax 35.0 40.0
        ticksize $tick_s $tick_l 0.25 1 
        box 1 2 0 4 
        xlabel Time (obs. frame)
        ylabel log(\Delta E_e / \Delta T)

        ctype 3 
        connect (enecont_tm/1e3)  enecont_lg_Le  if( enecont_lin_diff_Ee_40 < 0 )
        ctype 2 

        #----------------------------------------
        limits $tplotmin $tplotmax 44.7 45.3
        ticksize $tick_s $tick_l 0.05 0.25
        box 4 4 0 2 

        ctype 5 
        connect (enecont_tm/1e3)  enecont_lg_Ee   # if( enecont_lin_diff_Ee_40 < 0 )
        ctype 2 

        #----------------------------------------
        limits $tplotmin $tplotmax 44.0 45.0
        ticksize $tick_s $tick_l 0.05 0.25

        ctype 4 
        connect (enecont_tm/1e3)  enecont_lg_Eloss_sy   # if( enecont_lin_diff_Ee_40 < 0 )

        #location 4000 28000 3250 30000
        box 4 4 4 2 
        ctype 2 

        #----------------------------------------
        set tmp_Ee      = enecont_lin_Ee                    if( enecont_tm >= 0.0  && enecont_lin_diff_Ee_40 < 0.0 )
        set tmp_diff_Ee_40 = -1.0*enecont_lin_diff_Ee_40    if( enecont_tm >= 0.0  && enecont_lin_diff_Ee_40 < 0.0 )
        set tmp_tm      = enecont_tm                        if( enecont_tm >= 0.0  && enecont_lin_diff_Ee_40 < 0.0 )

        set tmp_fractional_loss = tmp_diff_Ee_40/tmp_Ee
        set tmp_cumul_diff_Ee_40 = cumulate(tmp_diff_Ee_40)

##-------------------------------------------------------------------------------
## plot_sed_ratio_with_CG: plot the SED ratio between our code and C&G99.
plot_sed_ratio_with_CG

        #GF# ??? data ???
        read < x 1 y 2 >
        set lx = lg(x)
        set ly = lg(x*y)

        #GF# ??? What do you intend to do with this weird 'box' command with y-limits 0,0 ???
        define min (0)
        define max (0)
        lweight 4
        limits (lx) $min $max
        ticksize 0.5 2 -1 10
        box 1 3 3 0

        set lx = lx + 17.384
        ticksize 0.5 2 0 0

        # Chiaberge & Ghisellini SED
        data output_top13.da
        read < xx 1 yy 2 >
        set dimen(lyy)  = dimen(lx)
        set dimen(ratio)= dimen(lx)
        set i = 0
        do ic=0,49 {
            set lyy[i] = 0
            set j = 0
            while {xx[j]<lx[i+1] && j<399}{
                if( xx[j]>=lx[i] & yy[j]> lyy[i] ){ set lyy[i]= yy[j] }
                set j = j+1
            }
            set ratio[i] = (10**lyy[i]-10**ly[i])/(10**lyy[i]+10**ly[i])*2
            if( ratio[i]>1.5 || ratio[i]<-1.5 ){ set ratio[i] = 0 }
            set ratio[i+1]=ratio[i]
            set i=i+2
        }
        vecminmax ratio min max
        define min ($min-0.01)
        define max ($max+0.01)
        limits (lx) $min $max
        box 3 2 1 3

        connect lx ratio
        ctype 0

##-------------------------------------------------------------------------------
## Urad_eff
Urad_eff 01

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }

	define which_sed_n ? <                 SED number : >
	define max_lx      ? < max lg(nu) for integration : >
        
        data "$!XC_DATA/$!SIMDIR/seds.dat"

	# x is in keV
	# y is in erg/s/keV
        read < x 1 ly $($which_sed_n+1) >

	set ly = ly + lg(x)
	set lx = lg(x) + 17.384    

	set ly = ly - 4.0*lg($Gamma)
	set lx = lx -     lg($Gamma)

	mysmooth ly ly_s 5
	set ly = ly_s - lx   if( lx <= $max_lx && lx >= 5.0 )
	set lx = lx          if( lx <= $max_lx && lx >= 5.0 )

	set ly = ly + lg(9./16.) - lg(3.1415) - lg(3e10) - 2.0*lg($sizeR)

	define nx $(dimen(lx))
	define rx $(lx[$nx-1] - lx[0])
	define dlx $($rx/$nx)
	define lx1 $(lx[0])
	define lx2 $(lx[$nx-1])

	set new_lx = $lx1,$lx2,$($dlx/3.)

	interp_gf lx ly new_lx new_ly

	set lx = new_lx
	set ly = new_ly

        foreach vec < lx1 lx2 ly1 ly2 lxx lyy ldx > { set $vec local }
        set lx1 = pop(-1,lx)
        set lx2 = pop(1,lx)
        set ly1 = pop(-1,ly)
        set ly2 = pop(1,ly)
        
        set lxx = 0.5*(lx1 + lx2)
        set lyy = 0.5*(ly1 + ly2)
        set ldx = lg(10.0**lx2 - 10.0**lx1)
        
        set ldUrad = lyy + ldx 
        set dUrad  = 10.0**(ldUrad)
        #set dUrad  = 10.0**(ldUrad-50.0)
	#scaled, but it should not matter.

	set Urad_cumul     = cumulate(dUrad)
	set Urad_cumul_rel = Urad_cumul/Urad_cumul[dimen(Urad_cumul)-1]
	define Urad_tot $(Urad_cumul[dimen(Urad_cumul)-1])

	define Ub $($Bfield**2./8./3.1415)

	set Urad_x1 = lx1
	set Urad_x2 = lx2
	set Urad_x  = lxx
	set Urad_y  = lyy

	#--------------------------------------------------
	set Urad_gamma   = 2,6,0.01
	set Urad_max_x   = lg(9.2e19) - Urad_gamma
	set Urad_eff_rel = Urad_gamma*0.0
	set Urad_eff     = Urad_gamma*0.0

	do 9=0,dimen(Urad_gamma)-1 {
	   set tmp_Urad         = Urad_cumul       if( (Urad_x - lg($Gamma))  >= $(Urad_max_x[$9]) )
	   set tmp_Urad_rel     = Urad_cumul_rel   if( (Urad_x - lg($Gamma))  >= $(Urad_max_x[$9]) )
	   set Urad_eff[$9]     = tmp_Urad[0]
	   set Urad_eff_rel[$9] = tmp_Urad_rel[0]
	}

	#--------------------------------------------------
        reset_graph   # SETTING LOCATION AT: 5500 30000 5500 30000
        # location  5500 30000 4500 30000
        # location  4500 31000 3500 31000

        #lc7: location 5500 30000 4500 30000
        #location 4500 27500 7500 28000
        location 4000 27250 3250 30000

	#----------------------------------------
	window 1 -2 1 1 
	ticksize -1 0 0 0 
	limits 1.8 6.2 -0.05 1.05
	limits 1.8 6.2  0.35 1.05
	limits 3.2 6.2  0.35 1.05
	box 1 2 0 4 
	xlabel "\gamma_{e}"

	ctype 5 
	connect Urad_gamma Urad_eff_rel
	ctype 2 

	ticksize 0 0 0.02 0.1
	notation -4 4 -2 2 
	limits 1.8 6.2 $($fy1*$Urad_tot/$Ub) $($fy2*$Urad_tot/$Ub)
	box 4 4 4 2 
	relocate ( $($gx2+3000) $(0.5*($gy1+$gy2)) )
	angle -90
	putlabel 5 "U_{rad}/U_{B}"
	angle 0

	echo "--------------------------------------------------"
	echo "   Urad_tot = "$(sprintf('%10.4e',$Urad_tot))
	echo "   Ub       = "$(sprintf('%10.4e',$($Bfield**2./8./3.1415)))
	echo "   Urad/Ub  = "$(sprintf('%7.4f',$($Urad_tot/($Bfield**2./8./3.1415))))
	echo "--------------------------------------------------"

	#print '   %8.5f  %8.5f   %10.4e  %10.4e\n' < Urad_x Urad_y  Urad_cumul Urad_cumul_rel >
	#----------------------------------------
	window 1 -2 1 2 
	ticksize -1 0 -1 0 
	limits 1.8 6.2 4 9 
	limits 3.2 6.2 4 7.5
	box 0 2 0 0 

	define tcool_ref (7.738e8)

	set t_cool_tot_brute = lg($tcool_ref/$Bfield**2.0) - Urad_gamma - lg(1.0 + $Urad_tot/$Ub)
	set t_cool_tot = lg($tcool_ref/$Bfield**2.0) - Urad_gamma - lg(1.0 + Urad_eff/$Ub)
	set t_acc      = 0.0*Urad_gamma + lg($sizeZ/3.e10*$r_acc)
	set t_esc      = 0.0*Urad_gamma + lg($sizeZ/3.e10*$r_esc)

	ctype 6 
	connect Urad_gamma t_cool_tot_brute
	ctype 5 
	connect Urad_gamma t_cool_tot
	ctype green3
	connect Urad_gamma t_esc
	ctype red2
	connect Urad_gamma t_acc
	ctype 2 

	set test_gg  = Urad_gamma
	set test_tt  = t_cool_tot
	set test_acc = abs(t_cool_tot - t_acc)
	sort < test_acc test_gg test_tt >
	echo "   gamma_eq  = "$(sprintf('%9.3e',$(10.0**test_gg[0])))"   time_eq  = "$(sprintf('%9.3e',$(10.0**test_tt[0])))
        
	set test_gg  = Urad_gamma
	set test_tt  = t_cool_tot
	set test_esc = abs(t_cool_tot - t_esc)
	sort < test_esc test_gg test_tt >
	echo "   gamma_esc = "$(sprintf('%9.3e',$(10.0**test_gg[0])))"   time_esc = "$(sprintf('%9.3e',$(10.0**test_tt[0])))
	echo "--------------------------------------------------"
        
##-------------------------------------------------------------------------------
## sync_em
sync_em

	data synchro_em.dat
	read < gg 1 nn 2 em_sync 3 >

	define nuref (1.e6)
	define Bref  (0.035)
	set nn = nn - 2.0*lg($nuref) - lg($Bref)
	set gg = gg - lg($nuref)
	vecminmax em_sync em_min em_max
	set em_sync = em_sync - $em_max

	set test_nn = nn
	set test_em = abs(em_sync)

	sort < test_em test_nn >
	echo $(test_nn[0])

	set nn = nn - $(test_nn[0])

	set gg = 0.5*nn

#-------------------------------------------------------------------------------
# plot_dcf  <case>  <band 1>  <band 2>  [<color>]
#          : bands = lowX midX highX / lowG highG
plot_dcf 34

        if( $?1 ) { 
           set_read_sim_gf $1
        } else {
           set_read_sim_gf
        }

       #data "$!XC_DATA/DCF/$!1_dcf_$!2_$!3_bin800_range14000_dcf.qdp"
        data "$!XC_DATA/DCF/v1/$!1_dcf_$!2_$!3_bin800_range14000_dcf.qdp"
	lines 5 63
	read < tau 1 dtau 2 y_dcf 3 err_y_dcf 4 > 
	set tau  = tau/1000.
	set tau  = -1.0*tau
	set dtau = dtau/1000.

	reset_graph
	#location 5000 31000 12000 28000 
        location 4000 28250 3250 30000   # plot_seds

	limits -14.0 14.0 -0.75 1.15
	limits -20.0 20.0 -0.15 1.15
	limits -15.0 15.0 -0.15 1.15
	limits -15.0 15.0 -0.45 1.15
	ticksize 1.0 5.0 0.1 0.5 
	box
	ylabel "DCF "
	expand 2.0
	xlabel "\tau [ks]"
	expand 1.5 

	ctype 4 
	ltype 3 
	relocate 0 $fy1 draw 0 $fy2 
	ltype 0 

	ctype 3 
	if( $?4 ) { ctype $4 } 
	expand 0.0
	error_x tau y_dcf dtau
	error_y tau y_dcf err_y_dcf
	expand 1.5
	ptype 4 3 
	points tau y_dcf 
	ctype 2 

	expand 1.0
	relocate ( $($gx1) $($gy2 + 500) )
	putlabel 6 $1" : "$2" vs. "$3
	relocate ( $($gx1 + 1500) $($gy2 - 1500) )
	putlabel 6 $2" lags"
	relocate ( $($gx2 - 1500) $($gy2 - 1500) )
	putlabel 4 $3" lags"
	expand 1.5

	set fitx  = tau
	set fitdx = dtau
	set fity  = y_dcf
	set fitw  = err_y_dcf

	echo "+----------------------------------------------"
	echo "| NOTE: defined arrays fitx, fitdx, fity, fitw "
	echo "|       scaled to 'ks' (e.g. as plotted)."
	echo "+----------------------------------------------"

##-------------------------------------------------------------------------------
# make_all_dcf_figs  < run codes > 
make_all_dcf_figs 01 

        if( $?1 ) { 
           define which_runs ("$!1")
	   set names = < $1 >
        } else {
           define which_runs ? < codes of the runs to process : >
	   set names = < $which_runs > 
        }

        # set names = < hla1 hlc1 hlc2 hld1 hld2 hld3 hld4 hld5 > 
        # set names = < 'hld5_r1' > 
        # set names = < 'hld5_r2' > 
        # set names = < 'hld5' > 

	set dcf_values = < 0.5 0.25 > 
	set dcf_values = < 0.5 > 

	define dx       local
	define flag_rel local

        foreach 9 names { 
           device postencap test_dcf_lowX_highX_$9.ps
           plot_dcf $9 lowX highX
	   foreach ydcf dcf_values {
              overlay_centroid_and_peak $ydcf
	   }

           device postencap test_dcf_lowX_midX_$9.ps
           plot_dcf $9 lowX midX
	   foreach ydcf dcf_values {
              overlay_centroid_and_peak $ydcf
	   }

           device postencap test_dcf_midX_highX_$9.ps
           plot_dcf $9 midX highX
	   foreach ydcf dcf_values {
              overlay_centroid_and_peak $ydcf
	   }

           device postencap test_dcf_lowX_lowG_$9.ps
           plot_dcf $9 lowX lowG
	   foreach ydcf dcf_values {
              overlay_centroid_and_peak $ydcf
	   }

           device postencap test_dcf_midX_lowG_$9.ps
           plot_dcf $9 midX lowG
	   foreach ydcf dcf_values {
              overlay_centroid_and_peak $ydcf
	   }

           device postencap test_dcf_highX_lowG_$9.ps
           plot_dcf $9 highX lowG
	   foreach ydcf dcf_values {
              overlay_centroid_and_peak $ydcf
	   }
        }
        device x11

	echo "=================================================="
	echo "  Adjusting PS BoundingBox... " 
        foreach 9 names { 
	    #systemcall perl -i -pe 's|BoundingBox: 18 144 592 718|BoundingBox: 40 290 575 655 %% 18 144 592 718|;' test_dcf_lowX_highX_$9.ps
	    #systemcall perl -i -pe 's|BoundingBox: 18 144 592 718|BoundingBox: 40 290 575 655 %% 18 144 592 718|;' test_dcf_lowX_midX_$9.ps
	    #systemcall perl -i -pe 's|BoundingBox: 18 144 592 718|BoundingBox: 40 290 575 655 %% 18 144 592 718|;' test_dcf_midX_highX_$9.ps
	    #systemcall perl -i -pe 's|BoundingBox: 18 144 592 718|BoundingBox: 40 290 575 655 %% 18 144 592 718|;' test_dcf_lowX_lowG_$9.ps
	    #systemcall perl -i -pe 's|BoundingBox: 18 144 592 718|BoundingBox: 40 290 575 655 %% 18 144 592 718|;' test_dcf_midX_lowG_$9.ps
	    #systemcall perl -i -pe 's|BoundingBox: 18 144 592 718|BoundingBox: 40 290 575 655 %% 18 144 592 718|;' test_dcf_highX_lowG_$9.ps
	}

	echo "-------------------------------------------------"
	echo "  Renaming temporary files to standard names... " 
	echo "=================================================="
        foreach 9 names { 
	   foreach 8 < lowX_highX lowX_midX midX_highX lowX_lowG midX_lowG highX_lowG > {
	       systemcall mv test_dcf_$8_$9.ps $9_dcf_$8.ps
	   }
	}


## overlay_centroid_and_peak <Y-dcf cut>
overlay_centroid_and_peak 1 

	      compute_centroid $1

	      expand 1.0
	      define dx       (0.75)
	      define flag_rel (6)
	      if( $xcentroid < 0 ) {
	         define dx       (-1.0*$dx)
	         define flag_rel (4)
	      }

	      ctype 5 
	      relocate $($xcentroid+$dx) $($ycut + 0.05) 
	      putlabel $flag_rel $(sprintf('%5.2f',$xcentroid))
	      if( $1 > 0 ) { mark_dcf_peak } 

##-------------------------------------------------------------------------------
## find_bisector
## find_bisector

##-------------------------------------------------------------------------------
## find_dcf_peak
find_dcf_peak

	# It uses fitx fity
	set tmpx  = fitx   if( fity >= 0.4 )
	set tmpy  = fity   if( fity >= 0.4 ) 

	set tmpx = -1.0*tmpx

	set spl_x = tmpx[0],tmpx[dimen(tmpx)-1],0.2
	spline tmpx tmpy spl_x spl_y

	set spl_x = -1.0*spl_x
	set spl_x_s = spl_x
	set spl_y_s = spl_y
	sort < spl_y_s spl_x_s > 
	set spl_x_s = reverse(spl_x_s)
	set spl_y_s = reverse(spl_y_s)

	define dcf_peak_x $(spl_x_s[0])
	define dcf_peak_y $(spl_y_s[0])

## mark_dcf_peak
mark_dcf_peak

	define save_color  $ctype 
	define save_expand $expand 

	expand 1.5
	relocate $dcf_peak_x $dcf_peak_y 
	ptype 3 3 
	angle 180
	ctype 2 
	ltype 0
	dot
	angle 0 
	relocate $dcf_peak_x $fy2
	ltype 2 
	draw     $dcf_peak_x $fy1
	ltype 0

	ctype  $save_color
	expand $save_expand

##-------------------------------------------------------------------------------
# compute_centroid [ <min Y> ] 
#                 : if <min Y> is POSITIVE: the Y-level is defined as a fraction of the peak DCF value.
#                 : if <min Y> is NEGATIVE: the Y-level is defined |min Y| absolute value
compute_centroid 01

	# It uses fitx fity

        if( $?1 ) { 
	   define ycut_in $1
        } else {
	   define ycut_in ? < Min Y : >
        }

	if( $ycut_in > 0 ) {
	   find_dcf_peak
	   define ycut $($ycut_in*$dcf_peak_y)
	} else { 
	   define ycut $(-1.0*$ycut_in)
	}

	expand 1.5

	set tmpx  = fitx   if( fity >= $ycut )
	set tmpdx = fitdx  if( fity >= $ycut )
	set tmpy  = fity   if( fity >= $ycut ) 
	set tmpw  = fitw   if( fity >= $ycut ) 

	define x1 (tmpx[0])
	define x2 (tmpx[dimen(tmpx)-1])

        define sum_xy ( sum(tmpx*tmpy) )
        define sum_x  ( sum(tmpx) )
        define sum_y  ( sum(tmpy) )

	define xcentroid  ($sum_xy/$sum_y)

	define sigma_xcentroid   ( abs(($sum_x*$sum_y - $sum_xy*dimen(tmpx))/$sum_y**2.0) )

	set xc_dev2 = ((tmpx - $xcentroid)*tmpw)**2.0
	define sigma_xcentroid_2 ( sqrt(sum(xc_dev2))/$sum_y )
	define sigma_xcentroid_3 ( sqrt( sum(xc_dev2) + sum(tmpdx*tmpdx) )/$sum_y )

	#echo " Centroid = "$xcentroid"  ("$sigma_xcentroid") ("$sigma_xcentroid_2") ("$sigma_xcentroid_3")"
	echo " Centroid = "$xcentroid"  ("$sigma_xcentroid_2") ("$sigma_xcentroid_3") for N = "$(dimen(tmpx))

	ltype 1 
	ctype 5
	relocate $x1 $ycut
	draw     $x1 $($ycut+0.3)
	#draw     $x1 $fy2 
	relocate $x2 $ycut
	draw     $x2 $($ycut+0.3)
	#draw     $x2 $fy2 
	relocate $x1 $ycut 
	draw     $x2 $ycut
	ltype 4 
	relocate $xcentroid $fy1 
	draw     $xcentroid $fy2 
	ltype 0 

	lweight 5
	relocate $($xcentroid - $sigma_xcentroid_2) $ycut
	draw     $($xcentroid + $sigma_xcentroid_2) $ycut
	relocate  $xcentroid $ycut
	ptype 4 3 dot
	lweight 3
	ctype 2

#-------------------------------------------------------------------------------
##==============================================================================
## OBSOLETE STUFF BELOW
##==============================================================================
## prepare_lc_for_crossc  : prepares the light curve for the DCF code
##
##    IMPORTANT: MACRO NOT UPDATE FOR THE CONVERSION TO LOG DATA STORAGE
##
prepare_lc_for_crossc 

        # set_read_sim_gf
        set_read_sim_gf

        #define XC_DATA "/shared.scratch/xc1/data"
        #define XC_DATA "/home/gfossati/Science/Xuhui/paper_MC/xc_data"
        #define XC_DATA "/home/gfossati/Science/Xuhui/xc_data"

        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #LIN2LOG# IMPORTANT: LC AND SEDS FOR THESE CASES HAVE NOT BEEN REFORMATTED!!!
        #??# data "$!XC_DATA/$!SIMDIR/$lc_07.dat"
        data "$!XC_DATA/$!SIMDIR/lc_07_std.dat"
        read < x 1 y1 2 y2 3 y3 4 y4 5 y5 6 y6 7 y7 8 >
        define scaling_factor read 9 2 
        echo "| Parameters read from data file"
        echo "| Luminosity scaling factor : "$scaling_factor

        if( $flag_fg_case ){
           data "$!XC_DATA/$!SIMDIR/lc_07_fg.dat"
           read < fg1 2 fg2 3 fg3 4 fg4 5 fg5 6 fg6 7 fg7 8 >
           define fg_scaling_factor read 9 2   #GF# NEW
           echo "| Parameters read from data file"
           echo "| LC FG scaling factor : "$fg_scaling_factor
           # define fg_scaling_factor ? { >>> FG Luminosity scaling factor : }

           do 9=1,7 {
              define fg$9 $( fg$9[0]/$fg_scaling_factor )
              set y$9 = y$9/$scaling_factor + $fg$9
           }

           #DEL# do 9=1,7 {
           #DEL#    define fg$9 read 9 $($9+1)
           #DEL#    set y$9 = y$9 + $fg$9
           #DEL# }

           #DEL# define fg1 read 9 2
           #DEL# define fg2 read 9 3
           #DEL# define fg3 read 9 4
           #DEL# define fg4 read 9 5
           #DEL# define fg5 read 9 6
           #DEL# define fg6 read 9 7
           #DEL# define fg7 read 9 8
           #DEL# set y1 = y1 + $fg1
           #DEL# set y2 = y2 + $fg2
           #DEL# set y3 = y3 + $fg3
           #DEL# set y4 = y4 + $fg4
           #DEL# set y5 = y5 + $fg5
           #DEL# set y6 = y6 + $fg6
           #DEL# set y7 = y7 + $fg7
        }

        set y2 = y2/1.e40
        set y3 = y3/1.e40
        set y7 = y7/1.e40

        define 9 $which_sim
        print $9_cc2.dat  '1 %14.7e 1 %14.7e 0\n' {x y2}
        print $9_cc3.dat  '1 %14.7e 1 %14.7e 0\n' {x y3}
        print $9_cc7.dat  '1 %14.7e 1 %14.7e 0\n' {x y7}

##-------------------------------------------------------------------------------
