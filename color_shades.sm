#---------------------------------------------------------------------------
# color_map 12
color_map 12

	#---------------------------------------------
	# Color stuff
	#
        set colours = CTYPE()
        set cnames  = CTYPE(STRING)

	if($?1) { 
           set c1dum = 0,255,$(1024/$1)
           set c2dum = c1dum*0 + 255
           set c3dum = c1dum*0 
	} else {
	   define 1
           set c1dum = 0,255,$(1024/$1)
           set c2dum = c1dum*0 + 255
           set c3dum = c1dum*0 
	}

	if(!$?2) { 
	    echo -----------------------------------
	    echo ** Available color palettes: 
	    echo [-1] B&W   ( high is white )
	    echo  [0] B&W   ( high is black )
	    echo  [1] rainbow (black--->yellow)
	    echo  [2] rainbow (yellow--->black)
	    echo  [3] 'heat'
	    echo  [4] cyan-->blue
	    define mappa ? { Which Palette ? }
	} else {
	    define mappa $2 
	} 

	if ( $mappa == -1 ) {
	   set coldum = 0,255,$(256/$1)
           ctype = (1 + 256 + 256*256)*coldum
	}

	if ( $mappa == 0 ) {
	   set coldum = 0,255,$(256/$1)
           ctype = (1 + 256 + 256*256)*(255-coldum)
	}

	if ( $mappa == 1 ) {
           set blue  = c1dum       CONCAT (255-c1dum) CONCAT c3dum       CONCAT c1dum
           set green = c3dum       CONCAT c3dum       CONCAT c1dum       CONCAT c2dum
           set red   = c3dum       CONCAT c1dum       CONCAT c2dum       CONCAT c2dum 
        
           ctype    = red + 256*green + 256*256*blue
           set cvec = red + 256*green + 256*256*blue

           set coldum = red
	}

	if ( $mappa == 2 ) {
           set blue  = (255-c1dum) CONCAT c3dum       CONCAT c1dum       CONCAT (255-c1dum)
           set green = c2dum       CONCAT (255-c1dum) CONCAT c3dum       CONCAT c3dum
           set red   = c2dum       CONCAT c2dum       CONCAT (255-c1dum) CONCAT c3dum 
        
           ctype    = red + 256*green + 256*256*blue
           set cvec = red + 256*green + 256*256*blue

           set coldum = red
	}

	if ( $mappa == 3 ) {
	   set coldum = 0,255,$(256/$1)
           ctype = 255 + 256*(255-coldum)
	}

	if ( $mappa == 4 ) {
	   set coldum = 0,255,$(256/$1)
           ctype = 0 + 256*(255-coldum) + 256*256*255
	}

#---------------------------------------------------------------------------
# plot_shaded_dots <x> <y> <color-coding-vec> <expand>
plot_shaded_dots 34

	#---------------------------------------------
	# defining color palette
	#
	# if(!$?ncolpalette) {
	   define ncolpalette ? { Number of colors in the palette : }
	# }
	color_map $ncolpalette

	if($?4) { define myexp $4 } else { define myexp 1 }

	vecminmax $3 min_for_col max_for_col

	define min_for_col ? {  Minimum value of color coding vector :  }
	define max_for_col ? {  Maximum value of color coding vector :  }

	#
	# drawing itself 
	#
	echo ----------------------------------------------------------------------
	echo Now select an exponent to be used in the \$value-color conversion.
	echo   eta > 1 : more colors used for the top    of the range of \$value
	echo   eta < 1 :                          bottom 
	define expo ? { Exponent used in color-mapping ? }
	set colv = int( (dimen(coldum)-1)*(($3 - $min_for_col)/($max_for_col - $min_for_col))**$expo )
	echo colv DONE

	lweight 3 
	do 4=0,$(dimen($1)-1) {
	    if( $(colv[$4]) <= $(dimen(coldum)-1) ){
	       ctype $(colv[$4])
	    } else {
	       ctype $(dimen(coldum)-1)
	    }

	    ptype 4 3 expand $(2.0*$myexp) relocate $($1[$4]) $($2[$4]) dot 
	}

	#---------------------------------------------
	# Restoring ColorMap
	#
	delete coldum
        echo Restoring ColorMap
	restore_colors_default

	define border "n"
	define border ? { Draw dot-borders [y/n] : }
	if( substr('$border',0,1) == 'y' ) {
	lweight 1
	do 4=0,$(dimen($1)-1) {
	    ctype 2
	    ptype 4 0 expand $(2.1*$myexp) relocate $($1[$4]) $($2[$4]) dot 
	}
	lweight 3
	}

	#---------------------------------------------
	# Plotting color scale
	#
	# i) defining color palette
	#
	echo Re-Defining color palette
	color_map $ncolpalette $mappa
	echo Drawing color scale 

	# location from plot_dtlc "short(er)": 4500 31500 4500 29500
	# location 29500 31000 5000 29000
	location 4500 31500 30000 31000
	limits $min_for_col $max_for_col 0 1
	# ticksize 0 0 0 0 
	ticksize 0 0 1 1
	expand 1.1
	box 0 0 1 0

	ptype 4 3 
	expand 2.5

	set ydum  = $min_for_col,$max_for_col,$(($max_for_col-$min_for_col)/99)
	set colv2 = int( (dimen(coldum)-1)*((ydum - $min_for_col)/($max_for_col-$min_for_col))**$expo ) 

	do k=0,$(dimen(ydum)-2) {
	    ctype $(colv2[$k])
	    foreach step ( 0.25 0.5 0.75 ) {
	       relocate $(ydum[$k]) $step
	       dot
	    }
	}

	#---------------------------------------------
	# Restoring ColorMap
	#
        echo Restoring ColorMap
	restore_colors_default

	ctype 2 
	expand 1.1
	ticksize 0 0 1 1
	box 0 0 1 0
	expand 2.5

	delete colours
	delete cnames

#---------------------------------------------------------------------------
# plot_dtlc_log_shade
plot_dtlc_log_shade

	define t0ref ? {* T_0_ref = } 
	define t0ref ( sprintf('%7.1f',$t0ref) )

	echo "---------------------------------------------"
	
	echo " * Suffix of vectors to be loaded..."
	define suffix ?    {      : }
	echo " * Constant to multiply Data for shift ..."
	define mulconst ?  {      : }
	echo " ---"
	echo " * FULL NAME of the vector to be used for color coding..."
	define color_vector ? {      : }
	help rate_$suffix
	help $color_vector

	echo "---------------------------------------------"
	define bottomrate ? {* Lower limit to count-rate : }
	if( $bottomrate <= 0 ) {
	   echo " CANNOT give a NEGATIVE minimum value..."
	   define bottomrate (1.e-4)
	   define bottomrate ? {* Lower limit to count-rate : }
	}
	define toprate    ? {* Upper limit to count-rate : }

	set newt_tmp       = newt_$suffix
	set newt1_tmp      = newt1_$suffix
	set newt2_tmp      = newt2_$suffix
	set newbin_tmp     = newbin_$suffix
	set rate_tmp       = rate_$suffix*$mulconst
	set lg_rate_tmp    = lg(rate_$suffix) + lg($mulconst)
	set cvrfr_tmp      = cvrfr_$suffix      

	# set err_rate_tmp   = err_rate_$suffix*$mulconst

	if( whatis(err_rate_"$!suffix"_u) == 41 ) { 
	   echo "-----------------------------------------------------------------"
	   echo " The dataset - "$suffix" - has both UP and DOWN errors defined "
	   echo "-----------------------------------------------------------------"
	   set err_rate_tmp_u   = $mulconst*err_rate_"$!suffix"_u
	   set err_rate_tmp_d   = $mulconst*err_rate_"$!suffix"_d
	   define del_ud 0
	} else {
	   echo "-----------------------------------------------------------------"
	   echo " The dataset - "$suffix" - has only one error vector defined "
	   echo "-----------------------------------------------------------------"
	   set err_rate_tmp_u   = $mulconst*err_rate_$suffix
	   set err_rate_tmp_d   = $mulconst*err_rate_$suffix
	   define del_ud 1
	}

	set err_lg_rate_tmp_u = lg(1 + err_rate_tmp_u/rate_tmp)
	set err_lg_rate_tmp_d = lg(rate_tmp) - lg(rate_tmp - err_rate_tmp_d)

	vecminmax rate_tmp dum    top_$suffix

	echo "---------------------------------------------"
	echo " * Start Time= "$inizio
	echo " * Stop Time = "$fine
	echo "---------------------------------------------"
	define inizio ? {* New Start Time ? }
	define fine   ? {* New Stop Time ? }
	echo "---------------------------------------------"

	define xinizio  $inizio
	define xfine    $fine
	define ymin    ( lg($bottomrate) )
	define ymax    ( lg($toprate) )

	echo "--------------------------------------------- "
	echo "* How do you prefer to customize your LOCATION ? "
	echo "   [1] Long      vertical (i.e. NO   space for labels outside)  "
	echo "   [2] Short     vertical (i.e. WITH space for labels outside)  "
	echo "   [3] Short(er) vertical (i.e. WITH space for TOP labels)  "
	define whatloc ? {* Your Choice ? }
	# define whatloc 1

	if($whatloc == 1) {
	   window 1 1 1 1
	   location 4500 31500 4500 31000
	}
	if($whatloc == 2) {
	   window 1 1 1 1
	   location 4500 31500 9500 31000
	} 
	if($whatloc == 3) {
	   window 1 1 1 1
	   location 4500 31500 4500 29500
	} 

	echo "---------------------------------------------"
	define layout1 ? {* Give me the general Y "windowing" code ? }
	             echo "  This is the number of Y-boxes: "$layout1
	define layout2 ? {* Give me the "Y-window" code for this box ? }

	window 1 $layout1 1 $(substr('$layout2',0,3))

	ctype 2
	lweight 3
	# TEMP CHANGE expand 1.5
	expand 1.1
	# ticksize 0 0 -0.5 1 
	ticksize 0 0 -1 10 
	limits $xinizio $xfine $ymin $ymax 

	if(substr('$layout2',0,1) == '1') {
	   box 1 2 3 0 
	   xlabel Time [s from T_0 = $t0ref (TJD)]
	} else {
	   if( $layout1 > 0 || substr('$layout2',3,1) == 'l' ) {
	      box 1 2 3 0 
	      xlabel Time [s from T_0 = $t0ref (TJD)]
	   } else {
	      if(substr('$layout2',0,1) == $(abs($layout1)) || substr('$layout2',2,1) == $(abs($layout1)) ) { 
	         box 0 2 0 0
	      } else {
	         box 0 2 3 0
	      }
	   }
	}
	ticksize 0 0 -5 10 
	box 3 2 3 3 
	
	## echo ----------------------------
	## echo * Normalize light curve to:
	## echo    [0] DON'T normalize
	## echo    [1] its MEAN 
	## echo    [2] its MAXIMUM
	## echo ----------------------------
	##
	define what 0
	##
	## define what ? {* your choice [only 0 is implemented] ? }
	if($what > 0) { 
	   echo "  Overriding your choice ["$what"]"
	   echo "  ....setting back to 0 "
	   define what 0
	}	

	if($what == 0) { 
	   define factor 1 
	   # ylabel count rate 
	   # TEMP CHANGE ylabel count rate [cts/s]
	   ## ylabel count rate [cts/s/PCU]
	}
	lweight 2
	define xerr "n"
	define xerr  ? {* Plot X error bars ? [y/n] }

	ptype 4 3
	# set lg_rate_tmp  = lg_rate_tmp/$factor
	# set err_rate_tmp = err_rate_tmp/$factor
	# set err_rate_tmp_u = err_rate_tmp_u/$factor
	# set err_rate_tmp_d = err_rate_tmp_d/$factor

	echo " * Connect neighboring points ?  "
	define congiungo ? {  Give number corresponding to LTYPE ? [-1 for NO]} 
	if($congiungo >= 0) {
	   ltype $congiungo
	   do 1=0,$(dimen(lg_rate_tmp)-2) {
	      define 2 $($1+1)
 	      relocate $(newt_tmp[$1]) $(lg_rate_tmp[$1])
	      if( rate_tmp[$1] != 0 && rate_tmp[$2] != 0 ) {
	          draw $(newt_tmp[$2]) $(lg_rate_tmp[$2]) 
	      }
	   }
	}
	ltype 0

	define labyear ? < What year (for UTC dates) : >
	if( $labyear == 2000 ) { utc_dates_00a }
	if( $labyear == 2001 ) { utc_dates_01  }

	## echo *** ----------------------
	## echo *** PLOT Options :
	## echo    [1] ex-"B/W"    (upper limits symbols implemented)
	## echo    [2] Ptype/Ctype (upper limits symbols implemented)
	## echo    [3] Ctype/Ctype
	## echo    [4] Shaded according to selected coding array
	## define come ? { Your choice ? }
	define come 4

	set newt_tmp2          = newt_tmp          if( (rate_tmp-err_rate_tmp_d) > 0)
	set rate_tmp2          = rate_tmp          if( (rate_tmp-err_rate_tmp_d) > 0)
	set lg_rate_tmp2       = lg_rate_tmp       if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_rate_tmp2_u    = err_rate_tmp_u    if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_rate_tmp2_d    = err_rate_tmp_d    if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_lg_rate_tmp2_u = err_lg_rate_tmp_u if( (rate_tmp-err_rate_tmp_d) > 0)
	set err_lg_rate_tmp2_d = err_lg_rate_tmp_d if( (rate_tmp-err_rate_tmp_d) > 0)
	set newbin_tmp2        = newbin_tmp        if( (rate_tmp-err_rate_tmp_d) > 0)

	set newt_tmp3          = newt_tmp          if( (rate_tmp-err_rate_tmp_d) <= 0)
	set rate_tmp3          = rate_tmp          if( (rate_tmp-err_rate_tmp_d) <= 0)
	set lg_rate_tmp3       = lg_rate_tmp       if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_rate_tmp3_u    = err_rate_tmp_u    if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_rate_tmp3_d    = err_rate_tmp_d    if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_lg_rate_tmp3_u = err_lg_rate_tmp_u if( (rate_tmp-err_rate_tmp_d) <= 0)
	set err_lg_rate_tmp3_d = err_lg_rate_tmp_d if( (rate_tmp-err_rate_tmp_d) <= 0)
	set newbin_tmp3        = newbin_tmp        if( (rate_tmp-err_rate_tmp_d) <= 0)
	define upper {{m -10 0 10 0 m 0 0 0 -2000 -200 -1700 0 -1850 200 -1700 0 -2000 }} 

	## if($come == 1) {
	##    define pty1 ? { Give the code for PTYPE [#1] : }
	##    define cty1 ? { Give the code for CTYPE [#1] : }
	##    lweight 3
	##    expand 1.5 ctype 2 
	##    errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_u 2
	##    errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_d 4
	##    if(substr('$xerr',0,1) == 'y') { 
	##        error_x newt_tmp2 lg_rate_tmp2 (newbin_tmp2/2)
	##        error_x newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))  (newbin_tmp3/2)
	##    }
	##    expand 1.2 ctype 2 ptype $upper 
	##    points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))

	##    expand 1.6 ctype $cty1 ptype $pty1 3 
	##    points  newt_tmp2 lg_rate_tmp2 
	##    points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u)) 
	##    expand 2.1 ctype 2 ptype $pty1 0 
	##    points  newt_tmp2 lg_rate_tmp2 
	##    points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))  
	##    lweight 2
	## }

	## if($come == 2) {
	##    define pty ? { Give the code for PTYPE [#1 #2] : }
	##    define cty ? { Give the code for CTYPE [#1] : }

	##    lweight 3
	##    expand 1.5 ctype $cty ptype $pty
	##    errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_u 2
	##    errorbar  newt_tmp2 lg_rate_tmp2 err_lg_rate_tmp2_d 4
	##    if(substr('$xerr',0,1) == 'y') { 
	##        error_x newt_tmp2 lg_rate_tmp2 (newbin_tmp2/2)
	##        error_x newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))  (newbin_tmp3/2)
	##    }
	##    expand 1.2 ptype $upper
	##    points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))

	##    expand 1.6 ctype $cty ptype $pty
	##    points  newt_tmp2 lg_rate_tmp2 
	##    points  newt_tmp3 (lg(rate_tmp3+err_rate_tmp3_u))
	##    lweight 2
	## }

	## if($come == 3) {
	##    echo -----------------------------------------
	##    define cty1 ? { Give the code for CTYPE [border] : }
	##    define cty2 ? { Give the code for CTYPE [inside] : }
	##    echo -----------------------------------------

	##    expand 1.5 ctype $cty
	##    errorbar  newt_tmp lg_rate_tmp err_lg_rate_tmp_u 2
	##    errorbar  newt_tmp lg_rate_tmp err_lg_rate_tmp_d 4
	##    if(substr('$xerr',0,1) == 'y') { 
	##        error_x newt_tmp lg_rate_tmp (newbin_tmp/2)
	##    }
	##    expand 2.0 ctype $cty1 ptype 20 3 
	##    points  newt_tmp lg_rate_tmp 

	##    expand 1.5 ctype $cty2 ptype 20 3 
	##    points  newt_tmp lg_rate_tmp 

	##    lweight 1.5
	##    expand 1.7 ctype $cty1 ptype 20 0 
	##    points  newt_tmp lg_rate_tmp 
	## }

	#---------------------------------------------
	# grids ?
	# 
	define plotgr "n"
	define plotgr ? {* Plot GRID ? [y/n] }
	if(substr('$plotgr',0,1) == 'y') {
	   define oldlwe $lweight
	   echo OLDLWEIGHT : $oldlwe
	   ctype 4 ltype 1 lweight 4
	     # ticksize 0 0 0.1 0.2 
	     # grid 1 1 
	   ticksize 0 0 0 0 
	   # grid 0 1 
	   grid 1 2 
	   ctype 2 ltype 0 lweight $oldlwe
	}

	define plotdays "y"
	define plotdays ? {* Plot DAYS ? [y/n] }
	if(substr('$plotdays',0,1) == 'y') {
	   define oldlwe $lweight
	   define oldexp $expand
	   define oldfx1 $fx1
	   define oldfx2 $fx2
	   define oldfy1 $fy1
	   define oldfy2 $fy2
	   echo OLDLWEIGHT : $oldlwe
	   ctype 3 ltype 2 lweight 4
	   limits $($t0ref+$fx1/86400) $($t0ref+$fx2/86400) $fy1 $fy2
	   ticksize 0.25 1 0.1 0.2 
	   grid 0 1 
	   ctype 2 ltype 0 lweight 3
	   notation -5 5 -5 5 
	   expand 1.25
	   # box 3 3 1 3 
	   notation 0 0 0 0 
	   limits $oldfx1 $oldfx2 $oldfy1 $oldfy2
	   relocate ( $(($gx1+$gx2)/2) $($gy2+2000) )
	   # putlabel 5 Time [TJD]
	   lweight $oldlwe
	   expand $oldexp
	}

	gsave 1
	if($come == 4) {
	     echo "***** Calling color shading routine *****"
             plot_shaded_dots newt_tmp lg_rate_tmp $color_vector 1.5
	     echo "***** Returning.... "
	}
	$grestore1

	if( $del_ud == 1 ) { 
	   echo " UP and DOWN errors were FAKE...deleting them" 
	   delete err_rate_tmp_u
	   delete err_rate_tmp_d
	}
	delete newt_tmp2
	delete rate_tmp2
	delete err_rate_tmp2
	delete err_rate_tmp2_u
	delete err_rate_tmp2_d
	delete err_lg_rate_tmp2_u
	delete err_lg_rate_tmp2_d

#---------------------------------------------------------------------------
# init
init
	echo ---------------------------------
	define SM_HOME :
	echo SM macro home directory is : $SM_HOME
	macro read "$!SM_HOME/utc_labels.sm"
	echo ---------------------------------

#---------------------------------------------------------------------------
#
#
#************************************************************************
#** WARNING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  **
#**   run macro 'init' before to proceed.                              **
#**   It is needed to load the macros necessary for plot labeling      **
#**                                                                    ** 
#************************************************************************
#
