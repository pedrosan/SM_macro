#---------------------------------------------------------------------------
# dtlc_fits_reb_snr:
#            produce una curva di luce rebinnata ad un certo numero di secondi
#            che deve essere multiplo del binning della curva di input.
#            INPUT : prima di eseguire RILEGGE SEMPRE i file originali ("readdata").
#            OUTPUT: cts_xxxx  [vettore] conteggi rebinnati 
#                  : err_xxxx  [vettore] errore su cts_xxxx 
#                  : ratio, err_ratio, sn_ratio [vettori]
dtlc_fits_reb_snr

        readdata_lc_fits

	#
	# readdata_lc_fits output arrays are:
	#   - t, dt, rate, sigma_rate, cvrfr 
	#   - t1      = t
	#   - t2      = t + 2*dt
	#   - dt_true = cvrfr*2*dt
	#   - counts  = dt_true*rate
	#   - err_counts  [Poisson or propagated]
	#   - err_rate    [Poisson or propagated]
	#

        sub_dtlc_reb_snr

#---------------------------------------------------------------------------
sub_dtlc_reb_snr

	echo -------------------------------------------------------------
	echo *                   The basic binning time is : $(2*$(dt[0]))

        define reb_snr ? {*                   What S/N per bin you want : }
        define reb_t   ? {* Max. New bintime (multiple of the basic one): } 
	echo -------------------------------------------------------------
	define newbin ($reb_t)

	define maxnewindex (dimen(t))
	echo  Max New Index = $maxnewindex

	set dimen(newt_tmp)     = $maxnewindex
	set dimen(newt1_tmp)    = $maxnewindex
	set dimen(newt2_tmp)    = $maxnewindex
	set dimen(newbin_tmp)   = $maxnewindex
	set dimen(counts_tmp)   = $maxnewindex
	set dimen(sigma_tmp)    = $maxnewindex
	set dimen(dt_true_tmp)  = $maxnewindex
	set dimen(snr_tmp)      = $maxnewindex
	set dimen(n_contrib_tmp)= $maxnewindex

	define maxindex (dimen(counts)-1)
	echo  Original LC vector dimension =  $($maxindex+1)
	echo       new LC vector dimension =  $maxnewindex

	define topcts    ( 0 )
	define bottomcts (100)

	define newt1_dum      ( $(t1[0]) )
	define cts_dum        ( 0 )
	define sigma_rate_dum ( 0 )
	define sigma_cts_dum  ( 0 )
	define dt_true_dum    ( 0 )
	define n_contrib_dum  ( 0 ) 

	define i             ( -1 )
	define badbin        ( 0 )

	do 1=0,$(dimen(counts)-1) { 
		          
	    define newt2_dum      ( $(t2[$1]) )
	    define cts_dum        ( $cts_dum        + $(counts[$1]))
	    define sigma_rate_dum ( $sigma_rate_dum + $(err_rate[$1])**2)
	    define sigma_cts_dum  ( $sigma_cts_dum  + $(err_counts[$1])**2)
	    define dt_true_dum    ( $dt_true_dum    + $(dt_true[$1]))
	    define n_contrib_dum  ( $n_contrib_dum  + 1)

	    define snr_num ( $cts_dum/$dt_true_dum )
	    define snr_den ( sqrt($sigma_rate_dum)/$n_contrib_dum )
	    define snr_dum ( $snr_num/$snr_den )

	    define length  ( $newt2_dum - $newt1_dum )

	    if( $snr_dum >= $reb_snr || $length >= $reb_t ) {
	       define i ( $i + 1 )
	       echo New bin OK [$i] : S/N = $(sprintf('%7.3f',$snr_dum)) [dT = $length]

	       set newt_tmp[$i]   = 0.5*($newt2_dum + $newt1_dum)
	       set newt1_tmp[$i]  = $newt1_dum
	       set newt2_tmp[$i]  = $newt2_dum
	       set newbin_tmp[$i] = $length

	       set counts_tmp[$i]    = $cts_dum
	       set sigma_tmp[$i]     = $sigma_rate_dum
	       set dt_true_tmp[$i]   = $dt_true_dum
	       set n_contrib_tmp[$i] = $n_contrib_dum

	       if( $length >= $reb_t && $snr_dum < $reb_snr ) {
		  define badbin ($badbin + 1)
	       }

	       define newt1_dum      ( $newt2_dum )
	       define cts_dum        ( 0 )
	       define sigma_rate_dum ( 0 )
	       define sigma_cts_dum  ( 0 )
	       define dt_true_dum    ( 0 )
	       define n_contrib_dum  ( 0 ) 
	    }

	    # if($cts_dum > $topcts ){
		# define topcts  ($cts_dum) 
		# define toprate ($cts_dum/$dt_true_dum) 
            # }
	    # if($cts_dum < $topcts && $cts_dum > 0 ){
		# define bottomcts  ($cts_dum) 
		# define bottomrate ($cts_dum/$dt_true_dum) 
            # }
	}

        echo ---- Doing left-overs ----
        define i ( $i + 1 )
        echo Left-overs bin is [$i] : S/N = $snr_dum
	set newt_tmp[$i]   = 0.5*($newt2_dum + $newt1_dum)
	set newt1_tmp[$i]  = $newt1_dum
	set newt2_tmp[$i]  = $newt2_dum
	set newbin_tmp[$i] = $length

	set counts_tmp[$i]    = $cts_dum
	set sigma_tmp[$i]     = $sigma_rate_dum
	set dt_true_tmp[$i]   = $dt_true_dum
	set n_contrib_tmp[$i] = $n_contrib_dum

        define new_size ( $i+1 )
        echo -------------------------------------------------------
        echo  The size of the new vectors is : $new_size (it was $(dimen(counts)-1))
        echo  The number of 'uncompleted' new bins is : $badj
        echo -------------------------------------------------------

	foreach 2 < newt newt1 newt2 newbin counts sigma dt_true n_contrib > {
	   set dimen($2_reb) = $new_size
	   do 3=0,$($new_size-1) {
	      set $2_reb[$3] = $2_tmp[$3] 
	   }
	}
	set err_counts_reb = sqrt(counts_reb)
	set rate_reb       = counts_reb/dt_true_reb
	set cvrfr_reb      = dt_true_reb/newbin_reb
	## set err_rate_reb   = sqrt(sigma_reb)/n_contrib_reb

	define how_error ? {Poisson error or Propagate ? [1/2] }
	if(substr('$how_error',0,1) == '1') {
	    set err_rate_reb = err_counts_reb/dt_true_reb
	} else {
	    set err_rate_reb = sqrt(sigma_reb)/n_contrib_reb
	}

	set clean_newt_reb     = newt_reb     if( rate_reb > 0 )
	set clean_rate_reb     = rate_reb     if( rate_reb > 0 )
	set clean_err_rate_reb = err_rate_reb if( rate_reb > 0 )

	stats  clean_rate_reb                    mean_reb  width_reb  kurt_reb
	stats2 clean_rate_reb (1/clean_err_rate_reb**2) mean2_reb width2_reb kurt2_reb

	echo -----------------------------------------------------------------
	echo * Average cts/sec = $mean_reb    $mean2_reb
	echo * sigma           = $width_reb   $width2_reb
	echo * kurtosis        = $kurt_reb    $kurt2_reb

	echo -----------------------------------------------------------------
	echo * ha prodotto una serie di vettori/variabili del tipo *_reb
	echo * Possono essere renamed con il comando "store_reb_lc"
	echo -----------------------------------------------------------------

	define whattodo ? {* Rename vectors to *_name ?}
	if(substr('$whattodo',0,1) == 'y') {
	  define name ?   {  Suffix name for vectors : }
	  foreach 3 {newt newt1 newt2 newbin dt_true counts err_counts rate err_rate cvrfr }{
	     echo Doing: $3
	     set $3_$name = $3_reb
	     delete $3_reb
	  }
	} 

	define mean_$name   ($mean_reb)
	define mean2_$name  ($mean2_reb)
	define width_$name  ($width_reb)
	define width2_$name ($width2_reb)

#---------------------------------------------------------------------------
# dtlc_asm_sec_snr
dtlc_asm_sec_snr

	# data mkn421_170.dat
	# data mkn421_current.dat
	# read { asmt 1 rate 8 err_rate 9 dt_true 10 }
	data asm_mkn421_2000.dat
	read { asmt 1 rate 2 err_rate 3 dt_true 5 }
	help asmt
	help rate

	set check = rate/err_rate

	define d_mjd_start ? { Start Time (MJD, e.g. 50924) : }
	define d_mjd_stop  ? { Stop  Time (MJD, e.g. 50924) : }

	define whattodo ? {Rescale Time-Axis ?}
	if(substr('$whattodo',0,1) == 'y') {
	   define mjd0ref   ? { Time (MJD day) to which rescale ? }
	   set asmt  = (asmt - $mjd0ref)*86400 
	   define mjd_start ( ($d_mjd_start - $mjd0ref)*86400 )
	   define mjd_stop  ( ($d_mjd_stop - $mjd0ref)*86400 )
	} else {
	   define mjd_start ( $d_mjd_start )
	   define mjd_stop  ( $d_mjd_stop )
	}

	define d_sec_step  ? { Light Curve Step (seconds) : }
	define sec_step $d_sec_step

	define howmany (int(($mjd_stop-$mjd_start)/$sec_step))
	echo -------------------------------------------------------
	echo * the number of new interval will be : $howmany
	echo -------------------------------------------------------

	set newt   = $($mjd_start+0.5*$sec_step),$mjd_stop,$sec_step
	set newt1  = newt - 0.5*$sec_step
	set newt2  = newt + 0.5*$sec_step
	set newbin = 0*newt + $sec_step

	define maxnewindex (dimen(newt))
	set dimen(rate_reb)    = $maxnewindex
	set dimen(err_rate_reb)= $maxnewindex
	set dimen(sigma_reb)   = $maxnewindex
	set dimen(dt_true_reb) = $maxnewindex

	set rate     = rate     if(asmt >= $mjd_start && asmt <= $mjd_stop)
	set err_rate = err_rate if(asmt >= $mjd_start && asmt <= $mjd_stop)
	set dt_true  = dt_true  if(asmt >= $mjd_start && asmt <= $mjd_stop)
	set check    = check    if(asmt >= $mjd_start && asmt <= $mjd_stop)
	set asmt     = asmt     if(asmt >= $mjd_start && asmt <= $mjd_stop)
	set sigma_rate = err_rate

	define peso ? { Weight Rebinning with relative Exp.Time [y/n] ? }
	if(substr('$peso',0,1) == 'n') {
	   set dt_true = 0*dt_true + 1
	} else {
	   set dt_true = dt_true/90.
	}

	define peso2 ? { Weight Rebinning with the errors [y/n] ? }
	if(substr('$peso2',0,1) == 'n') {
	   set weight = 0*sigma_rate + 1
	} else {
	   set weight = 1/sigma_rate**2.
	}

	echo   
	define filtro ? { Filter data ? [y/n] }
	if(substr('$filtro',0,1) == 'n') {
	    set check = 2 + 0*check
	    define soglia (-1)
	} else {
	    define soglia ? { Rate/Sigma threshold : }
	}

	define maxindex (dimen(rate)-1)
	define cc (0)
	define kk (0)

	define first      (0)
	define tmp_first  (0)
	define toprate    (0)
	define bottomrate (100)

	echo "new LC vector dimension = "$maxnewindex
	echo "Original LC vector dimension = "$($maxindex+1)
	echo -------------------------------------------------------

	do i=0,$($maxnewindex-1) {
	  if($(int($i/10)*10) == $i) { echo * $i }

	  define rate_dum      (0)
	  define sigma_dum     (0)
	  define dt_true_dum   (0)

	  define lastidx $maxindex 

	  do j=$first,$lastidx {
	    if( $(asmt[$j]) < $(newt2[$i]) ) {
		if( $(check[$j]) > $soglia ) { 	          
	          define rate_dum    ($rate_dum + rate[$j]*dt_true[$j]*weight[$j])
	          define sigma_dum   ($sigma_dum + (dt_true[$j]*sigma_rate[$j]*weight[$j])**2)
	          define dt_true_dum ($dt_true_dum + dt_true[$j]*weight[$j])
		  define kk ($kk+1)
		}
	        define cc ($cc+1)
	        define tmp_first ($j+1)
	    }
          }
	  echo --- closing [$i] ------
	  define previous $first
	  define first    $tmp_first

	  if($dt_true_dum == 0) {
	     echo             [$i] new bin empty 
	  }

	  if($dt_true_dum == 0) {
	     set rate_reb[$i]  = 0.0
	     set sigma_reb[$i] = 0.0
	     define rate_dum 0.0
	  } else {
	     set rate_reb[$i]  = $rate_dum/$dt_true_dum
	     set sigma_reb[$i] = sqrt($sigma_dum)/$dt_true_dum
	     define rate_dum ($rate_dum/$dt_true_dum)
	  }
	  set dt_true_reb[$i] = $dt_true_dum

	  if($rate_dum > $toprate ){
		  define toprate $rate_dum
          }
	  if($rate_dum < $bottomrate && $rate_dum > 0 ){
		  define bottomrate $rate_dum
          }
	}

	echo ---------------------------------------------
	echo Considered data points are : $cc
	echo Used       data points are : $kk
	echo ---------------------------------------------

	set newt_reb     = newt
	set newt1_reb    = newt1
	set newt2_reb    = newt2
	set newbin_reb   = newbin
	set err_rate_reb = sigma_reb
	set cvrfr_reb    = 0*sigma_reb + 1
	set cvrfr_reb    = dt_true_reb

	set clean_newt_reb     = newt_reb     if(rate_reb > 0)
	set clean_rate_reb     = rate_reb     if(rate_reb > 0)
	set clean_err_rate_reb = err_rate_reb if(rate_reb > 0)

	stats  clean_rate_reb                    mean_reb  width_reb  kurt_reb
	stats2 clean_rate_reb clean_err_rate_reb mean2_reb width2_reb kurt2_reb

	echo -----------------------------------------------------------------
	echo * Average cts/sec = $mean_reb    $mean2_reb
	echo * sigma           = $width_reb   $width2_reb
	echo * kurtosis        = $kurt_reb    $kurt2_reb

	echo -----------------------------------------------------------------
	echo * ha prodotto una serie di vettori/variabili del tipo *_reb
	echo * Possono essere renamed con il comando "store_reb_lc"
	echo -----------------------------------------------------------------

	define whattodo ? {Rename vectors ?}
	if(substr('$whattodo',0,1) == 'y') {
	  define name ? {Suffix name for vectors to become *_name ?}
	  foreach 3 {newt newt1 newt2 newbin dt_true rate err_rate cvrfr}{
	     set $3_$name = $3_reb
	  }
	} 

	define mean_$name   ($mean_reb)
	define mean2_$name  ($mean2_reb)
	define width_$name  ($width_reb)
	define width2_$name ($width2_reb)

#---------------------------------------------------------------------------
